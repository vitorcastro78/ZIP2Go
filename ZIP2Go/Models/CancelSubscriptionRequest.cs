/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CancelSubscriptionRequest : IEquatable<CancelSubscriptionRequest>
    { 
        /// <summary>
        /// Date on which the subscription is canceled.
        /// </summary>
        /// <value>Date on which the subscription is canceled.</value>

        [DataMember(Name="cancel_date")]
        public string CancelDate { get; set; }

        /// <summary>
        /// The date on which the subscription is canceled. Can be either the end of the subscription term or the end of the billing period.
        /// </summary>
        /// <value>The date on which the subscription is canceled. Can be either the end of the subscription term or the end of the billing period.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CancelAtEnum
        {
            /// <summary>
            /// Enum InvoicePeriodEndEnum for invoice_period_end
            /// </summary>
            [EnumMember(Value = "invoice_period_end")]
            InvoicePeriodEndEnum = 0,
            /// <summary>
            /// Enum SubscriptionTermEndEnum for subscription_term_end
            /// </summary>
            [EnumMember(Value = "subscription_term_end")]
            SubscriptionTermEndEnum = 1        }

        /// <summary>
        /// The date on which the subscription is canceled. Can be either the end of the subscription term or the end of the billing period.
        /// </summary>
        /// <value>The date on which the subscription is canceled. Can be either the end of the subscription term or the end of the billing period.</value>

        [DataMember(Name="cancel_at")]
        public CancelAtEnum? CancelAt { get; set; }

        /// <summary>
        /// Processing options for the invoice or payment.
        /// </summary>
        /// <value>Processing options for the invoice or payment.</value>

        [DataMember(Name="processing_options")]
        public AllOfcancelSubscriptionRequestProcessingOptions ProcessingOptions { get; set; }

        /// <summary>
        /// Amount to be refunded
        /// </summary>
        /// <value>Amount to be refunded</value>

        [DataMember(Name="refund_amount")]
        public decimal? RefundAmount { get; set; }

        /// <summary>
        /// Indicates whether to write off the outstanding balance on the invoice after canceling the subscription.
        /// </summary>
        /// <value>Indicates whether to write off the outstanding balance on the invoice after canceling the subscription.</value>

        [DataMember(Name="write_off")]
        public bool? WriteOff { get; set; }

        /// <summary>
        /// Gets or Sets WriteOffBehavior
        /// </summary>

        [DataMember(Name="write_off_behavior")]
        public WriteOffSuscriptionRequest WriteOffBehavior { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CancelSubscriptionRequest {\n");
            sb.Append("  CancelDate: ").Append(CancelDate).Append("\n");
            sb.Append("  CancelAt: ").Append(CancelAt).Append("\n");
            sb.Append("  ProcessingOptions: ").Append(ProcessingOptions).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  WriteOff: ").Append(WriteOff).Append("\n");
            sb.Append("  WriteOffBehavior: ").Append(WriteOffBehavior).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CancelSubscriptionRequest)obj);
        }

        /// <summary>
        /// Returns true if CancelSubscriptionRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CancelSubscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CancelSubscriptionRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CancelDate == other.CancelDate ||
                    CancelDate != null &&
                    CancelDate.Equals(other.CancelDate)
                ) && 
                (
                    CancelAt == other.CancelAt ||
                    CancelAt != null &&
                    CancelAt.Equals(other.CancelAt)
                ) && 
                (
                    ProcessingOptions == other.ProcessingOptions ||
                    ProcessingOptions != null &&
                    ProcessingOptions.Equals(other.ProcessingOptions)
                ) && 
                (
                    RefundAmount == other.RefundAmount ||
                    RefundAmount != null &&
                    RefundAmount.Equals(other.RefundAmount)
                ) && 
                (
                    WriteOff == other.WriteOff ||
                    WriteOff != null &&
                    WriteOff.Equals(other.WriteOff)
                ) && 
                (
                    WriteOffBehavior == other.WriteOffBehavior ||
                    WriteOffBehavior != null &&
                    WriteOffBehavior.Equals(other.WriteOffBehavior)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CancelDate != null)
                    hashCode = hashCode * 59 + CancelDate.GetHashCode();
                    if (CancelAt != null)
                    hashCode = hashCode * 59 + CancelAt.GetHashCode();
                    if (ProcessingOptions != null)
                    hashCode = hashCode * 59 + ProcessingOptions.GetHashCode();
                    if (RefundAmount != null)
                    hashCode = hashCode * 59 + RefundAmount.GetHashCode();
                    if (WriteOff != null)
                    hashCode = hashCode * 59 + WriteOff.GetHashCode();
                    if (WriteOffBehavior != null)
                    hashCode = hashCode * 59 + WriteOffBehavior.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CancelSubscriptionRequest left, CancelSubscriptionRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CancelSubscriptionRequest left, CancelSubscriptionRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
