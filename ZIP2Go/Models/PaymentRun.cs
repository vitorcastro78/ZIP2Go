/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentRun : IEquatable<PaymentRun>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfpaymentRunCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// If true, any posted credit memos are applied first.
        /// </summary>
        /// <value>If true, any posted credit memos are applied first.</value>

        [DataMember(Name="apply_credit_memos")]
        public bool? ApplyCreditMemos { get; set; }

        /// <summary>
        /// If true, any unapplied payments are applied first.
        /// </summary>
        /// <value>If true, any unapplied payments are applied first.</value>

        [DataMember(Name="apply_unapplied_payments")]
        public bool? ApplyUnappliedPayments { get; set; }

        /// <summary>
        /// Identifier of the customer account batch to be included in this payment run.
        /// </summary>
        /// <value>Identifier of the customer account batch to be included in this payment run.</value>

        [DataMember(Name="batch")]
        public string Batch { get; set; }

        /// <summary>
        /// If true, a single payment will be collected for all receivables due on an account.
        /// </summary>
        /// <value>If true, a single payment will be collected for all receivables due on an account.</value>

        [DataMember(Name="consolidate_payment")]
        public bool? ConsolidatePayment { get; set; }

        /// <summary>
        /// The day of the month to bill multiple customer accounts.
        /// </summary>
        /// <value>The day of the month to bill multiple customer accounts.</value>

        [Range(0, 31)]
        [DataMember(Name="bill_cycle_day")]
        public int? BillCycleDay { get; set; }

        /// <summary>
        /// The unique identifier of a bill run.
        /// </summary>
        /// <value>The unique identifier of a bill run.</value>

        [DataMember(Name="bill_run_id")]
        public string BillRunId { get; set; }

        /// <summary>
        /// Indicates whether to process electronic payments during the execution of payment runs.
        /// </summary>
        /// <value>Indicates whether to process electronic payments during the execution of payment runs.</value>

        [DataMember(Name="collect_payment")]
        public bool? CollectPayment { get; set; }

        /// <summary>
        /// Three-letter ISO currency code.
        /// </summary>
        /// <value>Three-letter ISO currency code.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The date and time when the payment run executed, in the &#x60;yyyy-mm-dd hh:mm:ss&#x60; format.
        /// </summary>
        /// <value>The date and time when the payment run executed, in the &#x60;yyyy-mm-dd hh:mm:ss&#x60; format.</value>

        [DataMember(Name="state_transitions")]
        public AllOfpaymentRunStateTransitions StateTransitions { get; set; }

        /// <summary>
        /// Unique identifier for the payment gateway.
        /// </summary>
        /// <value>Unique identifier for the payment gateway.</value>

        [DataMember(Name="payment_gateway_id")]
        public string PaymentGatewayId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentCollectionDate
        /// </summary>

        [DataMember(Name="payment_collection_date")]
        public DateTime? PaymentCollectionDate { get; private set; }

        /// <summary>
        /// Human-readable identifier for this object.
        /// </summary>
        /// <value>Human-readable identifier for this object.</value>

        [DataMember(Name="payment_run_number")]
        public string PaymentRunNumber { get; set; }

        /// <summary>
        /// The date and time when the scheduled payment run is to be executed, in &#x60;yyyy-mm-dd hh:mm:ss&#x60; format.
        /// </summary>
        /// <value>The date and time when the scheduled payment run is to be executed, in &#x60;yyyy-mm-dd hh:mm:ss&#x60; format.</value>

        [DataMember(Name="payment_run_date")]
        public DateTime? PaymentRunDate { get; set; }

        /// <summary>
        /// The target date used to determine which receivables to be paid in the payment run.       The payments are collected for all receivables with the due date no later than the target date.
        /// </summary>
        /// <value>The target date used to determine which receivables to be paid in the payment run.       The payments are collected for all receivables with the due date no later than the target date.</value>

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// Status of the payment run.
        /// </summary>
        /// <value>Status of the payment run.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ProcessingEnum for processing
            /// </summary>
            [EnumMember(Value = "processing")]
            ProcessingEnum = 0,
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = "pending")]
            PendingEnum = 1,
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 2,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 3,
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 4        }

        /// <summary>
        /// Status of the payment run.
        /// </summary>
        /// <value>Status of the payment run.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Summary of the payment run.
        /// </summary>
        /// <value>Summary of the payment run.</value>

        [DataMember(Name="summary")]
        public AllOfpaymentRunSummary Summary { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRun {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  ApplyCreditMemos: ").Append(ApplyCreditMemos).Append("\n");
            sb.Append("  ApplyUnappliedPayments: ").Append(ApplyUnappliedPayments).Append("\n");
            sb.Append("  Batch: ").Append(Batch).Append("\n");
            sb.Append("  ConsolidatePayment: ").Append(ConsolidatePayment).Append("\n");
            sb.Append("  BillCycleDay: ").Append(BillCycleDay).Append("\n");
            sb.Append("  BillRunId: ").Append(BillRunId).Append("\n");
            sb.Append("  CollectPayment: ").Append(CollectPayment).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  StateTransitions: ").Append(StateTransitions).Append("\n");
            sb.Append("  PaymentGatewayId: ").Append(PaymentGatewayId).Append("\n");
            sb.Append("  PaymentCollectionDate: ").Append(PaymentCollectionDate).Append("\n");
            sb.Append("  PaymentRunNumber: ").Append(PaymentRunNumber).Append("\n");
            sb.Append("  PaymentRunDate: ").Append(PaymentRunDate).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentRun)obj);
        }

        /// <summary>
        /// Returns true if PaymentRun instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRun other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    ApplyCreditMemos == other.ApplyCreditMemos ||
                    ApplyCreditMemos != null &&
                    ApplyCreditMemos.Equals(other.ApplyCreditMemos)
                ) && 
                (
                    ApplyUnappliedPayments == other.ApplyUnappliedPayments ||
                    ApplyUnappliedPayments != null &&
                    ApplyUnappliedPayments.Equals(other.ApplyUnappliedPayments)
                ) && 
                (
                    Batch == other.Batch ||
                    Batch != null &&
                    Batch.Equals(other.Batch)
                ) && 
                (
                    ConsolidatePayment == other.ConsolidatePayment ||
                    ConsolidatePayment != null &&
                    ConsolidatePayment.Equals(other.ConsolidatePayment)
                ) && 
                (
                    BillCycleDay == other.BillCycleDay ||
                    BillCycleDay != null &&
                    BillCycleDay.Equals(other.BillCycleDay)
                ) && 
                (
                    BillRunId == other.BillRunId ||
                    BillRunId != null &&
                    BillRunId.Equals(other.BillRunId)
                ) && 
                (
                    CollectPayment == other.CollectPayment ||
                    CollectPayment != null &&
                    CollectPayment.Equals(other.CollectPayment)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    StateTransitions == other.StateTransitions ||
                    StateTransitions != null &&
                    StateTransitions.Equals(other.StateTransitions)
                ) && 
                (
                    PaymentGatewayId == other.PaymentGatewayId ||
                    PaymentGatewayId != null &&
                    PaymentGatewayId.Equals(other.PaymentGatewayId)
                ) && 
                (
                    PaymentCollectionDate == other.PaymentCollectionDate ||
                    PaymentCollectionDate != null &&
                    PaymentCollectionDate.Equals(other.PaymentCollectionDate)
                ) && 
                (
                    PaymentRunNumber == other.PaymentRunNumber ||
                    PaymentRunNumber != null &&
                    PaymentRunNumber.Equals(other.PaymentRunNumber)
                ) && 
                (
                    PaymentRunDate == other.PaymentRunDate ||
                    PaymentRunDate != null &&
                    PaymentRunDate.Equals(other.PaymentRunDate)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Summary == other.Summary ||
                    Summary != null &&
                    Summary.Equals(other.Summary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (ApplyCreditMemos != null)
                    hashCode = hashCode * 59 + ApplyCreditMemos.GetHashCode();
                    if (ApplyUnappliedPayments != null)
                    hashCode = hashCode * 59 + ApplyUnappliedPayments.GetHashCode();
                    if (Batch != null)
                    hashCode = hashCode * 59 + Batch.GetHashCode();
                    if (ConsolidatePayment != null)
                    hashCode = hashCode * 59 + ConsolidatePayment.GetHashCode();
                    if (BillCycleDay != null)
                    hashCode = hashCode * 59 + BillCycleDay.GetHashCode();
                    if (BillRunId != null)
                    hashCode = hashCode * 59 + BillRunId.GetHashCode();
                    if (CollectPayment != null)
                    hashCode = hashCode * 59 + CollectPayment.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (StateTransitions != null)
                    hashCode = hashCode * 59 + StateTransitions.GetHashCode();
                    if (PaymentGatewayId != null)
                    hashCode = hashCode * 59 + PaymentGatewayId.GetHashCode();
                    if (PaymentCollectionDate != null)
                    hashCode = hashCode * 59 + PaymentCollectionDate.GetHashCode();
                    if (PaymentRunNumber != null)
                    hashCode = hashCode * 59 + PaymentRunNumber.GetHashCode();
                    if (PaymentRunDate != null)
                    hashCode = hashCode * 59 + PaymentRunDate.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Summary != null)
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentRun left, PaymentRun right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentRun left, PaymentRun right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
