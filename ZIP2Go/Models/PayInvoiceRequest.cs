/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PayInvoiceRequest : IEquatable<PayInvoiceRequest>
    { 
        /// <summary>
        /// The amount of the payment.
        /// </summary>
        /// <value>The amount of the payment.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice. Either &#x60;account_id&#x60; or &#x60;account_number&#x60; is required.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice. Either &#x60;account_id&#x60; or &#x60;account_number&#x60; is required.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Human-readable identifier of the account that owns the invoice. Either &#x60;account_number&#x60; or &#x60;account_id&#x60; is required.
        /// </summary>
        /// <value>Human-readable identifier of the account that owns the invoice. Either &#x60;account_number&#x60; or &#x60;account_id&#x60; is required.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Identifier of the authorization transaction from the payment gateway.
        /// </summary>
        /// <value>Identifier of the authorization transaction from the payment gateway.</value>

        [DataMember(Name="authorization_id")]
        public string AuthorizationId { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// 3-letter ISO 4217 currency code.
        /// </summary>
        /// <value>3-letter ISO 4217 currency code.</value>
        [Required]

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="bank_account_account")]
        public string BankAccountAccount { get; set; }

        /// <summary>
        /// The date and time when the payment takes effect.
        /// </summary>
        /// <value>The date and time when the payment takes effect.</value>

        [DataMember(Name="payment_date")]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Identifier of the payment method used to create this payment.
        /// </summary>
        /// <value>Identifier of the payment method used to create this payment.</value>

        [DataMember(Name="payment_method_id")]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Identifier of the payment gateway that Zuora will use to authorize this payment.
        /// </summary>
        /// <value>Identifier of the payment gateway that Zuora will use to authorize this payment.</value>

        [DataMember(Name="gateway_id")]
        public string GatewayId { get; set; }

        /// <summary>
        /// A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
        /// </summary>
        /// <value>A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead.</value>

        [DataMember(Name="gateway_order_id")]
        public string GatewayOrderId { get; set; }

        /// <summary>
        /// A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>

        [DataMember(Name="reference_id")]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets GatewayOptions
        /// </summary>

        [DataMember(Name="gateway_options")]
        public Dictionary<string, string> GatewayOptions { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>

        [DataMember(Name="statement_descriptor")]
        public string StatementDescriptor { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>

        [DataMember(Name="statement_descriptor_phone")]
        public string StatementDescriptorPhone { get; set; }

        /// <summary>
        /// If true, indicates that this payment is not handled by Zuora.
        /// </summary>
        /// <value>If true, indicates that this payment is not handled by Zuora.</value>

        [DataMember(Name="external")]
        public bool? External { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayInvoiceRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AuthorizationId: ").Append(AuthorizationId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  BankAccountAccount: ").Append(BankAccountAccount).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("  GatewayOrderId: ").Append(GatewayOrderId).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  GatewayOptions: ").Append(GatewayOptions).Append("\n");
            sb.Append("  StatementDescriptor: ").Append(StatementDescriptor).Append("\n");
            sb.Append("  StatementDescriptorPhone: ").Append(StatementDescriptorPhone).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PayInvoiceRequest)obj);
        }

        /// <summary>
        /// Returns true if PayInvoiceRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PayInvoiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayInvoiceRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    AuthorizationId == other.AuthorizationId ||
                    AuthorizationId != null &&
                    AuthorizationId.Equals(other.AuthorizationId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    BankAccountAccount == other.BankAccountAccount ||
                    BankAccountAccount != null &&
                    BankAccountAccount.Equals(other.BankAccountAccount)
                ) && 
                (
                    PaymentDate == other.PaymentDate ||
                    PaymentDate != null &&
                    PaymentDate.Equals(other.PaymentDate)
                ) && 
                (
                    PaymentMethodId == other.PaymentMethodId ||
                    PaymentMethodId != null &&
                    PaymentMethodId.Equals(other.PaymentMethodId)
                ) && 
                (
                    GatewayId == other.GatewayId ||
                    GatewayId != null &&
                    GatewayId.Equals(other.GatewayId)
                ) && 
                (
                    GatewayOrderId == other.GatewayOrderId ||
                    GatewayOrderId != null &&
                    GatewayOrderId.Equals(other.GatewayOrderId)
                ) && 
                (
                    ReferenceId == other.ReferenceId ||
                    ReferenceId != null &&
                    ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    GatewayOptions == other.GatewayOptions ||
                    GatewayOptions != null &&
                    GatewayOptions.SequenceEqual(other.GatewayOptions)
                ) && 
                (
                    StatementDescriptor == other.StatementDescriptor ||
                    StatementDescriptor != null &&
                    StatementDescriptor.Equals(other.StatementDescriptor)
                ) && 
                (
                    StatementDescriptorPhone == other.StatementDescriptorPhone ||
                    StatementDescriptorPhone != null &&
                    StatementDescriptorPhone.Equals(other.StatementDescriptorPhone)
                ) && 
                (
                    External == other.External ||
                    External != null &&
                    External.Equals(other.External)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (AuthorizationId != null)
                    hashCode = hashCode * 59 + AuthorizationId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (BankAccountAccount != null)
                    hashCode = hashCode * 59 + BankAccountAccount.GetHashCode();
                    if (PaymentDate != null)
                    hashCode = hashCode * 59 + PaymentDate.GetHashCode();
                    if (PaymentMethodId != null)
                    hashCode = hashCode * 59 + PaymentMethodId.GetHashCode();
                    if (GatewayId != null)
                    hashCode = hashCode * 59 + GatewayId.GetHashCode();
                    if (GatewayOrderId != null)
                    hashCode = hashCode * 59 + GatewayOrderId.GetHashCode();
                    if (ReferenceId != null)
                    hashCode = hashCode * 59 + ReferenceId.GetHashCode();
                    if (GatewayOptions != null)
                    hashCode = hashCode * 59 + GatewayOptions.GetHashCode();
                    if (StatementDescriptor != null)
                    hashCode = hashCode * 59 + StatementDescriptor.GetHashCode();
                    if (StatementDescriptorPhone != null)
                    hashCode = hashCode * 59 + StatementDescriptorPhone.GetHashCode();
                    if (External != null)
                    hashCode = hashCode * 59 + External.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PayInvoiceRequest left, PayInvoiceRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PayInvoiceRequest left, PayInvoiceRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
