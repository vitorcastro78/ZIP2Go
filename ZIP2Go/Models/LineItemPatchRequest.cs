/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// Update an order line item
    /// </summary>
    [DataContract]
    public partial class LineItemPatchRequest : IEquatable<LineItemPatchRequest>
    { 
        /// <summary>
        /// Gets or Sets Revenue
        /// </summary>

        [DataMember(Name="revenue")]
        public OrderLineItemRevenue Revenue { get; set; }

        /// <summary>
        /// A configured unit of measure.
        /// </summary>
        /// <value>A configured unit of measure.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>

        [DataMember(Name="accounting_code")]
        public string AccountingCode { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>

        [DataMember(Name="adjustment_liability_account")]
        public string AdjustmentLiabilityAccount { get; set; }

        /// <summary>
        /// The unit amount to be charged.
        /// </summary>
        /// <value>The unit amount to be charged.</value>

        [DataMember(Name="unit_amount")]
        public decimal? UnitAmount { get; set; }

        /// <summary>
        /// All order line items that were unbilled on or before this date are included in future bill runs.
        /// </summary>
        /// <value>All order line items that were unbilled on or before this date are included in future bill runs.</value>

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// The billing rule for the order line item.
        /// </summary>
        /// <value>The billing rule for the order line item.</value>

        [DataMember(Name="billing_rule")]
        public string BillingRule { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>

        [DataMember(Name="contract_asset_account")]
        public string ContractAssetAccount { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>

        [DataMember(Name="contract_liability_account")]
        public string ContractLiabilityAccount { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Discount amount per unit.
        /// </summary>
        /// <value>Discount amount per unit.</value>

        [DataMember(Name="discount_unit_amount")]
        public decimal? DiscountUnitAmount { get; set; }

        /// <summary>
        /// Discount percent.
        /// </summary>
        /// <value>Discount percent.</value>

        [DataMember(Name="discount_percent")]
        public decimal? DiscountPercent { get; set; }

        /// <summary>
        /// Category of the order line item.
        /// </summary>
        /// <value>Category of the order line item.</value>

        [DataMember(Name="category")]
        public string Category { get; set; }

        /// <summary>
        /// The name of the order line item.
        /// </summary>
        /// <value>The name of the order line item.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The type of the order line item.
        /// </summary>
        /// <value>The type of the order line item.</value>

        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// The list price per unit for the order line item.
        /// </summary>
        /// <value>The list price per unit for the order line item.</value>

        [DataMember(Name="list_unit_price")]
        public decimal? ListUnitPrice { get; set; }

        /// <summary>
        /// The product code for the order line item.
        /// </summary>
        /// <value>The product code for the order line item.</value>

        [DataMember(Name="product_code")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Used by customers to specify the Purchase Order Number provided by the buyer.
        /// </summary>
        /// <value>Used by customers to specify the Purchase Order Number provided by the buyer.</value>

        [DataMember(Name="purchase_order_number")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The quantity of the product ordered.
        /// </summary>
        /// <value>The quantity of the product ordered.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Use this field to relate an order line item to an subscription.
        /// </summary>
        /// <value>Use this field to relate an order line item to an subscription.</value>

        [DataMember(Name="related_subscription_number")]
        public string RelatedSubscriptionNumber { get; set; }

        /// <summary>
        /// The unique identifier of a contact belonging to the billing account of the order line item. Use this field to assign and existing contact as the sold to contact of an order line item.
        /// </summary>
        /// <value>The unique identifier of a contact belonging to the billing account of the order line item. Use this field to assign and existing contact as the sold to contact of an order line item.</value>

        [DataMember(Name="sold_to_id")]
        public string SoldToId { get; set; }

        /// <summary>
        /// The tax code for the order line item.
        /// </summary>
        /// <value>The tax code for the order line item.</value>

        [DataMember(Name="tax_code")]
        public string TaxCode { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts..
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts..</value>

        [DataMember(Name="unbilled_receivables_account")]
        public string UnbilledReceivablesAccount { get; set; }

        /// <summary>
        /// The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field.
        /// </summary>
        /// <value>The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field.</value>

        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Human-readable identifier of the order item. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the order item. It can be user-supplied.</value>

        [DataMember(Name="item_number")]
        public string ItemNumber { get; set; }

        /// <summary>
        /// The date a transaction starts. The default value of this field is the order date.
        /// </summary>
        /// <value>The date a transaction starts. The default value of this field is the order date.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The date the order line item transitions to complete.
        /// </summary>
        /// <value>The date the order line item transitions to complete.</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItemPatchRequest {\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  AdjustmentLiabilityAccount: ").Append(AdjustmentLiabilityAccount).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  BillingRule: ").Append(BillingRule).Append("\n");
            sb.Append("  ContractAssetAccount: ").Append(ContractAssetAccount).Append("\n");
            sb.Append("  ContractLiabilityAccount: ").Append(ContractLiabilityAccount).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountUnitAmount: ").Append(DiscountUnitAmount).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ListUnitPrice: ").Append(ListUnitPrice).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RelatedSubscriptionNumber: ").Append(RelatedSubscriptionNumber).Append("\n");
            sb.Append("  SoldToId: ").Append(SoldToId).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  UnbilledReceivablesAccount: ").Append(UnbilledReceivablesAccount).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LineItemPatchRequest)obj);
        }

        /// <summary>
        /// Returns true if LineItemPatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of LineItemPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItemPatchRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Revenue == other.Revenue ||
                    Revenue != null &&
                    Revenue.Equals(other.Revenue)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    AccountingCode == other.AccountingCode ||
                    AccountingCode != null &&
                    AccountingCode.Equals(other.AccountingCode)
                ) && 
                (
                    AdjustmentLiabilityAccount == other.AdjustmentLiabilityAccount ||
                    AdjustmentLiabilityAccount != null &&
                    AdjustmentLiabilityAccount.Equals(other.AdjustmentLiabilityAccount)
                ) && 
                (
                    UnitAmount == other.UnitAmount ||
                    UnitAmount != null &&
                    UnitAmount.Equals(other.UnitAmount)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                ) && 
                (
                    BillingRule == other.BillingRule ||
                    BillingRule != null &&
                    BillingRule.Equals(other.BillingRule)
                ) && 
                (
                    ContractAssetAccount == other.ContractAssetAccount ||
                    ContractAssetAccount != null &&
                    ContractAssetAccount.Equals(other.ContractAssetAccount)
                ) && 
                (
                    ContractLiabilityAccount == other.ContractLiabilityAccount ||
                    ContractLiabilityAccount != null &&
                    ContractLiabilityAccount.Equals(other.ContractLiabilityAccount)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DiscountUnitAmount == other.DiscountUnitAmount ||
                    DiscountUnitAmount != null &&
                    DiscountUnitAmount.Equals(other.DiscountUnitAmount)
                ) && 
                (
                    DiscountPercent == other.DiscountPercent ||
                    DiscountPercent != null &&
                    DiscountPercent.Equals(other.DiscountPercent)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    ListUnitPrice == other.ListUnitPrice ||
                    ListUnitPrice != null &&
                    ListUnitPrice.Equals(other.ListUnitPrice)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    RelatedSubscriptionNumber == other.RelatedSubscriptionNumber ||
                    RelatedSubscriptionNumber != null &&
                    RelatedSubscriptionNumber.Equals(other.RelatedSubscriptionNumber)
                ) && 
                (
                    SoldToId == other.SoldToId ||
                    SoldToId != null &&
                    SoldToId.Equals(other.SoldToId)
                ) && 
                (
                    TaxCode == other.TaxCode ||
                    TaxCode != null &&
                    TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    UnbilledReceivablesAccount == other.UnbilledReceivablesAccount ||
                    UnbilledReceivablesAccount != null &&
                    UnbilledReceivablesAccount.Equals(other.UnbilledReceivablesAccount)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ItemNumber == other.ItemNumber ||
                    ItemNumber != null &&
                    ItemNumber.Equals(other.ItemNumber)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Revenue != null)
                    hashCode = hashCode * 59 + Revenue.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    if (AccountingCode != null)
                    hashCode = hashCode * 59 + AccountingCode.GetHashCode();
                    if (AdjustmentLiabilityAccount != null)
                    hashCode = hashCode * 59 + AdjustmentLiabilityAccount.GetHashCode();
                    if (UnitAmount != null)
                    hashCode = hashCode * 59 + UnitAmount.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                    if (BillingRule != null)
                    hashCode = hashCode * 59 + BillingRule.GetHashCode();
                    if (ContractAssetAccount != null)
                    hashCode = hashCode * 59 + ContractAssetAccount.GetHashCode();
                    if (ContractLiabilityAccount != null)
                    hashCode = hashCode * 59 + ContractLiabilityAccount.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DiscountUnitAmount != null)
                    hashCode = hashCode * 59 + DiscountUnitAmount.GetHashCode();
                    if (DiscountPercent != null)
                    hashCode = hashCode * 59 + DiscountPercent.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ListUnitPrice != null)
                    hashCode = hashCode * 59 + ListUnitPrice.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (RelatedSubscriptionNumber != null)
                    hashCode = hashCode * 59 + RelatedSubscriptionNumber.GetHashCode();
                    if (SoldToId != null)
                    hashCode = hashCode * 59 + SoldToId.GetHashCode();
                    if (TaxCode != null)
                    hashCode = hashCode * 59 + TaxCode.GetHashCode();
                    if (UnbilledReceivablesAccount != null)
                    hashCode = hashCode * 59 + UnbilledReceivablesAccount.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ItemNumber != null)
                    hashCode = hashCode * 59 + ItemNumber.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LineItemPatchRequest left, LineItemPatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LineItemPatchRequest left, LineItemPatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
