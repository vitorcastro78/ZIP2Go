/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// The recurring components of a price such as interval and usage.
    /// </summary>
    [DataContract]
    public partial class Recurring : IEquatable<Recurring>
    { 
        /// <summary>
        /// Specifies on which day or the month or day of the week a customer shall be billed.
        /// </summary>
        /// <value>Specifies on which day or the month or day of the week a customer shall be billed.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RecurringOnEnum
        {
            /// <summary>
            /// Enum _1Enum for _1
            /// </summary>
            [EnumMember(Value = "_1")]
            _1Enum = 0,
            /// <summary>
            /// Enum _2Enum for _2
            /// </summary>
            [EnumMember(Value = "_2")]
            _2Enum = 1,
            /// <summary>
            /// Enum _3Enum for _3
            /// </summary>
            [EnumMember(Value = "_3")]
            _3Enum = 2,
            /// <summary>
            /// Enum _4Enum for _4
            /// </summary>
            [EnumMember(Value = "_4")]
            _4Enum = 3,
            /// <summary>
            /// Enum _5Enum for _5
            /// </summary>
            [EnumMember(Value = "_5")]
            _5Enum = 4,
            /// <summary>
            /// Enum _6Enum for _6
            /// </summary>
            [EnumMember(Value = "_6")]
            _6Enum = 5,
            /// <summary>
            /// Enum _7Enum for _7
            /// </summary>
            [EnumMember(Value = "_7")]
            _7Enum = 6,
            /// <summary>
            /// Enum _8Enum for _8
            /// </summary>
            [EnumMember(Value = "_8")]
            _8Enum = 7,
            /// <summary>
            /// Enum _9Enum for _9
            /// </summary>
            [EnumMember(Value = "_9")]
            _9Enum = 8,
            /// <summary>
            /// Enum _10Enum for _10
            /// </summary>
            [EnumMember(Value = "_10")]
            _10Enum = 9,
            /// <summary>
            /// Enum _11Enum for _11
            /// </summary>
            [EnumMember(Value = "_11")]
            _11Enum = 10,
            /// <summary>
            /// Enum _12Enum for _12
            /// </summary>
            [EnumMember(Value = "_12")]
            _12Enum = 11,
            /// <summary>
            /// Enum _13Enum for _13
            /// </summary>
            [EnumMember(Value = "_13")]
            _13Enum = 12,
            /// <summary>
            /// Enum _14Enum for _14
            /// </summary>
            [EnumMember(Value = "_14")]
            _14Enum = 13,
            /// <summary>
            /// Enum _15Enum for _15
            /// </summary>
            [EnumMember(Value = "_15")]
            _15Enum = 14,
            /// <summary>
            /// Enum _16Enum for _16
            /// </summary>
            [EnumMember(Value = "_16")]
            _16Enum = 15,
            /// <summary>
            /// Enum _17Enum for _17
            /// </summary>
            [EnumMember(Value = "_17")]
            _17Enum = 16,
            /// <summary>
            /// Enum _18Enum for _18
            /// </summary>
            [EnumMember(Value = "_18")]
            _18Enum = 17,
            /// <summary>
            /// Enum _19Enum for _19
            /// </summary>
            [EnumMember(Value = "_19")]
            _19Enum = 18,
            /// <summary>
            /// Enum _20Enum for _20
            /// </summary>
            [EnumMember(Value = "_20")]
            _20Enum = 19,
            /// <summary>
            /// Enum _21Enum for _21
            /// </summary>
            [EnumMember(Value = "_21")]
            _21Enum = 20,
            /// <summary>
            /// Enum _22Enum for _22
            /// </summary>
            [EnumMember(Value = "_22")]
            _22Enum = 21,
            /// <summary>
            /// Enum _23Enum for _23
            /// </summary>
            [EnumMember(Value = "_23")]
            _23Enum = 22,
            /// <summary>
            /// Enum _24Enum for _24
            /// </summary>
            [EnumMember(Value = "_24")]
            _24Enum = 23,
            /// <summary>
            /// Enum _25Enum for _25
            /// </summary>
            [EnumMember(Value = "_25")]
            _25Enum = 24,
            /// <summary>
            /// Enum _26Enum for _26
            /// </summary>
            [EnumMember(Value = "_26")]
            _26Enum = 25,
            /// <summary>
            /// Enum _27Enum for _27
            /// </summary>
            [EnumMember(Value = "_27")]
            _27Enum = 26,
            /// <summary>
            /// Enum _28Enum for _28
            /// </summary>
            [EnumMember(Value = "_28")]
            _28Enum = 27,
            /// <summary>
            /// Enum _29Enum for _29
            /// </summary>
            [EnumMember(Value = "_29")]
            _29Enum = 28,
            /// <summary>
            /// Enum _30Enum for _30
            /// </summary>
            [EnumMember(Value = "_30")]
            _30Enum = 29,
            /// <summary>
            /// Enum _31Enum for _31
            /// </summary>
            [EnumMember(Value = "_31")]
            _31Enum = 30,
            /// <summary>
            /// Enum SubscriptionItemStartDayEnum for subscription_item_start_day
            /// </summary>
            [EnumMember(Value = "subscription_item_start_day")]
            SubscriptionItemStartDayEnum = 31,
            /// <summary>
            /// Enum AccountCycleDateEnum for account_cycle_date
            /// </summary>
            [EnumMember(Value = "account_cycle_date")]
            AccountCycleDateEnum = 32,
            /// <summary>
            /// Enum SubscriptionStartDayEnum for subscription_start_day
            /// </summary>
            [EnumMember(Value = "subscription_start_day")]
            SubscriptionStartDayEnum = 33,
            /// <summary>
            /// Enum TermEndDayEnum for term_end_day
            /// </summary>
            [EnumMember(Value = "term_end_day")]
            TermEndDayEnum = 34,
            /// <summary>
            /// Enum MondayEnum for monday
            /// </summary>
            [EnumMember(Value = "monday")]
            MondayEnum = 35,
            /// <summary>
            /// Enum TuesdayEnum for tuesday
            /// </summary>
            [EnumMember(Value = "tuesday")]
            TuesdayEnum = 36,
            /// <summary>
            /// Enum WednesdayEnum for wednesday
            /// </summary>
            [EnumMember(Value = "wednesday")]
            WednesdayEnum = 37,
            /// <summary>
            /// Enum ThursdayEnum for thursday
            /// </summary>
            [EnumMember(Value = "thursday")]
            ThursdayEnum = 38,
            /// <summary>
            /// Enum FridayEnum for friday
            /// </summary>
            [EnumMember(Value = "friday")]
            FridayEnum = 39,
            /// <summary>
            /// Enum SaturdayEnum for saturday
            /// </summary>
            [EnumMember(Value = "saturday")]
            SaturdayEnum = 40,
            /// <summary>
            /// Enum SundayEnum for sunday
            /// </summary>
            [EnumMember(Value = "sunday")]
            SundayEnum = 41        }

        /// <summary>
        /// Specifies on which day or the month or day of the week a customer shall be billed.
        /// </summary>
        /// <value>Specifies on which day or the month or day of the week a customer shall be billed.</value>

        [DataMember(Name="recurring_on")]
        public RecurringOnEnum? RecurringOn { get; set; }

        /// <summary>
        /// Specifies on which day or the month or day of the week a customer shall be billed.
        /// </summary>
        /// <value>Specifies on which day or the month or day of the week a customer shall be billed.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OnEnum
        {
            /// <summary>
            /// Enum _1Enum for _1
            /// </summary>
            [EnumMember(Value = "_1")]
            _1Enum = 0,
            /// <summary>
            /// Enum _2Enum for _2
            /// </summary>
            [EnumMember(Value = "_2")]
            _2Enum = 1,
            /// <summary>
            /// Enum _3Enum for _3
            /// </summary>
            [EnumMember(Value = "_3")]
            _3Enum = 2,
            /// <summary>
            /// Enum _4Enum for _4
            /// </summary>
            [EnumMember(Value = "_4")]
            _4Enum = 3,
            /// <summary>
            /// Enum _5Enum for _5
            /// </summary>
            [EnumMember(Value = "_5")]
            _5Enum = 4,
            /// <summary>
            /// Enum _6Enum for _6
            /// </summary>
            [EnumMember(Value = "_6")]
            _6Enum = 5,
            /// <summary>
            /// Enum _7Enum for _7
            /// </summary>
            [EnumMember(Value = "_7")]
            _7Enum = 6,
            /// <summary>
            /// Enum _8Enum for _8
            /// </summary>
            [EnumMember(Value = "_8")]
            _8Enum = 7,
            /// <summary>
            /// Enum _9Enum for _9
            /// </summary>
            [EnumMember(Value = "_9")]
            _9Enum = 8,
            /// <summary>
            /// Enum _10Enum for _10
            /// </summary>
            [EnumMember(Value = "_10")]
            _10Enum = 9,
            /// <summary>
            /// Enum _11Enum for _11
            /// </summary>
            [EnumMember(Value = "_11")]
            _11Enum = 10,
            /// <summary>
            /// Enum _12Enum for _12
            /// </summary>
            [EnumMember(Value = "_12")]
            _12Enum = 11,
            /// <summary>
            /// Enum _13Enum for _13
            /// </summary>
            [EnumMember(Value = "_13")]
            _13Enum = 12,
            /// <summary>
            /// Enum _14Enum for _14
            /// </summary>
            [EnumMember(Value = "_14")]
            _14Enum = 13,
            /// <summary>
            /// Enum _15Enum for _15
            /// </summary>
            [EnumMember(Value = "_15")]
            _15Enum = 14,
            /// <summary>
            /// Enum _16Enum for _16
            /// </summary>
            [EnumMember(Value = "_16")]
            _16Enum = 15,
            /// <summary>
            /// Enum _17Enum for _17
            /// </summary>
            [EnumMember(Value = "_17")]
            _17Enum = 16,
            /// <summary>
            /// Enum _18Enum for _18
            /// </summary>
            [EnumMember(Value = "_18")]
            _18Enum = 17,
            /// <summary>
            /// Enum _19Enum for _19
            /// </summary>
            [EnumMember(Value = "_19")]
            _19Enum = 18,
            /// <summary>
            /// Enum _20Enum for _20
            /// </summary>
            [EnumMember(Value = "_20")]
            _20Enum = 19,
            /// <summary>
            /// Enum _21Enum for _21
            /// </summary>
            [EnumMember(Value = "_21")]
            _21Enum = 20,
            /// <summary>
            /// Enum _22Enum for _22
            /// </summary>
            [EnumMember(Value = "_22")]
            _22Enum = 21,
            /// <summary>
            /// Enum _23Enum for _23
            /// </summary>
            [EnumMember(Value = "_23")]
            _23Enum = 22,
            /// <summary>
            /// Enum _24Enum for _24
            /// </summary>
            [EnumMember(Value = "_24")]
            _24Enum = 23,
            /// <summary>
            /// Enum _25Enum for _25
            /// </summary>
            [EnumMember(Value = "_25")]
            _25Enum = 24,
            /// <summary>
            /// Enum _26Enum for _26
            /// </summary>
            [EnumMember(Value = "_26")]
            _26Enum = 25,
            /// <summary>
            /// Enum _27Enum for _27
            /// </summary>
            [EnumMember(Value = "_27")]
            _27Enum = 26,
            /// <summary>
            /// Enum _28Enum for _28
            /// </summary>
            [EnumMember(Value = "_28")]
            _28Enum = 27,
            /// <summary>
            /// Enum _29Enum for _29
            /// </summary>
            [EnumMember(Value = "_29")]
            _29Enum = 28,
            /// <summary>
            /// Enum _30Enum for _30
            /// </summary>
            [EnumMember(Value = "_30")]
            _30Enum = 29,
            /// <summary>
            /// Enum _31Enum for _31
            /// </summary>
            [EnumMember(Value = "_31")]
            _31Enum = 30,
            /// <summary>
            /// Enum SubscriptionItemStartDayEnum for subscription_item_start_day
            /// </summary>
            [EnumMember(Value = "subscription_item_start_day")]
            SubscriptionItemStartDayEnum = 31,
            /// <summary>
            /// Enum AccountCycleDateEnum for account_cycle_date
            /// </summary>
            [EnumMember(Value = "account_cycle_date")]
            AccountCycleDateEnum = 32,
            /// <summary>
            /// Enum SubscriptionStartDayEnum for subscription_start_day
            /// </summary>
            [EnumMember(Value = "subscription_start_day")]
            SubscriptionStartDayEnum = 33,
            /// <summary>
            /// Enum TermEndDayEnum for term_end_day
            /// </summary>
            [EnumMember(Value = "term_end_day")]
            TermEndDayEnum = 34,
            /// <summary>
            /// Enum MondayEnum for monday
            /// </summary>
            [EnumMember(Value = "monday")]
            MondayEnum = 35,
            /// <summary>
            /// Enum TuesdayEnum for tuesday
            /// </summary>
            [EnumMember(Value = "tuesday")]
            TuesdayEnum = 36,
            /// <summary>
            /// Enum WednesdayEnum for wednesday
            /// </summary>
            [EnumMember(Value = "wednesday")]
            WednesdayEnum = 37,
            /// <summary>
            /// Enum ThursdayEnum for thursday
            /// </summary>
            [EnumMember(Value = "thursday")]
            ThursdayEnum = 38,
            /// <summary>
            /// Enum FridayEnum for friday
            /// </summary>
            [EnumMember(Value = "friday")]
            FridayEnum = 39,
            /// <summary>
            /// Enum SaturdayEnum for saturday
            /// </summary>
            [EnumMember(Value = "saturday")]
            SaturdayEnum = 40,
            /// <summary>
            /// Enum SundayEnum for sunday
            /// </summary>
            [EnumMember(Value = "sunday")]
            SundayEnum = 41        }

        /// <summary>
        /// Specifies on which day or the month or day of the week a customer shall be billed.
        /// </summary>
        /// <value>Specifies on which day or the month or day of the week a customer shall be billed.</value>

        [DataMember(Name="on")]
        public OnEnum? On { get; set; }

        /// <summary>
        /// Indicates that this is a usage price.
        /// </summary>
        /// <value>Indicates that this is a usage price.</value>

        [DataMember(Name="usage")]
        public bool? Usage { get; set; }

        /// <summary>
        /// Specifies the billing frequency. One of `week`, `month` or `year`.
        /// </summary>
        /// <value>Specifies the billing frequency. One of `week`, `month` or `year`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IntervalEnum
        {
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 0,
            /// <summary>
            /// Enum YearEnum for year
            /// </summary>
            [EnumMember(Value = "year")]
            YearEnum = 1,
            /// <summary>
            /// Enum WeekEnum for week
            /// </summary>
            [EnumMember(Value = "week")]
            WeekEnum = 2,
            /// <summary>
            /// Enum TermEnum for term
            /// </summary>
            [EnumMember(Value = "term")]
            TermEnum = 3,
            /// <summary>
            /// Enum DayEnum for day
            /// </summary>
            [EnumMember(Value = "day")]
            DayEnum = 4        }

        /// <summary>
        /// Specifies the billing frequency. One of &#x60;week&#x60;, &#x60;month&#x60; or &#x60;year&#x60;.
        /// </summary>
        /// <value>Specifies the billing frequency. One of &#x60;week&#x60;, &#x60;month&#x60; or &#x60;year&#x60;.</value>

        [DataMember(Name="interval")]
        public IntervalEnum? Interval { get; set; }

        /// <summary>
        /// The number of intervals (specified in the interval attribute) between subscription billings. For example, interval&#x3D;month and intervalCount&#x3D;3 bills every 3 months.
        /// </summary>
        /// <value>The number of intervals (specified in the interval attribute) between subscription billings. For example, interval&#x3D;month and intervalCount&#x3D;3 bills every 3 months.</value>

        [DataMember(Name="interval_count")]
        public int? IntervalCount { get; set; }

        /// <summary>
        /// Specifies how to align billing for recurring (subscription) products that start on different days.
        /// </summary>
        /// <value>Specifies how to align billing for recurring (subscription) products that start on different days.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AlignmentBehaviorEnum
        {
            /// <summary>
            /// Enum SubscriptionStartEnum for subscription_start
            /// </summary>
            [EnumMember(Value = "subscription_start")]
            SubscriptionStartEnum = 0,
            /// <summary>
            /// Enum TermStartEnum for term_start
            /// </summary>
            [EnumMember(Value = "term_start")]
            TermStartEnum = 1,
            /// <summary>
            /// Enum TermEndEnum for term_end
            /// </summary>
            [EnumMember(Value = "term_end")]
            TermEndEnum = 2,
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 3        }

        /// <summary>
        /// Specifies how to align billing for recurring (subscription) products that start on different days.
        /// </summary>
        /// <value>Specifies how to align billing for recurring (subscription) products that start on different days.</value>

        [DataMember(Name="alignment_behavior")]
        public AlignmentBehaviorEnum? AlignmentBehavior { get; set; }

        /// <summary>
        /// You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.
        /// </summary>
        /// <value>You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TimingEnum
        {
            /// <summary>
            /// Enum AdvanceEnum for in_advance
            /// </summary>
            [EnumMember(Value = "in_advance")]
            AdvanceEnum = 0,
            /// <summary>
            /// Enum ArrearsEnum for in_arrears
            /// </summary>
            [EnumMember(Value = "in_arrears")]
            ArrearsEnum = 1        }

        /// <summary>
        /// You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.
        /// </summary>
        /// <value>You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.</value>

        [DataMember(Name="timing")]
        public TimingEnum? Timing { get; set; }

        /// <summary>
        /// You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.
        /// </summary>
        /// <value>You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.</value>

        [DataMember(Name="formula")]
        public string Formula { get; private set; }

        /// <summary>
        /// Specifies the duration frequency. One of day, week, month or year.
        /// </summary>
        /// <value>Specifies the duration frequency. One of day, week, month or year.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DurationIntervalEnum
        {
            /// <summary>
            /// Enum DayEnum for day
            /// </summary>
            [EnumMember(Value = "day")]
            DayEnum = 0,
            /// <summary>
            /// Enum WeekEnum for week
            /// </summary>
            [EnumMember(Value = "week")]
            WeekEnum = 1,
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 2,
            /// <summary>
            /// Enum YearEnum for year
            /// </summary>
            [EnumMember(Value = "year")]
            YearEnum = 3,
            /// <summary>
            /// Enum SubscriptionTermEnum for subscription_term
            /// </summary>
            [EnumMember(Value = "subscription_term")]
            SubscriptionTermEnum = 4,
            /// <summary>
            /// Enum BillingPeriodEnum for billing_period
            /// </summary>
            [EnumMember(Value = "billing_period")]
            BillingPeriodEnum = 5        }

        /// <summary>
        /// Specifies the duration frequency. One of day, week, month or year.
        /// </summary>
        /// <value>Specifies the duration frequency. One of day, week, month or year.</value>

        [DataMember(Name="duration_interval")]
        public DurationIntervalEnum? DurationInterval { get; set; }

        /// <summary>
        /// Specifies how long a customer shall be charged if this is less than the duration of the subscription
        /// </summary>
        /// <value>Specifies how long a customer shall be charged if this is less than the duration of the subscription</value>

        [DataMember(Name="duration_interval_count")]
        public int? DurationIntervalCount { get; set; }

        /// <summary>
        /// A rating group based on which usage records are rated. Only applicable to usage prices.
        /// </summary>
        /// <value>A rating group based on which usage records are rated. Only applicable to usage prices.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RatingGroupEnum
        {
            /// <summary>
            /// Enum BillingPeriodEnum for billing_period
            /// </summary>
            [EnumMember(Value = "billing_period")]
            BillingPeriodEnum = 0,
            /// <summary>
            /// Enum UsageStartDateEnum for usage_start_date
            /// </summary>
            [EnumMember(Value = "usage_start_date")]
            UsageStartDateEnum = 1,
            /// <summary>
            /// Enum UsageRecordEnum for usage_record
            /// </summary>
            [EnumMember(Value = "usage_record")]
            UsageRecordEnum = 2,
            /// <summary>
            /// Enum UsageUploadEnum for usage_upload
            /// </summary>
            [EnumMember(Value = "usage_upload")]
            UsageUploadEnum = 3,
            /// <summary>
            /// Enum CustomGroupEnum for custom_group
            /// </summary>
            [EnumMember(Value = "custom_group")]
            CustomGroupEnum = 4        }

        /// <summary>
        /// A rating group based on which usage records are rated. Only applicable to usage prices.
        /// </summary>
        /// <value>A rating group based on which usage records are rated. Only applicable to usage prices.</value>

        [DataMember(Name="rating_group")]
        public RatingGroupEnum? RatingGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Recurring {\n");
            sb.Append("  RecurringOn: ").Append(RecurringOn).Append("\n");
            sb.Append("  On: ").Append(On).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  IntervalCount: ").Append(IntervalCount).Append("\n");
            sb.Append("  AlignmentBehavior: ").Append(AlignmentBehavior).Append("\n");
            sb.Append("  Timing: ").Append(Timing).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  DurationInterval: ").Append(DurationInterval).Append("\n");
            sb.Append("  DurationIntervalCount: ").Append(DurationIntervalCount).Append("\n");
            sb.Append("  RatingGroup: ").Append(RatingGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Recurring)obj);
        }

        /// <summary>
        /// Returns true if Recurring instances are equal
        /// </summary>
        /// <param name="other">Instance of Recurring to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Recurring other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RecurringOn == other.RecurringOn ||
                    RecurringOn != null &&
                    RecurringOn.Equals(other.RecurringOn)
                ) && 
                (
                    On == other.On ||
                    On != null &&
                    On.Equals(other.On)
                ) && 
                (
                    Usage == other.Usage ||
                    Usage != null &&
                    Usage.Equals(other.Usage)
                ) && 
                (
                    Interval == other.Interval ||
                    Interval != null &&
                    Interval.Equals(other.Interval)
                ) && 
                (
                    IntervalCount == other.IntervalCount ||
                    IntervalCount != null &&
                    IntervalCount.Equals(other.IntervalCount)
                ) && 
                (
                    AlignmentBehavior == other.AlignmentBehavior ||
                    AlignmentBehavior != null &&
                    AlignmentBehavior.Equals(other.AlignmentBehavior)
                ) && 
                (
                    Timing == other.Timing ||
                    Timing != null &&
                    Timing.Equals(other.Timing)
                ) && 
                (
                    Formula == other.Formula ||
                    Formula != null &&
                    Formula.Equals(other.Formula)
                ) && 
                (
                    DurationInterval == other.DurationInterval ||
                    DurationInterval != null &&
                    DurationInterval.Equals(other.DurationInterval)
                ) && 
                (
                    DurationIntervalCount == other.DurationIntervalCount ||
                    DurationIntervalCount != null &&
                    DurationIntervalCount.Equals(other.DurationIntervalCount)
                ) && 
                (
                    RatingGroup == other.RatingGroup ||
                    RatingGroup != null &&
                    RatingGroup.Equals(other.RatingGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RecurringOn != null)
                    hashCode = hashCode * 59 + RecurringOn.GetHashCode();
                    if (On != null)
                    hashCode = hashCode * 59 + On.GetHashCode();
                    if (Usage != null)
                    hashCode = hashCode * 59 + Usage.GetHashCode();
                    if (Interval != null)
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                    if (IntervalCount != null)
                    hashCode = hashCode * 59 + IntervalCount.GetHashCode();
                    if (AlignmentBehavior != null)
                    hashCode = hashCode * 59 + AlignmentBehavior.GetHashCode();
                    if (Timing != null)
                    hashCode = hashCode * 59 + Timing.GetHashCode();
                    if (Formula != null)
                    hashCode = hashCode * 59 + Formula.GetHashCode();
                    if (DurationInterval != null)
                    hashCode = hashCode * 59 + DurationInterval.GetHashCode();
                    if (DurationIntervalCount != null)
                    hashCode = hashCode * 59 + DurationIntervalCount.GetHashCode();
                    if (RatingGroup != null)
                    hashCode = hashCode * 59 + RatingGroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Recurring left, Recurring right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Recurring left, Recurring right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
