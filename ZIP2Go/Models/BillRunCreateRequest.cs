/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillRunCreateRequest : IEquatable<BillRunCreateRequest>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfBillRunCreateRequestCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// Identifier of the customer account to bill. Specify this field or &#x60;account_number&#x60; if you want to create a bill run for a single customer.
        /// </summary>
        /// <value>Identifier of the customer account to bill. Specify this field or &#x60;account_number&#x60; if you want to create a bill run for a single customer.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Human-readable identifier of the account to bill. Specify this field or &#x60;account_id&#x60; if you want to create a bill run for a single customer.
        /// </summary>
        /// <value>Human-readable identifier of the account to bill. Specify this field or &#x60;account_id&#x60; if you want to create a bill run for a single customer.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// If set to &#x60;true&#x60;, invoices will be automatically emailed to customers.
        /// </summary>
        /// <value>If set to &#x60;true&#x60;, invoices will be automatically emailed to customers.</value>

        [DataMember(Name="email")]
        public bool? Email { get; set; }

        /// <summary>
        /// Indicates whether to automatically post a billing document after it is created.
        /// </summary>
        /// <value>Indicates whether to automatically post a billing document after it is created.</value>

        [DataMember(Name="post")]
        public bool? Post { get; set; }

        /// <summary>
        /// If set to &#x60;true&#x60;, subscriptions will be automatically renewed.
        /// </summary>
        /// <value>If set to &#x60;true&#x60;, subscriptions will be automatically renewed.</value>

        [DataMember(Name="renew")]
        public bool? Renew { get; set; }

        /// <summary>
        /// The day of the month on which the multiple customer accounts are billed.
        /// </summary>
        /// <value>The day of the month on which the multiple customer accounts are billed.</value>

        [DataMember(Name="day_of_month")]
        public string DayOfMonth { get; set; }

        /// <summary>
        /// Identifier of the customer account batch to be included in this bill run.
        /// </summary>
        /// <value>Identifier of the customer account batch to be included in this bill run.</value>

        [DataMember(Name="batches")]
        public List<string> Batches { get; set; }

        /// <summary>
        /// The date displayed on the invoice.
        /// </summary>
        /// <value>The date displayed on the invoice.</value>
        [Required]

        [DataMember(Name="invoice_date")]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// All unbilled items on or before this date are included in this bill run.
        /// </summary>
        /// <value>All unbilled items on or before this date are included in this bill run.</value>
        [Required]

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// If it is set to &#x60;false&#x60;, invoices for zero amounts will not be emailed to customers. 
        /// </summary>
        /// <value>If it is set to &#x60;false&#x60;, invoices for zero amounts will not be emailed to customers. </value>

        [DataMember(Name="email_zero_amount_invoices")]
        public bool? EmailZeroAmountInvoices { get; set; }

        /// <summary>
        /// Type of the charge to be excluded from the bill run.
        /// </summary>
        /// <value>Type of the charge to be excluded from the bill run.</value>

        [DataMember(Name="charges_excluded")]
        public List<string> ChargesExcluded { get; set; }

        /// <summary>
        /// The name of the bill run.
        /// </summary>
        /// <value>The name of the bill run.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The type of the bill run. This field is only available if you have the <a href=”https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Automate_billing_document_generation/Bill_runs/Z_Catch-Up_Bill_Run” target=”_blank”>Catch-Up Bill Run</a> feature enabled in your tenant.
        /// </summary>
        /// <value>The type of the bill run. This field is only available if you have the <a href=”https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Automate_billing_document_generation/Bill_runs/Z_Catch-Up_Bill_Run” target=”_blank”>Catch-Up Bill Run</a> feature enabled in your tenant.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum RegularEnum for regular
            /// </summary>
            [EnumMember(Value = "regular")]
            RegularEnum = 0,
            /// <summary>
            /// Enum CatchUpEnum for catch_up
            /// </summary>
            [EnumMember(Value = "catch_up")]
            CatchUpEnum = 1        }

        /// <summary>
        /// The type of the bill run. This field is only available if you have the &lt;a href&#x3D;”https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Automate_billing_document_generation/Bill_runs/Z_Catch-Up_Bill_Run” target&#x3D;”_blank”&gt;Catch-Up Bill Run&lt;/a&gt; feature enabled in your tenant.
        /// </summary>
        /// <value>The type of the bill run. This field is only available if you have the &lt;a href&#x3D;”https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Automate_billing_document_generation/Bill_runs/Z_Catch-Up_Bill_Run” target&#x3D;”_blank”&gt;Catch-Up Bill Run&lt;/a&gt; feature enabled in your tenant.</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// The target subscriptions for this bill run. Note that all these subscriptions must belong to the same account.
        /// </summary>
        /// <value>The target subscriptions for this bill run. Note that all these subscriptions must belong to the same account.</value>

        [DataMember(Name="subscription_ids")]
        public List<string> SubscriptionIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillRunCreateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  Renew: ").Append(Renew).Append("\n");
            sb.Append("  DayOfMonth: ").Append(DayOfMonth).Append("\n");
            sb.Append("  Batches: ").Append(Batches).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  EmailZeroAmountInvoices: ").Append(EmailZeroAmountInvoices).Append("\n");
            sb.Append("  ChargesExcluded: ").Append(ChargesExcluded).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubscriptionIds: ").Append(SubscriptionIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillRunCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if BillRunCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of BillRunCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillRunCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Post == other.Post ||
                    Post != null &&
                    Post.Equals(other.Post)
                ) && 
                (
                    Renew == other.Renew ||
                    Renew != null &&
                    Renew.Equals(other.Renew)
                ) && 
                (
                    DayOfMonth == other.DayOfMonth ||
                    DayOfMonth != null &&
                    DayOfMonth.Equals(other.DayOfMonth)
                ) && 
                (
                    Batches == other.Batches ||
                    Batches != null &&
                    Batches.SequenceEqual(other.Batches)
                ) && 
                (
                    InvoiceDate == other.InvoiceDate ||
                    InvoiceDate != null &&
                    InvoiceDate.Equals(other.InvoiceDate)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                ) && 
                (
                    EmailZeroAmountInvoices == other.EmailZeroAmountInvoices ||
                    EmailZeroAmountInvoices != null &&
                    EmailZeroAmountInvoices.Equals(other.EmailZeroAmountInvoices)
                ) && 
                (
                    ChargesExcluded == other.ChargesExcluded ||
                    ChargesExcluded != null &&
                    ChargesExcluded.SequenceEqual(other.ChargesExcluded)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    SubscriptionIds == other.SubscriptionIds ||
                    SubscriptionIds != null &&
                    SubscriptionIds.SequenceEqual(other.SubscriptionIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Post != null)
                    hashCode = hashCode * 59 + Post.GetHashCode();
                    if (Renew != null)
                    hashCode = hashCode * 59 + Renew.GetHashCode();
                    if (DayOfMonth != null)
                    hashCode = hashCode * 59 + DayOfMonth.GetHashCode();
                    if (Batches != null)
                    hashCode = hashCode * 59 + Batches.GetHashCode();
                    if (InvoiceDate != null)
                    hashCode = hashCode * 59 + InvoiceDate.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                    if (EmailZeroAmountInvoices != null)
                    hashCode = hashCode * 59 + EmailZeroAmountInvoices.GetHashCode();
                    if (ChargesExcluded != null)
                    hashCode = hashCode * 59 + ChargesExcluded.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (SubscriptionIds != null)
                    hashCode = hashCode * 59 + SubscriptionIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillRunCreateRequest left, BillRunCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillRunCreateRequest left, BillRunCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
