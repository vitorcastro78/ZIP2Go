/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreditMemoItemApplicationRequest : IEquatable<CreditMemoItemApplicationRequest>
    { 
        /// <summary>
        /// The identifier of the credit memo item to apply.
        /// </summary>
        /// <value>The identifier of the credit memo item to apply.</value>

        [DataMember(Name="credit_memo_item_id")]
        public string CreditMemoItemId { get; set; }

        /// <summary>
        /// The credit memo amount applied to this billing document item or taxation item.
        /// </summary>
        /// <value>The credit memo amount applied to this billing document item or taxation item.</value>
        [Required]

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The identifier of the credit memo taxation item to apply.
        /// </summary>
        /// <value>The identifier of the credit memo taxation item to apply.</value>

        [DataMember(Name="credit_memo_taxation_item_id")]
        public string CreditMemoTaxationItemId { get; set; }

        /// <summary>
        /// The identifier of a taxation item.
        /// </summary>
        /// <value>The identifier of a taxation item.</value>

        [DataMember(Name="taxation_item_id")]
        public string TaxationItemId { get; set; }

        /// <summary>
        /// The identifier of an invoice item or debit memo item.
        /// </summary>
        /// <value>The identifier of an invoice item or debit memo item.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditMemoItemApplicationRequest {\n");
            sb.Append("  CreditMemoItemId: ").Append(CreditMemoItemId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CreditMemoTaxationItemId: ").Append(CreditMemoTaxationItemId).Append("\n");
            sb.Append("  TaxationItemId: ").Append(TaxationItemId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditMemoItemApplicationRequest)obj);
        }

        /// <summary>
        /// Returns true if CreditMemoItemApplicationRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditMemoItemApplicationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditMemoItemApplicationRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreditMemoItemId == other.CreditMemoItemId ||
                    CreditMemoItemId != null &&
                    CreditMemoItemId.Equals(other.CreditMemoItemId)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    CreditMemoTaxationItemId == other.CreditMemoTaxationItemId ||
                    CreditMemoTaxationItemId != null &&
                    CreditMemoTaxationItemId.Equals(other.CreditMemoTaxationItemId)
                ) && 
                (
                    TaxationItemId == other.TaxationItemId ||
                    TaxationItemId != null &&
                    TaxationItemId.Equals(other.TaxationItemId)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreditMemoItemId != null)
                    hashCode = hashCode * 59 + CreditMemoItemId.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (CreditMemoTaxationItemId != null)
                    hashCode = hashCode * 59 + CreditMemoTaxationItemId.GetHashCode();
                    if (TaxationItemId != null)
                    hashCode = hashCode * 59 + TaxationItemId.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreditMemoItemApplicationRequest left, CreditMemoItemApplicationRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditMemoItemApplicationRequest left, CreditMemoItemApplicationRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
