/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewActionsResponse : IEquatable<SubscriptionPreviewActionsResponse>
    { 
        /// <summary>
        /// Identifier of the action.
        /// </summary>
        /// <value>Identifier of the action.</value>

        [DataMember(Name="action_id")]
        public string ActionId { get; set; }

        /// <summary>
        /// The action associated with this metric.
        /// </summary>
        /// <value>The action associated with this metric.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum CreateSubscriptionEnum for create_subscription
            /// </summary>
            [EnumMember(Value = "create_subscription")]
            CreateSubscriptionEnum = 0,
            /// <summary>
            /// Enum TermsEnum for terms
            /// </summary>
            [EnumMember(Value = "terms")]
            TermsEnum = 1,
            /// <summary>
            /// Enum AddSubscriptionPlanEnum for add_subscription_plan
            /// </summary>
            [EnumMember(Value = "add_subscription_plan")]
            AddSubscriptionPlanEnum = 2,
            /// <summary>
            /// Enum UpdateSubscriptionPlanEnum for update_subscription_plan
            /// </summary>
            [EnumMember(Value = "update_subscription_plan")]
            UpdateSubscriptionPlanEnum = 3,
            /// <summary>
            /// Enum RemoveSubscriptionPlanEnum for remove_subscription_plan
            /// </summary>
            [EnumMember(Value = "remove_subscription_plan")]
            RemoveSubscriptionPlanEnum = 4,
            /// <summary>
            /// Enum RenewEnum for renew
            /// </summary>
            [EnumMember(Value = "renew")]
            RenewEnum = 5,
            /// <summary>
            /// Enum CancelEnum for cancel
            /// </summary>
            [EnumMember(Value = "cancel")]
            CancelEnum = 6,
            /// <summary>
            /// Enum OwnerTransferEnum for owner_transfer
            /// </summary>
            [EnumMember(Value = "owner_transfer")]
            OwnerTransferEnum = 7,
            /// <summary>
            /// Enum PauseEnum for pause
            /// </summary>
            [EnumMember(Value = "pause")]
            PauseEnum = 8,
            /// <summary>
            /// Enum ResumeEnum for resume
            /// </summary>
            [EnumMember(Value = "resume")]
            ResumeEnum = 9,
            /// <summary>
            /// Enum ReplaceSubscriptionPlanEnum for replace_subscription_plan
            /// </summary>
            [EnumMember(Value = "replace_subscription_plan")]
            ReplaceSubscriptionPlanEnum = 10        }

        /// <summary>
        /// The action associated with this metric.
        /// </summary>
        /// <value>The action associated with this metric.</value>

        [DataMember(Name="action")]
        public ActionEnum? Action { get; set; }

        /// <summary>
        /// The sequence number of the action.
        /// </summary>
        /// <value>The sequence number of the action.</value>

        [DataMember(Name="sequence")]
        public int? Sequence { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionItems
        /// </summary>

        [DataMember(Name="subscription_items")]
        public List<AllOfsubscriptionPreviewActionsResponseSubscriptionItemsItems> SubscriptionItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewActionsResponse {\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  SubscriptionItems: ").Append(SubscriptionItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionPreviewActionsResponse)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewActionsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPreviewActionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewActionsResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActionId == other.ActionId ||
                    ActionId != null &&
                    ActionId.Equals(other.ActionId)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    Sequence == other.Sequence ||
                    Sequence != null &&
                    Sequence.Equals(other.Sequence)
                ) && 
                (
                    SubscriptionItems == other.SubscriptionItems ||
                    SubscriptionItems != null &&
                    SubscriptionItems.SequenceEqual(other.SubscriptionItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActionId != null)
                    hashCode = hashCode * 59 + ActionId.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (Sequence != null)
                    hashCode = hashCode * 59 + Sequence.GetHashCode();
                    if (SubscriptionItems != null)
                    hashCode = hashCode * 59 + SubscriptionItems.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionPreviewActionsResponse left, SubscriptionPreviewActionsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionPreviewActionsResponse left, SubscriptionPreviewActionsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
