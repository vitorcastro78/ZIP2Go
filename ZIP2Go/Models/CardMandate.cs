/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// A mandate is a record of the permission a customer has given you to debit their payment method. This hash contains details about the mandate.
    /// </summary>
    [DataContract]
    public partial class CardMandate : IEquatable<CardMandate>
    { 
        /// <summary>
        /// Identifier of the single- or multi-use mandate generated by the payment gateway.
        /// </summary>
        /// <value>Identifier of the single- or multi-use mandate generated by the payment gateway.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Reason for the mandate.
        /// </summary>
        /// <value>Reason for the mandate.</value>

        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// The status of the mandate, which indicates whether it can be used to initiate a payment.
        /// </summary>
        /// <value>The status of the mandate, which indicates whether it can be used to initiate a payment.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ActiveEnum for active
            /// </summary>
            [EnumMember(Value = "active")]
            ActiveEnum = 0,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 1,
            /// <summary>
            /// Enum ExpiredEnum for expired
            /// </summary>
            [EnumMember(Value = "expired")]
            ExpiredEnum = 2,
            /// <summary>
            /// Enum AgreedEnum for agreed
            /// </summary>
            [EnumMember(Value = "agreed")]
            AgreedEnum = 3        }

        /// <summary>
        /// The status of the mandate, which indicates whether it can be used to initiate a payment.
        /// </summary>
        /// <value>The status of the mandate, which indicates whether it can be used to initiate a payment.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Identifier of a network transaction.
        /// </summary>
        /// <value>Identifier of a network transaction.</value>

        [DataMember(Name="network_transaction_id")]
        public string NetworkTransactionId { get; private set; }

        /// <summary>
        /// A reference to the consent agreement you have with your customer.
        /// </summary>
        /// <value>A reference to the consent agreement you have with your customer.</value>

        [DataMember(Name="customer_acceptance")]
        public AllOfcardMandateCustomerAcceptance CustomerAcceptance { get; private set; }

        /// <summary>
        /// Indicates the type of the stored credential profile, if any.
        /// </summary>
        /// <value>Indicates the type of the stored credential profile, if any.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MultiUseEnum for multi_use
            /// </summary>
            [EnumMember(Value = "multi_use")]
            MultiUseEnum = 0,
            /// <summary>
            /// Enum SingleUseEnum for single_use
            /// </summary>
            [EnumMember(Value = "single_use")]
            SingleUseEnum = 1        }

        /// <summary>
        /// Indicates the type of the stored credential profile, if any.
        /// </summary>
        /// <value>Indicates the type of the stored credential profile, if any.</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Indicates the mandate was verified with the payment gateway by Zuora.
        /// </summary>
        /// <value>Indicates the mandate was verified with the payment gateway by Zuora.</value>

        [DataMember(Name="verified")]
        public bool? Verified { get; private set; }

        /// <summary>
        /// Specifies if Zuora should verify this mandate.
        /// </summary>
        /// <value>Specifies if Zuora should verify this mandate.</value>

        [DataMember(Name="verify")]
        public bool? Verify { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardMandate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  NetworkTransactionId: ").Append(NetworkTransactionId).Append("\n");
            sb.Append("  CustomerAcceptance: ").Append(CustomerAcceptance).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Verify: ").Append(Verify).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CardMandate)obj);
        }

        /// <summary>
        /// Returns true if CardMandate instances are equal
        /// </summary>
        /// <param name="other">Instance of CardMandate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardMandate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    NetworkTransactionId == other.NetworkTransactionId ||
                    NetworkTransactionId != null &&
                    NetworkTransactionId.Equals(other.NetworkTransactionId)
                ) && 
                (
                    CustomerAcceptance == other.CustomerAcceptance ||
                    CustomerAcceptance != null &&
                    CustomerAcceptance.Equals(other.CustomerAcceptance)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Verified == other.Verified ||
                    Verified != null &&
                    Verified.Equals(other.Verified)
                ) && 
                (
                    Verify == other.Verify ||
                    Verify != null &&
                    Verify.Equals(other.Verify)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (NetworkTransactionId != null)
                    hashCode = hashCode * 59 + NetworkTransactionId.GetHashCode();
                    if (CustomerAcceptance != null)
                    hashCode = hashCode * 59 + CustomerAcceptance.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Verified != null)
                    hashCode = hashCode * 59 + Verified.GetHashCode();
                    if (Verify != null)
                    hashCode = hashCode * 59 + Verify.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CardMandate left, CardMandate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CardMandate left, CardMandate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
