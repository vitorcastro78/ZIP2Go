/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ResponseHeaders : IEquatable<ResponseHeaders>
    { 
        /// <summary>
        /// The request limit quota for the time window closest to exhaustion. See [rate limits](https://developer.zuora.com/rest-api/general-concepts/rate-concurrency-limits/#rate-limits) for more information.
        /// </summary>
        /// <value>The request limit quota for the time window closest to exhaustion. See [rate limits](https://developer.zuora.com/rest-api/general-concepts/rate-concurrency-limits/#rate-limits) for more information.</value>

        [DataMember(Name="ratelimit-limit")]
        public string RatelimitLimit { get; set; }

        /// <summary>
        /// The number of requests remaining in the time window closest to quota exhaustion. See [rate limits](https://developer.zuora.com/rest-api/general-concepts/rate-concurrency-limits/#rate-limits) for more information.
        /// </summary>
        /// <value>The number of requests remaining in the time window closest to quota exhaustion. See [rate limits](https://developer.zuora.com/rest-api/general-concepts/rate-concurrency-limits/#rate-limits) for more information.</value>

        [DataMember(Name="ratelimit-remaining")]
        public decimal? RatelimitRemaining { get; set; }

        /// <summary>
        /// The number of seconds until the quota resets for the time window closest to quota exhaustion. See [rate limits](https://developer.zuora.com/rest-api/general-concepts/rate-concurrency-limits/#rate-limits) for more information.
        /// </summary>
        /// <value>The number of seconds until the quota resets for the time window closest to quota exhaustion. See [rate limits](https://developer.zuora.com/rest-api/general-concepts/rate-concurrency-limits/#rate-limits) for more information.</value>

        [DataMember(Name="ratelimit-reset")]
        public decimal? RatelimitReset { get; set; }

        /// <summary>
        /// Zuora’s internal identifier for this request.
        /// </summary>
        /// <value>Zuora’s internal identifier for this request.</value>

        [DataMember(Name="zuora-request-id")]
        public string ZuoraRequestId { get; set; }

        /// <summary>
        /// A user-supplied identifier for this request. If you supply a &#x60;zuora-track-id&#x60; as a request header, Zuora returns the &#x60;zuora-track-id&#x60; as a response header. 
        /// </summary>
        /// <value>A user-supplied identifier for this request. If you supply a &#x60;zuora-track-id&#x60; as a request header, Zuora returns the &#x60;zuora-track-id&#x60; as a response header. </value>

        [DataMember(Name="zuora-track-id")]
        public string ZuoraTrackId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseHeaders {\n");
            sb.Append("  RatelimitLimit: ").Append(RatelimitLimit).Append("\n");
            sb.Append("  RatelimitRemaining: ").Append(RatelimitRemaining).Append("\n");
            sb.Append("  RatelimitReset: ").Append(RatelimitReset).Append("\n");
            sb.Append("  ZuoraRequestId: ").Append(ZuoraRequestId).Append("\n");
            sb.Append("  ZuoraTrackId: ").Append(ZuoraTrackId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResponseHeaders)obj);
        }

        /// <summary>
        /// Returns true if ResponseHeaders instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseHeaders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseHeaders other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RatelimitLimit == other.RatelimitLimit ||
                    RatelimitLimit != null &&
                    RatelimitLimit.Equals(other.RatelimitLimit)
                ) && 
                (
                    RatelimitRemaining == other.RatelimitRemaining ||
                    RatelimitRemaining != null &&
                    RatelimitRemaining.Equals(other.RatelimitRemaining)
                ) && 
                (
                    RatelimitReset == other.RatelimitReset ||
                    RatelimitReset != null &&
                    RatelimitReset.Equals(other.RatelimitReset)
                ) && 
                (
                    ZuoraRequestId == other.ZuoraRequestId ||
                    ZuoraRequestId != null &&
                    ZuoraRequestId.Equals(other.ZuoraRequestId)
                ) && 
                (
                    ZuoraTrackId == other.ZuoraTrackId ||
                    ZuoraTrackId != null &&
                    ZuoraTrackId.Equals(other.ZuoraTrackId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RatelimitLimit != null)
                    hashCode = hashCode * 59 + RatelimitLimit.GetHashCode();
                    if (RatelimitRemaining != null)
                    hashCode = hashCode * 59 + RatelimitRemaining.GetHashCode();
                    if (RatelimitReset != null)
                    hashCode = hashCode * 59 + RatelimitReset.GetHashCode();
                    if (ZuoraRequestId != null)
                    hashCode = hashCode * 59 + ZuoraRequestId.GetHashCode();
                    if (ZuoraTrackId != null)
                    hashCode = hashCode * 59 + ZuoraTrackId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResponseHeaders left, ResponseHeaders right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResponseHeaders left, ResponseHeaders right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
