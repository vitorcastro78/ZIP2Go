/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FulfillmentCreateBulkResponse : IEquatable<FulfillmentCreateBulkResponse>
    { 
        /// <summary>
        /// Gets or Sets Data
        /// </summary>

        [DataMember(Name="data")]
        public List<Fulfillment> Data { get; set; }

        /// <summary>
        /// The total amount collected by this request.
        /// </summary>
        /// <value>The total amount collected by this request.</value>

        [DataMember(Name="amount_paid")]
        public decimal? AmountPaid { get; set; }

        /// <summary>
        /// Human-readable identifier of the payment associated with this fulfillment.
        /// </summary>
        /// <value>Human-readable identifier of the payment associated with this fulfillment.</value>

        [DataMember(Name="payment_number")]
        public string PaymentNumber { get; set; }

        /// <summary>
        /// Human-readable identifiers of any credit memos associated with this request.
        /// </summary>
        /// <value>Human-readable identifiers of any credit memos associated with this request.</value>

        [DataMember(Name="credit_memo_numbers")]
        public List<string> CreditMemoNumbers { get; set; }

        /// <summary>
        /// Human-readable identifiers of any invoices associated with this request.
        /// </summary>
        /// <value>Human-readable identifiers of any invoices associated with this request.</value>

        [DataMember(Name="invoice_numbers")]
        public List<string> InvoiceNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentCreateBulkResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  PaymentNumber: ").Append(PaymentNumber).Append("\n");
            sb.Append("  CreditMemoNumbers: ").Append(CreditMemoNumbers).Append("\n");
            sb.Append("  InvoiceNumbers: ").Append(InvoiceNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FulfillmentCreateBulkResponse)obj);
        }

        /// <summary>
        /// Returns true if FulfillmentCreateBulkResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of FulfillmentCreateBulkResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentCreateBulkResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    AmountPaid == other.AmountPaid ||
                    AmountPaid != null &&
                    AmountPaid.Equals(other.AmountPaid)
                ) && 
                (
                    PaymentNumber == other.PaymentNumber ||
                    PaymentNumber != null &&
                    PaymentNumber.Equals(other.PaymentNumber)
                ) && 
                (
                    CreditMemoNumbers == other.CreditMemoNumbers ||
                    CreditMemoNumbers != null &&
                    CreditMemoNumbers.SequenceEqual(other.CreditMemoNumbers)
                ) && 
                (
                    InvoiceNumbers == other.InvoiceNumbers ||
                    InvoiceNumbers != null &&
                    InvoiceNumbers.SequenceEqual(other.InvoiceNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (AmountPaid != null)
                    hashCode = hashCode * 59 + AmountPaid.GetHashCode();
                    if (PaymentNumber != null)
                    hashCode = hashCode * 59 + PaymentNumber.GetHashCode();
                    if (CreditMemoNumbers != null)
                    hashCode = hashCode * 59 + CreditMemoNumbers.GetHashCode();
                    if (InvoiceNumbers != null)
                    hashCode = hashCode * 59 + InvoiceNumbers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FulfillmentCreateBulkResponse left, FulfillmentCreateBulkResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FulfillmentCreateBulkResponse left, FulfillmentCreateBulkResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
