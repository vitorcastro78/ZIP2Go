/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentSchedule : IEquatable<PaymentSchedule>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfpaymentScheduleCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// Unique identifier of the customer account the payment schedule belongs to.
        /// </summary>
        /// <value>Unique identifier of the customer account the payment schedule belongs to.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Account number of the customer account the payment schedule belongs to.
        /// </summary>
        /// <value>Account number of the customer account the payment schedule belongs to.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The amount of each payment schedule item in the payment schedule.
        /// </summary>
        /// <value>The amount of each payment schedule item in the payment schedule.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Unit in which term duration is defined. One of week or month.
        /// </summary>
        /// <value>Unit in which term duration is defined. One of week or month.</value>

        [DataMember(Name="period")]
        public string Period { get; set; }

        /// <summary>
        /// The billing document with which the payment schedule is associated. Note: This field is optional. If you have the Standalone Payment feature enabled, you can leave this field blank and set standalone to true to create standalone payments. You can also choose to create unapplied payments by leaving this object blank and setting standalone to false. If Standalone Payment is not enabled, leaving this object unspecified will create unapplied payments.
        /// </summary>
        /// <value>The billing document with which the payment schedule is associated. Note: This field is optional. If you have the Standalone Payment feature enabled, you can leave this field blank and set standalone to true to create standalone payments. You can also choose to create unapplied payments by leaving this object blank and setting standalone to false. If Standalone Payment is not enabled, leaving this object unspecified will create unapplied payments.</value>

        [DataMember(Name="billing_document")]
        public AllOfpaymentScheduleBillingDocument BillingDocument { get; set; }

        /// <summary>
        /// Currency of the payment schedule. Note: This field is optional. The default value is the account&#x27;s default currency. This field will be ignored when items is specified.
        /// </summary>
        /// <value>Currency of the payment schedule. Note: This field is optional. The default value is the account&#x27;s default currency. This field will be ignored when items is specified.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>

        [DataMember(Name="items")]
        public List<PaymentScheduleItem> Items { get; set; }

        /// <summary>
        /// The number of payment schedule items to be created for this payment schedule.
        /// </summary>
        /// <value>The number of payment schedule items to be created for this payment schedule.</value>

        [DataMember(Name="number_of_payments")]
        public int? NumberOfPayments { get; set; }

        /// <summary>
        /// ID of the payment gateway used to collect payments. Note: This field is optional. The default value is the account&#x27;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#x27;s default payment gateway ID. This field will be ignored when items is specified.
        /// </summary>
        /// <value>ID of the payment gateway used to collect payments. Note: This field is optional. The default value is the account&#x27;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#x27;s default payment gateway ID. This field will be ignored when items is specified.</value>

        [DataMember(Name="payment_gateway_id")]
        public string PaymentGatewayId { get; set; }

        /// <summary>
        /// ID of the payment method. Note: This field is optional. The default value is the account&#x27;s default payment method ID. This field will be ignored when items is specified.
        /// </summary>
        /// <value>ID of the payment method. Note: This field is optional. The default value is the account&#x27;s default payment method ID. This field will be ignored when items is specified.</value>

        [DataMember(Name="payment_method_id")]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Number of the payment schedule.
        /// </summary>
        /// <value>Number of the payment schedule.</value>

        [DataMember(Name="payment_schedule_number")]
        public string PaymentScheduleNumber { get; set; }

        /// <summary>
        /// At which hour in the day in the tenant&#x27;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenantâ€™s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time. The default value is 0. If the payment run_hour and scheduled_date are backdated, the system will collect the payment when the next run_hour occurs.
        /// </summary>
        /// <value>At which hour in the day in the tenant&#x27;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenantâ€™s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time. The default value is 0. If the payment run_hour and scheduled_date are backdated, the system will collect the payment when the next run_hour occurs.</value>

        [Range(0, 23)]
        [DataMember(Name="run_hour")]
        public int? RunHour { get; set; }

        /// <summary>
        /// Indicates whether the payments created by the payment schedule are standalone payments or not.              When setting to &#x60;true&#x60;, standalone payments will be created.       When setting to &#x60;false&#x60;, you can either specify a billing document, or not specifying any billing documents.       In the latter case, unapplied payments will be created.       If set to &#x60;null&#x60;, standalone payments will be created.              **Note**: This parameter is only available if standalone payments are enabled in your tenant. The default value is &#x60;true&#x60; if standalone payments are enabled in your tenant.
        /// </summary>
        /// <value>Indicates whether the payments created by the payment schedule are standalone payments or not.              When setting to &#x60;true&#x60;, standalone payments will be created.       When setting to &#x60;false&#x60;, you can either specify a billing document, or not specifying any billing documents.       In the latter case, unapplied payments will be created.       If set to &#x60;null&#x60;, standalone payments will be created.              **Note**: This parameter is only available if standalone payments are enabled in your tenant. The default value is &#x60;true&#x60; if standalone payments are enabled in your tenant.</value>

        [DataMember(Name="standalone")]
        public bool? Standalone { get; set; }

        /// <summary>
        /// The date of the first scheduled payment collection. Note: This parameter is required when &#x60;items&#x60; is not specified. This parameter will be ignored when &#x60;items&#x60; is specified.
        /// </summary>
        /// <value>The date of the first scheduled payment collection. Note: This parameter is required when &#x60;items&#x60; is not specified. This parameter will be ignored when &#x60;items&#x60; is specified.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The total amount to be collected by the payment schedule.
        /// </summary>
        /// <value>The total amount to be collected by the payment schedule.</value>

        [DataMember(Name="total_amount")]
        public decimal? TotalAmount { get; set; }

        /// <summary>
        /// If it is set to &#x60;true&#x60;, the payment schedule is a custom payment schedule.
        /// </summary>
        /// <value>If it is set to &#x60;true&#x60;, the payment schedule is a custom payment schedule.</value>

        [DataMember(Name="custom")]
        public bool? Custom { get; set; }

        /// <summary>
        /// The date of the next scheduled payment.
        /// </summary>
        /// <value>The date of the next scheduled payment.</value>

        [DataMember(Name="next_payment_date")]
        public DateTime? NextPaymentDate { get; set; }

        /// <summary>
        /// The date of the most recent scheduled payment.
        /// </summary>
        /// <value>The date of the most recent scheduled payment.</value>

        [DataMember(Name="recent_payment_date")]
        public DateTime? RecentPaymentDate { get; set; }

        /// <summary>
        /// The status of the payment schedule. active: there are unprocessed payment schedule items. canceled: the payment schedule has been canceled. complete: the payment schedule is complete and all items have been processed.
        /// </summary>
        /// <value>The status of the payment schedule. active: there are unprocessed payment schedule items. canceled: the payment schedule has been canceled. complete: the payment schedule is complete and all items have been processed.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ActiveEnum for active
            /// </summary>
            [EnumMember(Value = "active")]
            ActiveEnum = 0,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 1,
            /// <summary>
            /// Enum CompleteEnum for complete
            /// </summary>
            [EnumMember(Value = "complete")]
            CompleteEnum = 2        }

        /// <summary>
        /// The status of the payment schedule. active: there are unprocessed payment schedule items. canceled: the payment schedule has been canceled. complete: the payment schedule is complete and all items have been processed.
        /// </summary>
        /// <value>The status of the payment schedule. active: there are unprocessed payment schedule items. canceled: the payment schedule has been canceled. complete: the payment schedule is complete and all items have been processed.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// The total number of failed payments.
        /// </summary>
        /// <value>The total number of failed payments.</value>

        [DataMember(Name="total_payments_errored")]
        public int? TotalPaymentsErrored { get; set; }

        /// <summary>
        /// The total number of payments processed.
        /// </summary>
        /// <value>The total number of payments processed.</value>

        [DataMember(Name="total_payments_processed")]
        public int? TotalPaymentsProcessed { get; set; }

        /// <summary>
        /// Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the gateway_options type is supported. Payment schedule payment_options take precedence over payment schedule item payment_options.
        /// </summary>
        /// <value>Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the gateway_options type is supported. Payment schedule payment_options take precedence over payment schedule item payment_options.</value>

        [DataMember(Name="payment_options")]
        public List<PaymentSchedulePaymentOptionRequest> PaymentOptions { get; set; }

        /// <summary>
        /// Indicates whether the payments created by the payment schedule will be used as reserved payments. This field will only be available if the prepaid cash drawdown permission is enabled. See &lt;a href&#x3D;\&quot;https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Prepaid_with_Drawdown\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Prepaid Cash with Drawdown for more information.&lt;/a&gt;
        /// </summary>
        /// <value>Indicates whether the payments created by the payment schedule will be used as reserved payments. This field will only be available if the prepaid cash drawdown permission is enabled. See &lt;a href&#x3D;\&quot;https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Prepaid_with_Drawdown\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Prepaid Cash with Drawdown for more information.&lt;/a&gt;</value>

        [DataMember(Name="prepayment")]
        public bool? Prepayment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentSchedule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  BillingDocument: ").Append(BillingDocument).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  NumberOfPayments: ").Append(NumberOfPayments).Append("\n");
            sb.Append("  PaymentGatewayId: ").Append(PaymentGatewayId).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PaymentScheduleNumber: ").Append(PaymentScheduleNumber).Append("\n");
            sb.Append("  RunHour: ").Append(RunHour).Append("\n");
            sb.Append("  Standalone: ").Append(Standalone).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  NextPaymentDate: ").Append(NextPaymentDate).Append("\n");
            sb.Append("  RecentPaymentDate: ").Append(RecentPaymentDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TotalPaymentsErrored: ").Append(TotalPaymentsErrored).Append("\n");
            sb.Append("  TotalPaymentsProcessed: ").Append(TotalPaymentsProcessed).Append("\n");
            sb.Append("  PaymentOptions: ").Append(PaymentOptions).Append("\n");
            sb.Append("  Prepayment: ").Append(Prepayment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentSchedule)obj);
        }

        /// <summary>
        /// Returns true if PaymentSchedule instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentSchedule other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    BillingDocument == other.BillingDocument ||
                    BillingDocument != null &&
                    BillingDocument.Equals(other.BillingDocument)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    NumberOfPayments == other.NumberOfPayments ||
                    NumberOfPayments != null &&
                    NumberOfPayments.Equals(other.NumberOfPayments)
                ) && 
                (
                    PaymentGatewayId == other.PaymentGatewayId ||
                    PaymentGatewayId != null &&
                    PaymentGatewayId.Equals(other.PaymentGatewayId)
                ) && 
                (
                    PaymentMethodId == other.PaymentMethodId ||
                    PaymentMethodId != null &&
                    PaymentMethodId.Equals(other.PaymentMethodId)
                ) && 
                (
                    PaymentScheduleNumber == other.PaymentScheduleNumber ||
                    PaymentScheduleNumber != null &&
                    PaymentScheduleNumber.Equals(other.PaymentScheduleNumber)
                ) && 
                (
                    RunHour == other.RunHour ||
                    RunHour != null &&
                    RunHour.Equals(other.RunHour)
                ) && 
                (
                    Standalone == other.Standalone ||
                    Standalone != null &&
                    Standalone.Equals(other.Standalone)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    TotalAmount == other.TotalAmount ||
                    TotalAmount != null &&
                    TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    Custom == other.Custom ||
                    Custom != null &&
                    Custom.Equals(other.Custom)
                ) && 
                (
                    NextPaymentDate == other.NextPaymentDate ||
                    NextPaymentDate != null &&
                    NextPaymentDate.Equals(other.NextPaymentDate)
                ) && 
                (
                    RecentPaymentDate == other.RecentPaymentDate ||
                    RecentPaymentDate != null &&
                    RecentPaymentDate.Equals(other.RecentPaymentDate)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    TotalPaymentsErrored == other.TotalPaymentsErrored ||
                    TotalPaymentsErrored != null &&
                    TotalPaymentsErrored.Equals(other.TotalPaymentsErrored)
                ) && 
                (
                    TotalPaymentsProcessed == other.TotalPaymentsProcessed ||
                    TotalPaymentsProcessed != null &&
                    TotalPaymentsProcessed.Equals(other.TotalPaymentsProcessed)
                ) && 
                (
                    PaymentOptions == other.PaymentOptions ||
                    PaymentOptions != null &&
                    PaymentOptions.SequenceEqual(other.PaymentOptions)
                ) && 
                (
                    Prepayment == other.Prepayment ||
                    Prepayment != null &&
                    Prepayment.Equals(other.Prepayment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (BillingDocument != null)
                    hashCode = hashCode * 59 + BillingDocument.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    if (NumberOfPayments != null)
                    hashCode = hashCode * 59 + NumberOfPayments.GetHashCode();
                    if (PaymentGatewayId != null)
                    hashCode = hashCode * 59 + PaymentGatewayId.GetHashCode();
                    if (PaymentMethodId != null)
                    hashCode = hashCode * 59 + PaymentMethodId.GetHashCode();
                    if (PaymentScheduleNumber != null)
                    hashCode = hashCode * 59 + PaymentScheduleNumber.GetHashCode();
                    if (RunHour != null)
                    hashCode = hashCode * 59 + RunHour.GetHashCode();
                    if (Standalone != null)
                    hashCode = hashCode * 59 + Standalone.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (TotalAmount != null)
                    hashCode = hashCode * 59 + TotalAmount.GetHashCode();
                    if (Custom != null)
                    hashCode = hashCode * 59 + Custom.GetHashCode();
                    if (NextPaymentDate != null)
                    hashCode = hashCode * 59 + NextPaymentDate.GetHashCode();
                    if (RecentPaymentDate != null)
                    hashCode = hashCode * 59 + RecentPaymentDate.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (TotalPaymentsErrored != null)
                    hashCode = hashCode * 59 + TotalPaymentsErrored.GetHashCode();
                    if (TotalPaymentsProcessed != null)
                    hashCode = hashCode * 59 + TotalPaymentsProcessed.GetHashCode();
                    if (PaymentOptions != null)
                    hashCode = hashCode * 59 + PaymentOptions.GetHashCode();
                    if (Prepayment != null)
                    hashCode = hashCode * 59 + Prepayment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentSchedule left, PaymentSchedule right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentSchedule left, PaymentSchedule right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
