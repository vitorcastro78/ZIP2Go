/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillRunPreviewCreateRequest : IEquatable<BillRunPreviewCreateRequest>
    { 
        /// <summary>
        /// Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.
        /// </summary>
        /// <value>Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AssumeRenewalEnum
        {
            /// <summary>
            /// Enum AllEnum for all
            /// </summary>
            [EnumMember(Value = "all")]
            AllEnum = 0,
            /// <summary>
            /// Enum AutoRenewOnlyEnum for auto_renew_only
            /// </summary>
            [EnumMember(Value = "auto_renew_only")]
            AutoRenewOnlyEnum = 1,
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 2        }

        /// <summary>
        /// Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#x27;s next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#x27;s next billing period to the target date.
        /// </summary>
        /// <value>Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#x27;s next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#x27;s next billing period to the target date.</value>

        [DataMember(Name="assume_renewal")]
        public AssumeRenewalEnum? AssumeRenewal { get; set; }

        /// <summary>
        /// Identifiers of the customer account batches to be included in this bill run preview.
        /// </summary>
        /// <value>Identifiers of the customer account batches to be included in this bill run preview.</value>

        [DataMember(Name="batches")]
        public List<string> Batches { get; set; }

        /// <summary>
        /// Gets or Sets ChargesExcluded
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ChargesExcludedEnum
        {
            /// <summary>
            /// Enum OneTimeEnum for one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            OneTimeEnum = 0,
            /// <summary>
            /// Enum RecurringEnum for recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            RecurringEnum = 1,
            /// <summary>
            /// Enum UsageEnum for usage
            /// </summary>
            [EnumMember(Value = "usage")]
            UsageEnum = 2        }

        /// <summary>
        /// Charge type or types to be excluded from this bill run preview.
        /// </summary>
        /// <value>Charge type or types to be excluded from this bill run preview.</value>

        [DataMember(Name="charges_excluded")]
        public List<ChargesExcludedEnum> ChargesExcluded { get; set; }

        /// <summary>
        /// If true, draft items will be included in this bill run preview.
        /// </summary>
        /// <value>If true, draft items will be included in this bill run preview.</value>

        [DataMember(Name="include_draft_items")]
        public bool? IncludeDraftItems { get; set; }

        /// <summary>
        /// If true, evergreen subscriptions will be included in this bill run preview.
        /// </summary>
        /// <value>If true, evergreen subscriptions will be included in this bill run preview.</value>

        [DataMember(Name="include_evergreen_subscriptions")]
        public bool? IncludeEvergreenSubscriptions { get; set; }

        /// <summary>
        /// All unbilled items on or before this date are included in this bill run.
        /// </summary>
        /// <value>All unbilled items on or before this date are included in this bill run.</value>
        [Required]

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillRunPreviewCreateRequest {\n");
            sb.Append("  AssumeRenewal: ").Append(AssumeRenewal).Append("\n");
            sb.Append("  Batches: ").Append(Batches).Append("\n");
            sb.Append("  ChargesExcluded: ").Append(ChargesExcluded).Append("\n");
            sb.Append("  IncludeDraftItems: ").Append(IncludeDraftItems).Append("\n");
            sb.Append("  IncludeEvergreenSubscriptions: ").Append(IncludeEvergreenSubscriptions).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillRunPreviewCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if BillRunPreviewCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of BillRunPreviewCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillRunPreviewCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssumeRenewal == other.AssumeRenewal ||
                    AssumeRenewal != null &&
                    AssumeRenewal.Equals(other.AssumeRenewal)
                ) && 
                (
                    Batches == other.Batches ||
                    Batches != null &&
                    Batches.SequenceEqual(other.Batches)
                ) && 
                (
                    ChargesExcluded == other.ChargesExcluded ||
                    ChargesExcluded != null &&
                    ChargesExcluded.SequenceEqual(other.ChargesExcluded)
                ) && 
                (
                    IncludeDraftItems == other.IncludeDraftItems ||
                    IncludeDraftItems != null &&
                    IncludeDraftItems.Equals(other.IncludeDraftItems)
                ) && 
                (
                    IncludeEvergreenSubscriptions == other.IncludeEvergreenSubscriptions ||
                    IncludeEvergreenSubscriptions != null &&
                    IncludeEvergreenSubscriptions.Equals(other.IncludeEvergreenSubscriptions)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssumeRenewal != null)
                    hashCode = hashCode * 59 + AssumeRenewal.GetHashCode();
                    if (Batches != null)
                    hashCode = hashCode * 59 + Batches.GetHashCode();
                    if (ChargesExcluded != null)
                    hashCode = hashCode * 59 + ChargesExcluded.GetHashCode();
                    if (IncludeDraftItems != null)
                    hashCode = hashCode * 59 + IncludeDraftItems.GetHashCode();
                    if (IncludeEvergreenSubscriptions != null)
                    hashCode = hashCode * 59 + IncludeEvergreenSubscriptions.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillRunPreviewCreateRequest left, BillRunPreviewCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillRunPreviewCreateRequest left, BillRunPreviewCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
