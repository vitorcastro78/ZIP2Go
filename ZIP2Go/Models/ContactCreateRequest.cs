/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContactCreateRequest : IEquatable<ContactCreateRequest>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfcontactCreateRequestCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>

        [DataMember(Name="address")]
        public Address Address { get; set; }

        /// <summary>
        /// Customer first name.
        /// </summary>
        /// <value>Customer first name.</value>
        [Required]

        [DataMember(Name="first_name")]
        public string FirstName { get; set; }

        /// <summary>
        /// Customer home phone (including extension).
        /// </summary>
        /// <value>Customer home phone (including extension).</value>

        [DataMember(Name="home_phone")]
        public string HomePhone { get; set; }

        /// <summary>
        /// Customer last name.
        /// </summary>
        /// <value>Customer last name.</value>
        [Required]

        [DataMember(Name="last_name")]
        public string LastName { get; set; }

        /// <summary>
        /// Customer phone (including extension).
        /// </summary>
        /// <value>Customer phone (including extension).</value>

        [DataMember(Name="mobile_phone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Nickname for this contact.
        /// </summary>
        /// <value>Nickname for this contact.</value>

        [DataMember(Name="nickname")]
        public string Nickname { get; set; }

        /// <summary>
        /// Other customer phone (including extension).
        /// </summary>
        /// <value>Other customer phone (including extension).</value>

        [DataMember(Name="other_phone")]
        public string OtherPhone { get; set; }

        /// <summary>
        /// Customer email address.
        /// </summary>
        /// <value>Customer email address.</value>

        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// A region defined in your Zuora Tax rules.
        /// </summary>
        /// <value>A region defined in your Zuora Tax rules.</value>

        [DataMember(Name="tax_region")]
        public string TaxRegion { get; set; }

        /// <summary>
        /// Customer work email.
        /// </summary>
        /// <value>Customer work email.</value>

        [DataMember(Name="work_email")]
        public string WorkEmail { get; set; }

        /// <summary>
        /// Customer work phone.
        /// </summary>
        /// <value>Customer work phone.</value>

        [DataMember(Name="work_phone")]
        public string WorkPhone { get; set; }

        /// <summary>
        /// The type of the additional phone number.
        /// </summary>
        /// <value>The type of the additional phone number.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OtherPhoneTypeEnum
        {
            /// <summary>
            /// Enum WorkEnum for work
            /// </summary>
            [EnumMember(Value = "work")]
            WorkEnum = 0,
            /// <summary>
            /// Enum MobileEnum for mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            MobileEnum = 1,
            /// <summary>
            /// Enum HomeEnum for home
            /// </summary>
            [EnumMember(Value = "home")]
            HomeEnum = 2,
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 3        }

        /// <summary>
        /// The type of the additional phone number.
        /// </summary>
        /// <value>The type of the additional phone number.</value>

        [DataMember(Name="other_phone_type")]
        public OtherPhoneTypeEnum? OtherPhoneType { get; set; }

        /// <summary>
        /// The contact&#x27;s fax number.
        /// </summary>
        /// <value>The contact&#x27;s fax number.</value>

        [DataMember(Name="fax")]
        public string Fax { get; set; }

        /// <summary>
        /// Identifier of a customer account with which this contact is associated. Either &#x60;account_id&#x60; or &#x60;account_number&#x60; is required.
        /// </summary>
        /// <value>Identifier of a customer account with which this contact is associated. Either &#x60;account_id&#x60; or &#x60;account_number&#x60; is required.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Human-readable identifier of the account with which this contact is associated. Either &#x60;account_number&#x60; or &#x60;account_id&#x60; is required.
        /// </summary>
        /// <value>Human-readable identifier of the account with which this contact is associated. Either &#x60;account_number&#x60; or &#x60;account_id&#x60; is required.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactCreateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  OtherPhone: ").Append(OtherPhone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TaxRegion: ").Append(TaxRegion).Append("\n");
            sb.Append("  WorkEmail: ").Append(WorkEmail).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("  OtherPhoneType: ").Append(OtherPhoneType).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContactCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if ContactCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    HomePhone == other.HomePhone ||
                    HomePhone != null &&
                    HomePhone.Equals(other.HomePhone)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    MobilePhone == other.MobilePhone ||
                    MobilePhone != null &&
                    MobilePhone.Equals(other.MobilePhone)
                ) && 
                (
                    Nickname == other.Nickname ||
                    Nickname != null &&
                    Nickname.Equals(other.Nickname)
                ) && 
                (
                    OtherPhone == other.OtherPhone ||
                    OtherPhone != null &&
                    OtherPhone.Equals(other.OtherPhone)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    TaxRegion == other.TaxRegion ||
                    TaxRegion != null &&
                    TaxRegion.Equals(other.TaxRegion)
                ) && 
                (
                    WorkEmail == other.WorkEmail ||
                    WorkEmail != null &&
                    WorkEmail.Equals(other.WorkEmail)
                ) && 
                (
                    WorkPhone == other.WorkPhone ||
                    WorkPhone != null &&
                    WorkPhone.Equals(other.WorkPhone)
                ) && 
                (
                    OtherPhoneType == other.OtherPhoneType ||
                    OtherPhoneType != null &&
                    OtherPhoneType.Equals(other.OtherPhoneType)
                ) && 
                (
                    Fax == other.Fax ||
                    Fax != null &&
                    Fax.Equals(other.Fax)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (HomePhone != null)
                    hashCode = hashCode * 59 + HomePhone.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (MobilePhone != null)
                    hashCode = hashCode * 59 + MobilePhone.GetHashCode();
                    if (Nickname != null)
                    hashCode = hashCode * 59 + Nickname.GetHashCode();
                    if (OtherPhone != null)
                    hashCode = hashCode * 59 + OtherPhone.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (TaxRegion != null)
                    hashCode = hashCode * 59 + TaxRegion.GetHashCode();
                    if (WorkEmail != null)
                    hashCode = hashCode * 59 + WorkEmail.GetHashCode();
                    if (WorkPhone != null)
                    hashCode = hashCode * 59 + WorkPhone.GetHashCode();
                    if (OtherPhoneType != null)
                    hashCode = hashCode * 59 + OtherPhoneType.GetHashCode();
                    if (Fax != null)
                    hashCode = hashCode * 59 + Fax.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContactCreateRequest left, ContactCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactCreateRequest left, ContactCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
