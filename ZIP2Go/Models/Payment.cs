/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Payment : IEquatable<Payment>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfpaymentCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Transaction identifier returned by the payment gateway. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>Transaction identifier returned by the payment gateway. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>

        [DataMember(Name="reference_id")]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Identifier of the customer account associated with this payment.
        /// </summary>
        /// <value>Identifier of the customer account associated with this payment.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Human-readable identifier of the account associated with this payment. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the account associated with this payment. It can be user-supplied.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The total amount of the payment.
        /// </summary>
        /// <value>The total amount of the payment.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Identifier of the authorization transaction from the payment gateway.
        /// </summary>
        /// <value>Identifier of the authorization transaction from the payment gateway.</value>

        [DataMember(Name="authorization_id")]
        public string AuthorizationId { get; set; }

        /// <summary>
        /// The date and time when the payment takes effect.
        /// </summary>
        /// <value>The date and time when the payment takes effect.</value>

        [DataMember(Name="payment_date")]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Identifier of the payment method used to create this payment.
        /// </summary>
        /// <value>Identifier of the payment method used to create this payment.</value>

        [DataMember(Name="payment_method_id")]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Identifier of the payment gateway that Zuora will use to authorize this payment.
        /// </summary>
        /// <value>Identifier of the payment gateway that Zuora will use to authorize this payment.</value>

        [DataMember(Name="gateway_id")]
        public string GatewayId { get; set; }

        /// <summary>
        /// A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
        /// </summary>
        /// <value>A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead.</value>

        [DataMember(Name="gateway_order_id")]
        public string GatewayOrderId { get; set; }

        /// <summary>
        /// A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>

        [DataMember(Name="second_reference_id")]
        public string SecondReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets GatewayOptions
        /// </summary>

        [DataMember(Name="gateway_options")]
        public Dictionary<string, string> GatewayOptions { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>

        [DataMember(Name="statement_descriptor")]
        public string StatementDescriptor { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>

        [DataMember(Name="statement_descriptor_phone")]
        public string StatementDescriptorPhone { get; set; }

        /// <summary>
        /// If true, indicates that this payment is not handled by Zuora.
        /// </summary>
        /// <value>If true, indicates that this payment is not handled by Zuora.</value>

        [DataMember(Name="external")]
        public bool? External { get; set; }

        /// <summary>
        /// 3-letter ISO 4217 currency code.
        /// </summary>
        /// <value>3-letter ISO 4217 currency code.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The customer account associated with this payment.
        /// </summary>
        /// <value>The customer account associated with this payment.</value>

        [DataMember(Name="account")]
        public AllOfpaymentAccount Account { get; set; }

        /// <summary>
        /// The total amount applied.
        /// </summary>
        /// <value>The total amount applied.</value>

        [DataMember(Name="amount_applied")]
        public decimal? AmountApplied { get; set; }

        /// <summary>
        /// The total remaining balance.
        /// </summary>
        /// <value>The total remaining balance.</value>

        [DataMember(Name="remaining_balance")]
        public decimal? RemainingBalance { get; set; }

        /// <summary>
        /// The total amount refunded.
        /// </summary>
        /// <value>The total amount refunded.</value>

        [DataMember(Name="amount_refunded")]
        public decimal? AmountRefunded { get; set; }

        /// <summary>
        /// The state of the payment.
        /// </summary>
        /// <value>The state of the payment.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum DraftEnum for draft
            /// </summary>
            [EnumMember(Value = "draft")]
            DraftEnum = 0,
            /// <summary>
            /// Enum PostedEnum for posted
            /// </summary>
            [EnumMember(Value = "posted")]
            PostedEnum = 1,
            /// <summary>
            /// Enum ProcessingEnum for processing
            /// </summary>
            [EnumMember(Value = "processing")]
            ProcessingEnum = 2,
            /// <summary>
            /// Enum ProcessedEnum for processed
            /// </summary>
            [EnumMember(Value = "processed")]
            ProcessedEnum = 3,
            /// <summary>
            /// Enum ErrorEnum for error
            /// </summary>
            [EnumMember(Value = "error")]
            ErrorEnum = 4,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 5        }

        /// <summary>
        /// The state of the payment.
        /// </summary>
        /// <value>The state of the payment.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Identifier of the payout associated with this payment.
        /// </summary>
        /// <value>Identifier of the payout associated with this payment.</value>

        [DataMember(Name="payout_id")]
        public string PayoutId { get; set; }

        /// <summary>
        /// Human-readable identifier for this object; may be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier for this object; may be user-supplied.</value>

        [DataMember(Name="payment_number")]
        public string PaymentNumber { get; set; }

        /// <summary>
        /// Code returned by the payment gateway for this payment.
        /// </summary>
        /// <value>Code returned by the payment gateway for this payment.</value>

        [DataMember(Name="gateway_response_code")]
        public string GatewayResponseCode { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>

        [DataMember(Name="payment_method")]
        public PaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Message returned by the payment gateway for this payment.
        /// </summary>
        /// <value>Message returned by the payment gateway for this payment.</value>

        [DataMember(Name="gateway_response")]
        public string GatewayResponse { get; set; }

        /// <summary>
        /// Gateway reconciliation state.
        /// </summary>
        /// <value>Gateway reconciliation state.</value>

        [DataMember(Name="gateway_reconciliation_status")]
        public string GatewayReconciliationStatus { get; set; }

        /// <summary>
        /// Gateway reconciliation reason.
        /// </summary>
        /// <value>Gateway reconciliation reason.</value>

        [DataMember(Name="gateway_reconciliation_reason")]
        public string GatewayReconciliationReason { get; set; }

        /// <summary>
        /// The payment gateway state of the payment.
        /// </summary>
        /// <value>The payment gateway state of the payment.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GatewayStateEnum
        {
            /// <summary>
            /// Enum MarkedForSubmissionEnum for marked_for_submission
            /// </summary>
            [EnumMember(Value = "marked_for_submission")]
            MarkedForSubmissionEnum = 0,
            /// <summary>
            /// Enum SubmittedEnum for submitted
            /// </summary>
            [EnumMember(Value = "submitted")]
            SubmittedEnum = 1,
            /// <summary>
            /// Enum SettledEnum for settled
            /// </summary>
            [EnumMember(Value = "settled")]
            SettledEnum = 2,
            /// <summary>
            /// Enum NotSubmittedEnum for not_submitted
            /// </summary>
            [EnumMember(Value = "not_submitted")]
            NotSubmittedEnum = 3,
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 4        }

        /// <summary>
        /// The payment gateway state of the payment.
        /// </summary>
        /// <value>The payment gateway state of the payment.</value>

        [DataMember(Name="gateway_state")]
        public GatewayStateEnum? GatewayState { get; set; }

        /// <summary>
        /// Gets or Sets AppliedTo
        /// </summary>

        [DataMember(Name="applied_to")]
        public List<PaymentsAppliedToResponse> AppliedTo { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentScheduleItems
        /// </summary>

        [DataMember(Name="payment_schedule_items")]
        public List<PaymentScheduleItem> PaymentScheduleItems { get; set; }

        /// <summary>
        /// Gets or Sets StateTransitions
        /// </summary>

        [DataMember(Name="state_transitions")]
        public PaymentStateTransitions StateTransitions { get; set; }

        /// <summary>
        /// Gets or Sets GatewayStateTransitions
        /// </summary>

        [DataMember(Name="gateway_state_transitions")]
        public GatewayStateTransitions GatewayStateTransitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AuthorizationId: ").Append(AuthorizationId).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("  GatewayOrderId: ").Append(GatewayOrderId).Append("\n");
            sb.Append("  SecondReferenceId: ").Append(SecondReferenceId).Append("\n");
            sb.Append("  GatewayOptions: ").Append(GatewayOptions).Append("\n");
            sb.Append("  StatementDescriptor: ").Append(StatementDescriptor).Append("\n");
            sb.Append("  StatementDescriptorPhone: ").Append(StatementDescriptorPhone).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  AmountApplied: ").Append(AmountApplied).Append("\n");
            sb.Append("  RemainingBalance: ").Append(RemainingBalance).Append("\n");
            sb.Append("  AmountRefunded: ").Append(AmountRefunded).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PayoutId: ").Append(PayoutId).Append("\n");
            sb.Append("  PaymentNumber: ").Append(PaymentNumber).Append("\n");
            sb.Append("  GatewayResponseCode: ").Append(GatewayResponseCode).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  GatewayResponse: ").Append(GatewayResponse).Append("\n");
            sb.Append("  GatewayReconciliationStatus: ").Append(GatewayReconciliationStatus).Append("\n");
            sb.Append("  GatewayReconciliationReason: ").Append(GatewayReconciliationReason).Append("\n");
            sb.Append("  GatewayState: ").Append(GatewayState).Append("\n");
            sb.Append("  AppliedTo: ").Append(AppliedTo).Append("\n");
            sb.Append("  PaymentScheduleItems: ").Append(PaymentScheduleItems).Append("\n");
            sb.Append("  StateTransitions: ").Append(StateTransitions).Append("\n");
            sb.Append("  GatewayStateTransitions: ").Append(GatewayStateTransitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payment)obj);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ReferenceId == other.ReferenceId ||
                    ReferenceId != null &&
                    ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    AuthorizationId == other.AuthorizationId ||
                    AuthorizationId != null &&
                    AuthorizationId.Equals(other.AuthorizationId)
                ) && 
                (
                    PaymentDate == other.PaymentDate ||
                    PaymentDate != null &&
                    PaymentDate.Equals(other.PaymentDate)
                ) && 
                (
                    PaymentMethodId == other.PaymentMethodId ||
                    PaymentMethodId != null &&
                    PaymentMethodId.Equals(other.PaymentMethodId)
                ) && 
                (
                    GatewayId == other.GatewayId ||
                    GatewayId != null &&
                    GatewayId.Equals(other.GatewayId)
                ) && 
                (
                    GatewayOrderId == other.GatewayOrderId ||
                    GatewayOrderId != null &&
                    GatewayOrderId.Equals(other.GatewayOrderId)
                ) && 
                (
                    SecondReferenceId == other.SecondReferenceId ||
                    SecondReferenceId != null &&
                    SecondReferenceId.Equals(other.SecondReferenceId)
                ) && 
                (
                    GatewayOptions == other.GatewayOptions ||
                    GatewayOptions != null &&
                    GatewayOptions.SequenceEqual(other.GatewayOptions)
                ) && 
                (
                    StatementDescriptor == other.StatementDescriptor ||
                    StatementDescriptor != null &&
                    StatementDescriptor.Equals(other.StatementDescriptor)
                ) && 
                (
                    StatementDescriptorPhone == other.StatementDescriptorPhone ||
                    StatementDescriptorPhone != null &&
                    StatementDescriptorPhone.Equals(other.StatementDescriptorPhone)
                ) && 
                (
                    External == other.External ||
                    External != null &&
                    External.Equals(other.External)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    AmountApplied == other.AmountApplied ||
                    AmountApplied != null &&
                    AmountApplied.Equals(other.AmountApplied)
                ) && 
                (
                    RemainingBalance == other.RemainingBalance ||
                    RemainingBalance != null &&
                    RemainingBalance.Equals(other.RemainingBalance)
                ) && 
                (
                    AmountRefunded == other.AmountRefunded ||
                    AmountRefunded != null &&
                    AmountRefunded.Equals(other.AmountRefunded)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    PayoutId == other.PayoutId ||
                    PayoutId != null &&
                    PayoutId.Equals(other.PayoutId)
                ) && 
                (
                    PaymentNumber == other.PaymentNumber ||
                    PaymentNumber != null &&
                    PaymentNumber.Equals(other.PaymentNumber)
                ) && 
                (
                    GatewayResponseCode == other.GatewayResponseCode ||
                    GatewayResponseCode != null &&
                    GatewayResponseCode.Equals(other.GatewayResponseCode)
                ) && 
                (
                    PaymentMethod == other.PaymentMethod ||
                    PaymentMethod != null &&
                    PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    GatewayResponse == other.GatewayResponse ||
                    GatewayResponse != null &&
                    GatewayResponse.Equals(other.GatewayResponse)
                ) && 
                (
                    GatewayReconciliationStatus == other.GatewayReconciliationStatus ||
                    GatewayReconciliationStatus != null &&
                    GatewayReconciliationStatus.Equals(other.GatewayReconciliationStatus)
                ) && 
                (
                    GatewayReconciliationReason == other.GatewayReconciliationReason ||
                    GatewayReconciliationReason != null &&
                    GatewayReconciliationReason.Equals(other.GatewayReconciliationReason)
                ) && 
                (
                    GatewayState == other.GatewayState ||
                    GatewayState != null &&
                    GatewayState.Equals(other.GatewayState)
                ) && 
                (
                    AppliedTo == other.AppliedTo ||
                    AppliedTo != null &&
                    AppliedTo.SequenceEqual(other.AppliedTo)
                ) && 
                (
                    PaymentScheduleItems == other.PaymentScheduleItems ||
                    PaymentScheduleItems != null &&
                    PaymentScheduleItems.SequenceEqual(other.PaymentScheduleItems)
                ) && 
                (
                    StateTransitions == other.StateTransitions ||
                    StateTransitions != null &&
                    StateTransitions.Equals(other.StateTransitions)
                ) && 
                (
                    GatewayStateTransitions == other.GatewayStateTransitions ||
                    GatewayStateTransitions != null &&
                    GatewayStateTransitions.Equals(other.GatewayStateTransitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ReferenceId != null)
                    hashCode = hashCode * 59 + ReferenceId.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (AuthorizationId != null)
                    hashCode = hashCode * 59 + AuthorizationId.GetHashCode();
                    if (PaymentDate != null)
                    hashCode = hashCode * 59 + PaymentDate.GetHashCode();
                    if (PaymentMethodId != null)
                    hashCode = hashCode * 59 + PaymentMethodId.GetHashCode();
                    if (GatewayId != null)
                    hashCode = hashCode * 59 + GatewayId.GetHashCode();
                    if (GatewayOrderId != null)
                    hashCode = hashCode * 59 + GatewayOrderId.GetHashCode();
                    if (SecondReferenceId != null)
                    hashCode = hashCode * 59 + SecondReferenceId.GetHashCode();
                    if (GatewayOptions != null)
                    hashCode = hashCode * 59 + GatewayOptions.GetHashCode();
                    if (StatementDescriptor != null)
                    hashCode = hashCode * 59 + StatementDescriptor.GetHashCode();
                    if (StatementDescriptorPhone != null)
                    hashCode = hashCode * 59 + StatementDescriptorPhone.GetHashCode();
                    if (External != null)
                    hashCode = hashCode * 59 + External.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (AmountApplied != null)
                    hashCode = hashCode * 59 + AmountApplied.GetHashCode();
                    if (RemainingBalance != null)
                    hashCode = hashCode * 59 + RemainingBalance.GetHashCode();
                    if (AmountRefunded != null)
                    hashCode = hashCode * 59 + AmountRefunded.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (PayoutId != null)
                    hashCode = hashCode * 59 + PayoutId.GetHashCode();
                    if (PaymentNumber != null)
                    hashCode = hashCode * 59 + PaymentNumber.GetHashCode();
                    if (GatewayResponseCode != null)
                    hashCode = hashCode * 59 + GatewayResponseCode.GetHashCode();
                    if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                    if (GatewayResponse != null)
                    hashCode = hashCode * 59 + GatewayResponse.GetHashCode();
                    if (GatewayReconciliationStatus != null)
                    hashCode = hashCode * 59 + GatewayReconciliationStatus.GetHashCode();
                    if (GatewayReconciliationReason != null)
                    hashCode = hashCode * 59 + GatewayReconciliationReason.GetHashCode();
                    if (GatewayState != null)
                    hashCode = hashCode * 59 + GatewayState.GetHashCode();
                    if (AppliedTo != null)
                    hashCode = hashCode * 59 + AppliedTo.GetHashCode();
                    if (PaymentScheduleItems != null)
                    hashCode = hashCode * 59 + PaymentScheduleItems.GetHashCode();
                    if (StateTransitions != null)
                    hashCode = hashCode * 59 + StateTransitions.GetHashCode();
                    if (GatewayStateTransitions != null)
                    hashCode = hashCode * 59 + GatewayStateTransitions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Payment left, Payment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payment left, Payment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
