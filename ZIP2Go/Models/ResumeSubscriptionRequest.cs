/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// Behavior of the paused subscription when it resumes.
    /// </summary>
    [DataContract]
    public partial class ResumeSubscriptionRequest : IEquatable<ResumeSubscriptionRequest>
    { 
        /// <summary>
        /// If this field is set to &#x60;true&#x60;, the subscription term is extended by the length of time the subscription is paused.
        /// </summary>
        /// <value>If this field is set to &#x60;true&#x60;, the subscription term is extended by the length of time the subscription is paused.</value>

        [DataMember(Name="extend_term")]
        public bool? ExtendTerm { get; set; }

        /// <summary>
        /// Date on which the paused subscription is resumed.
        /// </summary>
        /// <value>Date on which the paused subscription is resumed.</value>

        [DataMember(Name="resume_date")]
        public string ResumeDate { get; set; }

        /// <summary>
        /// You can use this field to resume a paused subscription from the pause date.
        /// </summary>
        /// <value>You can use this field to resume a paused subscription from the pause date.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResumeAtEnum
        {
            /// <summary>
            /// Enum PauseDateEnum for pause_date
            /// </summary>
            [EnumMember(Value = "pause_date")]
            PauseDateEnum = 0        }

        /// <summary>
        /// You can use this field to resume a paused subscription from the pause date.
        /// </summary>
        /// <value>You can use this field to resume a paused subscription from the pause date.</value>

        [DataMember(Name="resume_at")]
        public ResumeAtEnum? ResumeAt { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResumeSubscriptionRequest {\n");
            sb.Append("  ExtendTerm: ").Append(ExtendTerm).Append("\n");
            sb.Append("  ResumeDate: ").Append(ResumeDate).Append("\n");
            sb.Append("  ResumeAt: ").Append(ResumeAt).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResumeSubscriptionRequest)obj);
        }

        /// <summary>
        /// Returns true if ResumeSubscriptionRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ResumeSubscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResumeSubscriptionRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExtendTerm == other.ExtendTerm ||
                    ExtendTerm != null &&
                    ExtendTerm.Equals(other.ExtendTerm)
                ) && 
                (
                    ResumeDate == other.ResumeDate ||
                    ResumeDate != null &&
                    ResumeDate.Equals(other.ResumeDate)
                ) && 
                (
                    ResumeAt == other.ResumeAt ||
                    ResumeAt != null &&
                    ResumeAt.Equals(other.ResumeAt)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExtendTerm != null)
                    hashCode = hashCode * 59 + ExtendTerm.GetHashCode();
                    if (ResumeDate != null)
                    hashCode = hashCode * 59 + ResumeDate.GetHashCode();
                    if (ResumeAt != null)
                    hashCode = hashCode * 59 + ResumeAt.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResumeSubscriptionRequest left, ResumeSubscriptionRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResumeSubscriptionRequest left, ResumeSubscriptionRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
