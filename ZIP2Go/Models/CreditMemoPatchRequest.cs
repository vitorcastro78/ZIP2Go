/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreditMemoPatchRequest : IEquatable<CreditMemoPatchRequest>
    { 
        /// <summary>
        /// Whether to automatically apply the billing document upon posting.
        /// </summary>
        /// <value>Whether to automatically apply the billing document upon posting.</value>

        [DataMember(Name="apply")]
        public bool? Apply { get; set; }

        /// <summary>
        /// The date when the credit memo is applied
        /// </summary>
        /// <value>The date when the credit memo is applied</value>

        [DataMember(Name="document_date")]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// Reason for issuing this credit memo
        /// </summary>
        /// <value>Reason for issuing this credit memo</value>

        [DataMember(Name="reason_code")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Whether to transfer to an external accounting system.
        /// </summary>
        /// <value>Whether to transfer to an external accounting system.</value>

        [DataMember(Name="transfer_to_accounting")]
        public bool? TransferToAccounting { get; set; }

        /// <summary>
        /// Indicates whether to exclude this credit memo from the rule of automatically applying it to invoices.
        /// </summary>
        /// <value>Indicates whether to exclude this credit memo from the rule of automatically applying it to invoices.</value>

        [DataMember(Name="exclude_from_auto_apply_rules")]
        public bool? ExcludeFromAutoApplyRules { get; set; }

        /// <summary>
        /// An arbitrary string associated with the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string associated with the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditMemoPatchRequest {\n");
            sb.Append("  Apply: ").Append(Apply).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  TransferToAccounting: ").Append(TransferToAccounting).Append("\n");
            sb.Append("  ExcludeFromAutoApplyRules: ").Append(ExcludeFromAutoApplyRules).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditMemoPatchRequest)obj);
        }

        /// <summary>
        /// Returns true if CreditMemoPatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditMemoPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditMemoPatchRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Apply == other.Apply ||
                    Apply != null &&
                    Apply.Equals(other.Apply)
                ) && 
                (
                    DocumentDate == other.DocumentDate ||
                    DocumentDate != null &&
                    DocumentDate.Equals(other.DocumentDate)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    TransferToAccounting == other.TransferToAccounting ||
                    TransferToAccounting != null &&
                    TransferToAccounting.Equals(other.TransferToAccounting)
                ) && 
                (
                    ExcludeFromAutoApplyRules == other.ExcludeFromAutoApplyRules ||
                    ExcludeFromAutoApplyRules != null &&
                    ExcludeFromAutoApplyRules.Equals(other.ExcludeFromAutoApplyRules)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Apply != null)
                    hashCode = hashCode * 59 + Apply.GetHashCode();
                    if (DocumentDate != null)
                    hashCode = hashCode * 59 + DocumentDate.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (TransferToAccounting != null)
                    hashCode = hashCode * 59 + TransferToAccounting.GetHashCode();
                    if (ExcludeFromAutoApplyRules != null)
                    hashCode = hashCode * 59 + ExcludeFromAutoApplyRules.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreditMemoPatchRequest left, CreditMemoPatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditMemoPatchRequest left, CreditMemoPatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
