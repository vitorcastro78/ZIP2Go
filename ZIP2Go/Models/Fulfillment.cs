/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Fulfillment : IEquatable<Fulfillment>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOffulfillmentCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// The unique identifier of the associated order line item.
        /// </summary>
        /// <value>The unique identifier of the associated order line item.</value>

        [DataMember(Name="order_line_item_id")]
        public string OrderLineItemId { get; set; }

        /// <summary>
        /// Human-readable identifier for the object. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier for the object. It can be user-supplied.</value>

        [DataMember(Name="fulfillment_number")]
        public string FulfillmentNumber { get; set; }

        /// <summary>
        /// The date of the fulfillment.
        /// </summary>
        /// <value>The date of the fulfillment.</value>

        [DataMember(Name="fulfillment_date")]
        public DateTime? FulfillmentDate { get; set; }

        /// <summary>
        /// The type of fulfillment.
        /// </summary>
        /// <value>The type of fulfillment.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DeliveryEnum for delivery
            /// </summary>
            [EnumMember(Value = "delivery")]
            DeliveryEnum = 0,
            /// <summary>
            /// Enum ReturnEnum for return
            /// </summary>
            [EnumMember(Value = "return")]
            ReturnEnum = 1        }

        /// <summary>
        /// The type of fulfillment.
        /// </summary>
        /// <value>The type of fulfillment.</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// The number of units of this item.
        /// </summary>
        /// <value>The number of units of this item.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// The status of the invoice.
        /// </summary>
        /// <value>The status of the invoice.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum AcceptedEnum for accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            AcceptedEnum = 0,
            /// <summary>
            /// Enum BookedEnum for booked
            /// </summary>
            [EnumMember(Value = "booked")]
            BookedEnum = 1,
            /// <summary>
            /// Enum SentToBillingEnum for sent_to_billing
            /// </summary>
            [EnumMember(Value = "sent_to_billing")]
            SentToBillingEnum = 2,
            /// <summary>
            /// Enum CompleteEnum for complete
            /// </summary>
            [EnumMember(Value = "complete")]
            CompleteEnum = 3,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 4        }

        /// <summary>
        /// The status of the invoice.
        /// </summary>
        /// <value>The status of the invoice.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// All order line items associated with this fulfillment that were unbilled on or before this date are included in future bill runs.
        /// </summary>
        /// <value>All order line items associated with this fulfillment that were unbilled on or before this date are included in future bill runs.</value>

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The tracking number of the fulfillment.
        /// </summary>
        /// <value>The tracking number of the fulfillment.</value>

        [DataMember(Name="tracking_number")]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// The name of the shipping carrier for this fulfillment.
        /// </summary>
        /// <value>The name of the shipping carrier for this fulfillment.</value>

        [DataMember(Name="carrier")]
        public string Carrier { get; set; }

        /// <summary>
        /// The fulfillment system for the fulfillment.
        /// </summary>
        /// <value>The fulfillment system for the fulfillment.</value>

        [DataMember(Name="fulfillment_system")]
        public string FulfillmentSystem { get; set; }

        /// <summary>
        /// An external identifier for the fulfillment.
        /// </summary>
        /// <value>An external identifier for the fulfillment.</value>

        [DataMember(Name="external_id")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Revenue
        /// </summary>

        [DataMember(Name="revenue")]
        public AllOffulfillmentRevenue Revenue { get; set; }

        /// <summary>
        /// The fulfillment location of the fulfillment.
        /// </summary>
        /// <value>The fulfillment location of the fulfillment.</value>

        [DataMember(Name="location")]
        public Dictionary<string, Object> Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fulfillment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  OrderLineItemId: ").Append(OrderLineItemId).Append("\n");
            sb.Append("  FulfillmentNumber: ").Append(FulfillmentNumber).Append("\n");
            sb.Append("  FulfillmentDate: ").Append(FulfillmentDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  FulfillmentSystem: ").Append(FulfillmentSystem).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Fulfillment)obj);
        }

        /// <summary>
        /// Returns true if Fulfillment instances are equal
        /// </summary>
        /// <param name="other">Instance of Fulfillment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fulfillment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    OrderLineItemId == other.OrderLineItemId ||
                    OrderLineItemId != null &&
                    OrderLineItemId.Equals(other.OrderLineItemId)
                ) && 
                (
                    FulfillmentNumber == other.FulfillmentNumber ||
                    FulfillmentNumber != null &&
                    FulfillmentNumber.Equals(other.FulfillmentNumber)
                ) && 
                (
                    FulfillmentDate == other.FulfillmentDate ||
                    FulfillmentDate != null &&
                    FulfillmentDate.Equals(other.FulfillmentDate)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    TrackingNumber == other.TrackingNumber ||
                    TrackingNumber != null &&
                    TrackingNumber.Equals(other.TrackingNumber)
                ) && 
                (
                    Carrier == other.Carrier ||
                    Carrier != null &&
                    Carrier.Equals(other.Carrier)
                ) && 
                (
                    FulfillmentSystem == other.FulfillmentSystem ||
                    FulfillmentSystem != null &&
                    FulfillmentSystem.Equals(other.FulfillmentSystem)
                ) && 
                (
                    ExternalId == other.ExternalId ||
                    ExternalId != null &&
                    ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    Revenue == other.Revenue ||
                    Revenue != null &&
                    Revenue.Equals(other.Revenue)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (OrderLineItemId != null)
                    hashCode = hashCode * 59 + OrderLineItemId.GetHashCode();
                    if (FulfillmentNumber != null)
                    hashCode = hashCode * 59 + FulfillmentNumber.GetHashCode();
                    if (FulfillmentDate != null)
                    hashCode = hashCode * 59 + FulfillmentDate.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (TrackingNumber != null)
                    hashCode = hashCode * 59 + TrackingNumber.GetHashCode();
                    if (Carrier != null)
                    hashCode = hashCode * 59 + Carrier.GetHashCode();
                    if (FulfillmentSystem != null)
                    hashCode = hashCode * 59 + FulfillmentSystem.GetHashCode();
                    if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                    if (Revenue != null)
                    hashCode = hashCode * 59 + Revenue.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Fulfillment left, Fulfillment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Fulfillment left, Fulfillment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
