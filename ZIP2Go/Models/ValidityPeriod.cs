/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ValidityPeriod : IEquatable<ValidityPeriod>
    { 
        /// <summary>
        /// Unit of measure for the prepaid balance.
        /// </summary>
        /// <value>Unit of measure for the prepaid balance.</value>

        [DataMember(Name="prepaid_UOM")]
        public string PrepaidUOM { get; set; }

        /// <summary>
        /// Start date of the fund effective period.
        /// </summary>
        /// <value>Start date of the fund effective period.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End date of the fund effective period.
        /// </summary>
        /// <value>End date of the fund effective period.</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The funded balance, which is the total units of the fund. 
        /// </summary>
        /// <value>The funded balance, which is the total units of the fund. </value>

        [DataMember(Name="total_balance")]
        public decimal? TotalBalance { get; set; }

        /// <summary>
        /// Remaining balance on the fund, which is the remaining units of the fund. 
        /// </summary>
        /// <value>Remaining balance on the fund, which is the remaining units of the fund. </value>

        [DataMember(Name="remaining_balance")]
        public decimal? RemainingBalance { get; set; }

        /// <summary>
        /// Gets or Sets OverageRatedAmount
        /// </summary>

        [DataMember(Name="overage_rated_amount")]
        public decimal? OverageRatedAmount { get; set; }

        /// <summary>
        /// Gets or Sets OverageRatedQuantity
        /// </summary>

        [DataMember(Name="overage_rated_quantity")]
        public decimal? OverageRatedQuantity { get; set; }

        /// <summary>
        /// An array of prepaid balance transactions for a specific validity period
        /// </summary>
        /// <value>An array of prepaid balance transactions for a specific validity period</value>

        [DataMember(Name="transactions")]
        public List<PrepaidBalanceTransaction> Transactions { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidityPeriod {\n");
            sb.Append("  PrepaidUOM: ").Append(PrepaidUOM).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TotalBalance: ").Append(TotalBalance).Append("\n");
            sb.Append("  RemainingBalance: ").Append(RemainingBalance).Append("\n");
            sb.Append("  OverageRatedAmount: ").Append(OverageRatedAmount).Append("\n");
            sb.Append("  OverageRatedQuantity: ").Append(OverageRatedQuantity).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValidityPeriod)obj);
        }

        /// <summary>
        /// Returns true if ValidityPeriod instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidityPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidityPeriod other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PrepaidUOM == other.PrepaidUOM ||
                    PrepaidUOM != null &&
                    PrepaidUOM.Equals(other.PrepaidUOM)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    TotalBalance == other.TotalBalance ||
                    TotalBalance != null &&
                    TotalBalance.Equals(other.TotalBalance)
                ) && 
                (
                    RemainingBalance == other.RemainingBalance ||
                    RemainingBalance != null &&
                    RemainingBalance.Equals(other.RemainingBalance)
                ) && 
                (
                    OverageRatedAmount == other.OverageRatedAmount ||
                    OverageRatedAmount != null &&
                    OverageRatedAmount.Equals(other.OverageRatedAmount)
                ) && 
                (
                    OverageRatedQuantity == other.OverageRatedQuantity ||
                    OverageRatedQuantity != null &&
                    OverageRatedQuantity.Equals(other.OverageRatedQuantity)
                ) && 
                (
                    Transactions == other.Transactions ||
                    Transactions != null &&
                    Transactions.SequenceEqual(other.Transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PrepaidUOM != null)
                    hashCode = hashCode * 59 + PrepaidUOM.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (TotalBalance != null)
                    hashCode = hashCode * 59 + TotalBalance.GetHashCode();
                    if (RemainingBalance != null)
                    hashCode = hashCode * 59 + RemainingBalance.GetHashCode();
                    if (OverageRatedAmount != null)
                    hashCode = hashCode * 59 + OverageRatedAmount.GetHashCode();
                    if (OverageRatedQuantity != null)
                    hashCode = hashCode * 59 + OverageRatedQuantity.GetHashCode();
                    if (Transactions != null)
                    hashCode = hashCode * 59 + Transactions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ValidityPeriod left, ValidityPeriod right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValidityPeriod left, ValidityPeriod right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
