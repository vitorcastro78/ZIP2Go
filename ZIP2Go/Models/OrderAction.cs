/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderAction : IEquatable<OrderAction>
    { 
        /// <summary>
        /// Identifier of the action.
        /// </summary>
        /// <value>Identifier of the action.</value>

        [DataMember(Name="action_id")]
        public string ActionId { get; set; }

        /// <summary>
        /// The action associated with this metric.
        /// </summary>
        /// <value>The action associated with this metric.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CreateSubscriptionEnum for create_subscription
            /// </summary>
            [EnumMember(Value = "create_subscription")]
            CreateSubscriptionEnum = 0,
            /// <summary>
            /// Enum TermsEnum for terms
            /// </summary>
            [EnumMember(Value = "terms")]
            TermsEnum = 1,
            /// <summary>
            /// Enum AddSubscriptionPlanEnum for add_subscription_plan
            /// </summary>
            [EnumMember(Value = "add_subscription_plan")]
            AddSubscriptionPlanEnum = 2,
            /// <summary>
            /// Enum UpdateSubscriptionPlanEnum for update_subscription_plan
            /// </summary>
            [EnumMember(Value = "update_subscription_plan")]
            UpdateSubscriptionPlanEnum = 3,
            /// <summary>
            /// Enum RemoveSubscriptionPlanEnum for remove_subscription_plan
            /// </summary>
            [EnumMember(Value = "remove_subscription_plan")]
            RemoveSubscriptionPlanEnum = 4,
            /// <summary>
            /// Enum RenewEnum for renew
            /// </summary>
            [EnumMember(Value = "renew")]
            RenewEnum = 5,
            /// <summary>
            /// Enum CancelEnum for cancel
            /// </summary>
            [EnumMember(Value = "cancel")]
            CancelEnum = 6,
            /// <summary>
            /// Enum OwnerTransferEnum for owner_transfer
            /// </summary>
            [EnumMember(Value = "owner_transfer")]
            OwnerTransferEnum = 7,
            /// <summary>
            /// Enum PauseEnum for pause
            /// </summary>
            [EnumMember(Value = "pause")]
            PauseEnum = 8,
            /// <summary>
            /// Enum ResumeEnum for resume
            /// </summary>
            [EnumMember(Value = "resume")]
            ResumeEnum = 9,
            /// <summary>
            /// Enum ReplaceSubscriptionPlanEnum for replace_subscription_plan
            /// </summary>
            [EnumMember(Value = "replace_subscription_plan")]
            ReplaceSubscriptionPlanEnum = 10        }

        /// <summary>
        /// The action associated with this metric.
        /// </summary>
        /// <value>The action associated with this metric.</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// The sequence number of the action.
        /// </summary>
        /// <value>The sequence number of the action.</value>

        [DataMember(Name="sequence")]
        public int? Sequence { get; set; }

        /// <summary>
        /// Gets or Sets StartOn
        /// </summary>

        [DataMember(Name="start_on")]
        public StartOnResponse StartOn { get; set; }

        /// <summary>
        /// Specify this field to add new plans to the new subscription.
        /// </summary>
        /// <value>Specify this field to add new plans to the new subscription.</value>

        [DataMember(Name="subscription_plans")]
        public AllOforderActionSubscriptionPlans SubscriptionPlans { get; set; }

        /// <summary>
        /// Specify this field to add subscription plans to existing subscriptions.
        /// </summary>
        /// <value>Specify this field to add subscription plans to existing subscriptions.</value>

        [DataMember(Name="add_subscription_plan")]
        public AllOforderActionAddSubscriptionPlan AddSubscriptionPlan { get; set; }

        /// <summary>
        /// Specify this field to remove subscription plans from existing subscriptions.
        /// </summary>
        /// <value>Specify this field to remove subscription plans from existing subscriptions.</value>

        [DataMember(Name="remove_subscription_plan")]
        public AllOforderActionRemoveSubscriptionPlan RemoveSubscriptionPlan { get; set; }

        /// <summary>
        /// Specify this field to update subscription plans on the existing subscriptions.
        /// </summary>
        /// <value>Specify this field to update subscription plans on the existing subscriptions.</value>

        [DataMember(Name="update_subscription_plan")]
        public AllOforderActionUpdateSubscriptionPlan UpdateSubscriptionPlan { get; set; }

        /// <summary>
        /// Specify this field to replace existing subscription plans with new plans.
        /// </summary>
        /// <value>Specify this field to replace existing subscription plans with new plans.</value>

        [DataMember(Name="replace_subscription_plan")]
        public AllOforderActionReplaceSubscriptionPlan ReplaceSubscriptionPlan { get; set; }

        /// <summary>
        /// Specify this field to renew an existing subscription.
        /// </summary>
        /// <value>Specify this field to renew an existing subscription.</value>

        [DataMember(Name="renew")]
        public AllOforderActionRenew Renew { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>

        [DataMember(Name="terms")]
        public AllOforderActionTerms Terms { get; set; }

        /// <summary>
        /// Specify this field to cancel an existing subscription.
        /// </summary>
        /// <value>Specify this field to cancel an existing subscription.</value>

        [DataMember(Name="cancel")]
        public AllOforderActionCancel Cancel { get; set; }

        /// <summary>
        /// Specify this field to pause an existing subscription.
        /// </summary>
        /// <value>Specify this field to pause an existing subscription.</value>

        [DataMember(Name="pause")]
        public AllOforderActionPause Pause { get; set; }

        /// <summary>
        /// Specify this field to resume a paused subscription.
        /// </summary>
        /// <value>Specify this field to resume a paused subscription.</value>

        [DataMember(Name="resume")]
        public AllOforderActionResume Resume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderAction {\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  SubscriptionPlans: ").Append(SubscriptionPlans).Append("\n");
            sb.Append("  AddSubscriptionPlan: ").Append(AddSubscriptionPlan).Append("\n");
            sb.Append("  RemoveSubscriptionPlan: ").Append(RemoveSubscriptionPlan).Append("\n");
            sb.Append("  UpdateSubscriptionPlan: ").Append(UpdateSubscriptionPlan).Append("\n");
            sb.Append("  ReplaceSubscriptionPlan: ").Append(ReplaceSubscriptionPlan).Append("\n");
            sb.Append("  Renew: ").Append(Renew).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  Cancel: ").Append(Cancel).Append("\n");
            sb.Append("  Pause: ").Append(Pause).Append("\n");
            sb.Append("  Resume: ").Append(Resume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderAction)obj);
        }

        /// <summary>
        /// Returns true if OrderAction instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderAction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActionId == other.ActionId ||
                    ActionId != null &&
                    ActionId.Equals(other.ActionId)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Sequence == other.Sequence ||
                    Sequence != null &&
                    Sequence.Equals(other.Sequence)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                ) && 
                (
                    SubscriptionPlans == other.SubscriptionPlans ||
                    SubscriptionPlans != null &&
                    SubscriptionPlans.Equals(other.SubscriptionPlans)
                ) && 
                (
                    AddSubscriptionPlan == other.AddSubscriptionPlan ||
                    AddSubscriptionPlan != null &&
                    AddSubscriptionPlan.Equals(other.AddSubscriptionPlan)
                ) && 
                (
                    RemoveSubscriptionPlan == other.RemoveSubscriptionPlan ||
                    RemoveSubscriptionPlan != null &&
                    RemoveSubscriptionPlan.Equals(other.RemoveSubscriptionPlan)
                ) && 
                (
                    UpdateSubscriptionPlan == other.UpdateSubscriptionPlan ||
                    UpdateSubscriptionPlan != null &&
                    UpdateSubscriptionPlan.Equals(other.UpdateSubscriptionPlan)
                ) && 
                (
                    ReplaceSubscriptionPlan == other.ReplaceSubscriptionPlan ||
                    ReplaceSubscriptionPlan != null &&
                    ReplaceSubscriptionPlan.Equals(other.ReplaceSubscriptionPlan)
                ) && 
                (
                    Renew == other.Renew ||
                    Renew != null &&
                    Renew.Equals(other.Renew)
                ) && 
                (
                    Terms == other.Terms ||
                    Terms != null &&
                    Terms.Equals(other.Terms)
                ) && 
                (
                    Cancel == other.Cancel ||
                    Cancel != null &&
                    Cancel.Equals(other.Cancel)
                ) && 
                (
                    Pause == other.Pause ||
                    Pause != null &&
                    Pause.Equals(other.Pause)
                ) && 
                (
                    Resume == other.Resume ||
                    Resume != null &&
                    Resume.Equals(other.Resume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActionId != null)
                    hashCode = hashCode * 59 + ActionId.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Sequence != null)
                    hashCode = hashCode * 59 + Sequence.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                    if (SubscriptionPlans != null)
                    hashCode = hashCode * 59 + SubscriptionPlans.GetHashCode();
                    if (AddSubscriptionPlan != null)
                    hashCode = hashCode * 59 + AddSubscriptionPlan.GetHashCode();
                    if (RemoveSubscriptionPlan != null)
                    hashCode = hashCode * 59 + RemoveSubscriptionPlan.GetHashCode();
                    if (UpdateSubscriptionPlan != null)
                    hashCode = hashCode * 59 + UpdateSubscriptionPlan.GetHashCode();
                    if (ReplaceSubscriptionPlan != null)
                    hashCode = hashCode * 59 + ReplaceSubscriptionPlan.GetHashCode();
                    if (Renew != null)
                    hashCode = hashCode * 59 + Renew.GetHashCode();
                    if (Terms != null)
                    hashCode = hashCode * 59 + Terms.GetHashCode();
                    if (Cancel != null)
                    hashCode = hashCode * 59 + Cancel.GetHashCode();
                    if (Pause != null)
                    hashCode = hashCode * 59 + Pause.GetHashCode();
                    if (Resume != null)
                    hashCode = hashCode * 59 + Resume.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderAction left, OrderAction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderAction left, OrderAction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
