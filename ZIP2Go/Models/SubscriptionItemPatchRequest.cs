/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionItemPatchRequest : IEquatable<SubscriptionItemPatchRequest>
    { 
        /// <summary>
        /// Identifier of the subscription item.
        /// </summary>
        /// <value>Identifier of the subscription item.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Recurring
        /// </summary>

        [DataMember(Name="recurring")]
        public Recurring Recurring { get; set; }

        /// <summary>
        /// Human-readable identifier of the subscription. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription. It can be user-supplied.</value>

        [DataMember(Name="subscription_item_number")]
        public string SubscriptionItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The date when the subscription item starts
        /// </summary>
        /// <value>The date when the subscription item starts</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The date when the subscription item ends or ended.
        /// </summary>
        /// <value>The date when the subscription item ends or ended.</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets ApplyDiscountTo
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ApplyDiscountToEnum
        {
            /// <summary>
            /// Enum OneTimeEnum for one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            OneTimeEnum = 0,
            /// <summary>
            /// Enum RecurringEnum for recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            RecurringEnum = 1,
            /// <summary>
            /// Enum UsageEnum for usage
            /// </summary>
            [EnumMember(Value = "usage")]
            UsageEnum = 2        }

        /// <summary>
        /// Any combination of one-time, recurring, or usage prices.
        /// </summary>
        /// <value>Any combination of one-time, recurring, or usage prices.</value>

        [DataMember(Name="apply_discount_to")]
        public List<ApplyDiscountToEnum> ApplyDiscountTo { get; set; }

        /// <summary>
        /// Specifies at what level a discount should be applied.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DiscountLevelEnum
        {
            /// <summary>
            /// Enum AccountEnum for account
            /// </summary>
            [EnumMember(Value = "account")]
            AccountEnum = 0,
            /// <summary>
            /// Enum SubscriptionEnum for subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            SubscriptionEnum = 1,
            /// <summary>
            /// Enum PlanEnum for plan
            /// </summary>
            [EnumMember(Value = "plan")]
            PlanEnum = 2        }

        /// <summary>
        /// Specifies at what level a discount should be applied.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied.</value>

        [DataMember(Name="discount_level")]
        public DiscountLevelEnum? DiscountLevel { get; set; }

        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StartEventEnum
        {
            /// <summary>
            /// Enum ContractEffectiveEnum for contract_effective
            /// </summary>
            [EnumMember(Value = "contract_effective")]
            ContractEffectiveEnum = 0,
            /// <summary>
            /// Enum ServiceActivationEnum for service_activation
            /// </summary>
            [EnumMember(Value = "service_activation")]
            ServiceActivationEnum = 1,
            /// <summary>
            /// Enum CustomerAcceptanceEnum for customer_acceptance
            /// </summary>
            [EnumMember(Value = "customer_acceptance")]
            CustomerAcceptanceEnum = 2,
            /// <summary>
            /// Enum SpecificDateEnum for specific_date
            /// </summary>
            [EnumMember(Value = "specific_date")]
            SpecificDateEnum = 3        }

        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>

        [DataMember(Name="start_event")]
        public StartEventEnum? StartEvent { get; set; }

        /// <summary>
        /// Discount percent. Specify this field if you want to override with a discount-based discount price.
        /// </summary>
        /// <value>Discount percent. Specify this field if you want to override with a discount-based discount price.</value>

        [DataMember(Name="discount_percent")]
        public decimal? DiscountPercent { get; set; }

        /// <summary>
        /// Quantity of the product to which your customers subscribe.
        /// </summary>
        /// <value>Quantity of the product to which your customers subscribe.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// The amount of the price. Specify this field if you want to override the original price with a flat-fee price
        /// </summary>
        /// <value>The amount of the price. Specify this field if you want to override the original price with a flat-fee price</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The unit amount of the price. Specify this field if you want to override the orignial price with a per-unit price.
        /// </summary>
        /// <value>The unit amount of the price. Specify this field if you want to override the orignial price with a per-unit price.</value>

        [DataMember(Name="unit_amount")]
        public decimal? UnitAmount { get; set; }

        /// <summary>
        /// Information of all tiers if you want to override the original price with a tiered price.
        /// </summary>
        /// <value>Information of all tiers if you want to override the original price with a tiered price.</value>

        [DataMember(Name="tiers")]
        public List<ItemTier> Tiers { get; set; }

        /// <summary>
        /// Gets or Sets Overage
        /// </summary>

        [DataMember(Name="overage")]
        public Overage Overage { get; set; }

        /// <summary>
        /// Unique identifier for the price. This identifier enables you to refer to the price before the price has an internal identifier in Zuora.
        /// </summary>
        /// <value>Unique identifier for the price. This identifier enables you to refer to the price before the price has an internal identifier in Zuora.</value>

        [DataMember(Name="unique_token")]
        public string UniqueToken { get; set; }

        /// <summary>
        /// Gets or Sets Prepayment
        /// </summary>

        [DataMember(Name="prepayment")]
        public SubscriptionItemPrepaymentField Prepayment { get; set; }

        /// <summary>
        /// Name of the custom field that will be used to set a per unit rate under the &#x60;Pre-Rated Per Unit&#x60; charge model 
        /// </summary>
        /// <value>Name of the custom field that will be used to set a per unit rate under the &#x60;Pre-Rated Per Unit&#x60; charge model </value>

        [DataMember(Name="custom_field_per_unit_rate")]
        public string CustomFieldPerUnitRate { get; set; }

        /// <summary>
        /// Name of the custom field that will be used to set a total amount under the &#x60;Pre-Rated&#x60; charge model 
        /// </summary>
        /// <value>Name of the custom field that will be used to set a total amount under the &#x60;Pre-Rated&#x60; charge model </value>

        [DataMember(Name="custom_field_total_amount")]
        public string CustomFieldTotalAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionItemPatchRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  SubscriptionItemNumber: ").Append(SubscriptionItemNumber).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ApplyDiscountTo: ").Append(ApplyDiscountTo).Append("\n");
            sb.Append("  DiscountLevel: ").Append(DiscountLevel).Append("\n");
            sb.Append("  StartEvent: ").Append(StartEvent).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  Tiers: ").Append(Tiers).Append("\n");
            sb.Append("  Overage: ").Append(Overage).Append("\n");
            sb.Append("  UniqueToken: ").Append(UniqueToken).Append("\n");
            sb.Append("  Prepayment: ").Append(Prepayment).Append("\n");
            sb.Append("  CustomFieldPerUnitRate: ").Append(CustomFieldPerUnitRate).Append("\n");
            sb.Append("  CustomFieldTotalAmount: ").Append(CustomFieldTotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionItemPatchRequest)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionItemPatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionItemPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionItemPatchRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Recurring == other.Recurring ||
                    Recurring != null &&
                    Recurring.Equals(other.Recurring)
                ) && 
                (
                    SubscriptionItemNumber == other.SubscriptionItemNumber ||
                    SubscriptionItemNumber != null &&
                    SubscriptionItemNumber.Equals(other.SubscriptionItemNumber)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    ApplyDiscountTo == other.ApplyDiscountTo ||
                    ApplyDiscountTo != null &&
                    ApplyDiscountTo.SequenceEqual(other.ApplyDiscountTo)
                ) && 
                (
                    DiscountLevel == other.DiscountLevel ||
                    DiscountLevel != null &&
                    DiscountLevel.Equals(other.DiscountLevel)
                ) && 
                (
                    StartEvent == other.StartEvent ||
                    StartEvent != null &&
                    StartEvent.Equals(other.StartEvent)
                ) && 
                (
                    DiscountPercent == other.DiscountPercent ||
                    DiscountPercent != null &&
                    DiscountPercent.Equals(other.DiscountPercent)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    UnitAmount == other.UnitAmount ||
                    UnitAmount != null &&
                    UnitAmount.Equals(other.UnitAmount)
                ) && 
                (
                    Tiers == other.Tiers ||
                    Tiers != null &&
                    Tiers.SequenceEqual(other.Tiers)
                ) && 
                (
                    Overage == other.Overage ||
                    Overage != null &&
                    Overage.Equals(other.Overage)
                ) && 
                (
                    UniqueToken == other.UniqueToken ||
                    UniqueToken != null &&
                    UniqueToken.Equals(other.UniqueToken)
                ) && 
                (
                    Prepayment == other.Prepayment ||
                    Prepayment != null &&
                    Prepayment.Equals(other.Prepayment)
                ) && 
                (
                    CustomFieldPerUnitRate == other.CustomFieldPerUnitRate ||
                    CustomFieldPerUnitRate != null &&
                    CustomFieldPerUnitRate.Equals(other.CustomFieldPerUnitRate)
                ) && 
                (
                    CustomFieldTotalAmount == other.CustomFieldTotalAmount ||
                    CustomFieldTotalAmount != null &&
                    CustomFieldTotalAmount.Equals(other.CustomFieldTotalAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Recurring != null)
                    hashCode = hashCode * 59 + Recurring.GetHashCode();
                    if (SubscriptionItemNumber != null)
                    hashCode = hashCode * 59 + SubscriptionItemNumber.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (ApplyDiscountTo != null)
                    hashCode = hashCode * 59 + ApplyDiscountTo.GetHashCode();
                    if (DiscountLevel != null)
                    hashCode = hashCode * 59 + DiscountLevel.GetHashCode();
                    if (StartEvent != null)
                    hashCode = hashCode * 59 + StartEvent.GetHashCode();
                    if (DiscountPercent != null)
                    hashCode = hashCode * 59 + DiscountPercent.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (UnitAmount != null)
                    hashCode = hashCode * 59 + UnitAmount.GetHashCode();
                    if (Tiers != null)
                    hashCode = hashCode * 59 + Tiers.GetHashCode();
                    if (Overage != null)
                    hashCode = hashCode * 59 + Overage.GetHashCode();
                    if (UniqueToken != null)
                    hashCode = hashCode * 59 + UniqueToken.GetHashCode();
                    if (Prepayment != null)
                    hashCode = hashCode * 59 + Prepayment.GetHashCode();
                    if (CustomFieldPerUnitRate != null)
                    hashCode = hashCode * 59 + CustomFieldPerUnitRate.GetHashCode();
                    if (CustomFieldTotalAmount != null)
                    hashCode = hashCode * 59 + CustomFieldTotalAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionItemPatchRequest left, SubscriptionItemPatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionItemPatchRequest left, SubscriptionItemPatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
