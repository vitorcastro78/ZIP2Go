/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// If the &#x60;type&#x60; of the payment method is &#x60;apple_pay&#x60;, this hash contains details about the Apple Pay payment method. See [Supported payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/A_Supported_Payment_Methods) for payment gateways that support this type of payment method.
    /// </summary>
    [DataContract]
    public partial class ApplePayCreate : IEquatable<ApplePayCreate>
    { 
        /// <summary>
        /// The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center.
        /// </summary>
        /// <value>The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.
        /// </summary>
        /// <value>The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.</value>
        [Required]

        [DataMember(Name="customer_token")]
        public Dictionary<string, Object> CustomerToken { get; set; }

        /// <summary>
        /// A boolean flag to control whether a payment should be processed       after creating payment method. The payment amount will be equivalent to       the amount the merchant supplied in the ApplePay session. Default is false.        If this field is set to &#x60;true&#x60;, you must specify the &#x60;gateway_id&#x60;       field with the payment gateway instance name.  If this field is set       to &#x60;false&#x60;:   - The default payment gateway of your Zuora customer account       will be used no matter whether a payment gateway instance is specified       in the &#x60;gateway_id&#x60; field.    - You must select the **Verify new       credit card** check box on the gateway instance settings page. Otherwise,       the cryptogram will not be sent to the gateway.   - A separate subscribe       or payment API call is required after this payment method creation call. 
        /// </summary>
        /// <value>A boolean flag to control whether a payment should be processed       after creating payment method. The payment amount will be equivalent to       the amount the merchant supplied in the ApplePay session. Default is false.        If this field is set to &#x60;true&#x60;, you must specify the &#x60;gateway_id&#x60;       field with the payment gateway instance name.  If this field is set       to &#x60;false&#x60;:   - The default payment gateway of your Zuora customer account       will be used no matter whether a payment gateway instance is specified       in the &#x60;gateway_id&#x60; field.    - You must select the **Verify new       credit card** check box on the gateway instance settings page. Otherwise,       the cryptogram will not be sent to the gateway.   - A separate subscribe       or payment API call is required after this payment method creation call. </value>

        [DataMember(Name="collect_payment")]
        public bool? CollectPayment { get; set; }

        /// <summary>
        /// The id of invoice this payment will apply to.      Note: When &#x60;collect_payment&#x60; is true, this field is required.      Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set collect_payment to false and use [Create Payment](#operation/createPayment) API separately.
        /// </summary>
        /// <value>The id of invoice this payment will apply to.      Note: When &#x60;collect_payment&#x60; is true, this field is required.      Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set collect_payment to false and use [Create Payment](#operation/createPayment) API separately.</value>

        [DataMember(Name="invoice_id")]
        public string InvoiceId { get; set; }

        /// <summary>
        /// Gets or Sets Mandate
        /// </summary>

        [DataMember(Name="mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplePayCreate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerToken: ").Append(CustomerToken).Append("\n");
            sb.Append("  CollectPayment: ").Append(CollectPayment).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Mandate: ").Append(Mandate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApplePayCreate)obj);
        }

        /// <summary>
        /// Returns true if ApplePayCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplePayCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplePayCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CustomerToken == other.CustomerToken ||
                    CustomerToken != null &&
                    CustomerToken.SequenceEqual(other.CustomerToken)
                ) && 
                (
                    CollectPayment == other.CollectPayment ||
                    CollectPayment != null &&
                    CollectPayment.Equals(other.CollectPayment)
                ) && 
                (
                    InvoiceId == other.InvoiceId ||
                    InvoiceId != null &&
                    InvoiceId.Equals(other.InvoiceId)
                ) && 
                (
                    Mandate == other.Mandate ||
                    Mandate != null &&
                    Mandate.Equals(other.Mandate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CustomerToken != null)
                    hashCode = hashCode * 59 + CustomerToken.GetHashCode();
                    if (CollectPayment != null)
                    hashCode = hashCode * 59 + CollectPayment.GetHashCode();
                    if (InvoiceId != null)
                    hashCode = hashCode * 59 + InvoiceId.GetHashCode();
                    if (Mandate != null)
                    hashCode = hashCode * 59 + Mandate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApplePayCreate left, ApplePayCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApplePayCreate left, ApplePayCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
