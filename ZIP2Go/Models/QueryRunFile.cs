/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// The file object representing the results of the query.
    /// </summary>
    [DataContract]
    public partial class QueryRunFile : IEquatable<QueryRunFile>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// The URL from which the file can be downloaded
        /// </summary>
        /// <value>The URL from which the file can be downloaded</value>

        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// The type of the file returned.
        /// </summary>
        /// <value>The type of the file returned.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum JsonEnum for json
            /// </summary>
            [EnumMember(Value = "json")]
            JsonEnum = 0,
            /// <summary>
            /// Enum JsonlEnum for jsonl
            /// </summary>
            [EnumMember(Value = "jsonl")]
            JsonlEnum = 1,
            /// <summary>
            /// Enum CsvEnum for csv
            /// </summary>
            [EnumMember(Value = "csv")]
            CsvEnum = 2,
            /// <summary>
            /// Enum TsvEnum for tsv
            /// </summary>
            [EnumMember(Value = "tsv")]
            TsvEnum = 3,
            /// <summary>
            /// Enum DsvEnum for dsv
            /// </summary>
            [EnumMember(Value = "dsv")]
            DsvEnum = 4        }

        /// <summary>
        /// The type of the file returned.
        /// </summary>
        /// <value>The type of the file returned.</value>

        [DataMember(Name="content_type")]
        public ContentTypeEnum? ContentType { get; set; }

        /// <summary>
        /// The type of file.
        /// </summary>
        /// <value>The type of file.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum QueryRunEnum for query_run
            /// </summary>
            [EnumMember(Value = "query_run")]
            QueryRunEnum = 0        }

        /// <summary>
        /// The type of file.
        /// </summary>
        /// <value>The type of file.</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryRunFile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QueryRunFile)obj);
        }

        /// <summary>
        /// Returns true if QueryRunFile instances are equal
        /// </summary>
        /// <param name="other">Instance of QueryRunFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryRunFile other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QueryRunFile left, QueryRunFile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QueryRunFile left, QueryRunFile right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
