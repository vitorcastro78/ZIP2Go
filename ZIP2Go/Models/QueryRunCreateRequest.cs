/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QueryRunCreateRequest : IEquatable<QueryRunCreateRequest>
    { 
        /// <summary>
        /// The character used as delimiter to separate values in the output file.
        /// </summary>
        /// <value>The character used as delimiter to separate values in the output file.</value>

        [DataMember(Name="column_separator")]
        public string ColumnSeparator { get; set; }

        /// <summary>
        /// If supplied, Zuora with compress the output file using the specified compression algorithm.
        /// </summary>
        /// <value>If supplied, Zuora with compress the output file using the specified compression algorithm.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContentEncodingEnum
        {
            /// <summary>
            /// Enum GzipEnum for gzip
            /// </summary>
            [EnumMember(Value = "gzip")]
            GzipEnum = 0,
            /// <summary>
            /// Enum ZipEnum for zip
            /// </summary>
            [EnumMember(Value = "zip")]
            ZipEnum = 1,
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 2        }

        /// <summary>
        /// If supplied, Zuora with compress the output file using the specified compression algorithm.
        /// </summary>
        /// <value>If supplied, Zuora with compress the output file using the specified compression algorithm.</value>

        [DataMember(Name="content_encoding")]
        public ContentEncodingEnum? ContentEncoding { get; set; }

        /// <summary>
        /// Base64-encoded public key of a 1024-bit RSA key-pair. If you set this field, Zuora will encrypt the query results using the provided public key. You must use the corresponding private key to decrypt the query results.
        /// </summary>
        /// <value>Base64-encoded public key of a 1024-bit RSA key-pair. If you set this field, Zuora will encrypt the query results using the provided public key. You must use the corresponding private key to decrypt the query results.</value>

        [DataMember(Name="encryption_key")]
        public string EncryptionKey { get; set; }

        /// <summary>
        /// The type of the file returned.
        /// </summary>
        /// <value>The type of the file returned.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum JsonEnum for json
            /// </summary>
            [EnumMember(Value = "json")]
            JsonEnum = 0,
            /// <summary>
            /// Enum CsvEnum for csv
            /// </summary>
            [EnumMember(Value = "csv")]
            CsvEnum = 1,
            /// <summary>
            /// Enum TsvEnum for tsv
            /// </summary>
            [EnumMember(Value = "tsv")]
            TsvEnum = 2,
            /// <summary>
            /// Enum DsvEnum for dsv
            /// </summary>
            [EnumMember(Value = "dsv")]
            DsvEnum = 3        }

        /// <summary>
        /// The type of the file returned.
        /// </summary>
        /// <value>The type of the file returned.</value>
        [Required]

        [DataMember(Name="content_type")]
        public ContentTypeEnum? ContentType { get; set; }

        /// <summary>
        /// The SQL statement of the query.
        /// </summary>
        /// <value>The SQL statement of the query.</value>
        [Required]

        [DataMember(Name="sql")]
        public string Sql { get; set; }

        /// <summary>
        /// If set to &#x60;true&#x60;, any deleted records are included in the response.
        /// </summary>
        /// <value>If set to &#x60;true&#x60;, any deleted records are included in the response.</value>

        [DataMember(Name="read_deleted")]
        public bool? ReadDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryRunCreateRequest {\n");
            sb.Append("  ColumnSeparator: ").Append(ColumnSeparator).Append("\n");
            sb.Append("  ContentEncoding: ").Append(ContentEncoding).Append("\n");
            sb.Append("  EncryptionKey: ").Append(EncryptionKey).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Sql: ").Append(Sql).Append("\n");
            sb.Append("  ReadDeleted: ").Append(ReadDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QueryRunCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if QueryRunCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of QueryRunCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryRunCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ColumnSeparator == other.ColumnSeparator ||
                    ColumnSeparator != null &&
                    ColumnSeparator.Equals(other.ColumnSeparator)
                ) && 
                (
                    ContentEncoding == other.ContentEncoding ||
                    ContentEncoding != null &&
                    ContentEncoding.Equals(other.ContentEncoding)
                ) && 
                (
                    EncryptionKey == other.EncryptionKey ||
                    EncryptionKey != null &&
                    EncryptionKey.Equals(other.EncryptionKey)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    Sql == other.Sql ||
                    Sql != null &&
                    Sql.Equals(other.Sql)
                ) && 
                (
                    ReadDeleted == other.ReadDeleted ||
                    ReadDeleted != null &&
                    ReadDeleted.Equals(other.ReadDeleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ColumnSeparator != null)
                    hashCode = hashCode * 59 + ColumnSeparator.GetHashCode();
                    if (ContentEncoding != null)
                    hashCode = hashCode * 59 + ContentEncoding.GetHashCode();
                    if (EncryptionKey != null)
                    hashCode = hashCode * 59 + EncryptionKey.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (Sql != null)
                    hashCode = hashCode * 59 + Sql.GetHashCode();
                    if (ReadDeleted != null)
                    hashCode = hashCode * 59 + ReadDeleted.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QueryRunCreateRequest left, QueryRunCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QueryRunCreateRequest left, QueryRunCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
