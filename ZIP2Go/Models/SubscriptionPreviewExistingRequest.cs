/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewExistingRequest : IEquatable<SubscriptionPreviewExistingRequest>
    { 
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Description of the subscription.
        /// </summary>
        /// <value>Description of the subscription.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountData
        /// </summary>

        [DataMember(Name="account_data")]
        public SubscriptionPreviewAccountRequest AccountData { get; set; }

        /// <summary>
        /// Specifies how many billing periods you want to preview.
        /// </summary>
        /// <value>Specifies how many billing periods you want to preview.</value>

        [DataMember(Name="number_of_periods")]
        public int? NumberOfPeriods { get; set; }

        /// <summary>
        /// Indicates whether to preview the subscription till the end of the current term.
        /// </summary>
        /// <value>Indicates whether to preview the subscription till the end of the current term.</value>

        [DataMember(Name="term_end")]
        public bool? TermEnd { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MetricsEnum
        {
            /// <summary>
            /// Enum BillingDocumentsEnum for billing_documents
            /// </summary>
            [EnumMember(Value = "billing_documents")]
            BillingDocumentsEnum = 0,
            /// <summary>
            /// Enum DeltaMetricsEnum for delta_metrics
            /// </summary>
            [EnumMember(Value = "delta_metrics")]
            DeltaMetricsEnum = 1        }

        /// <summary>
        /// Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both.
        /// </summary>
        /// <value>Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both.</value>

        [DataMember(Name="metrics")]
        public List<MetricsEnum> Metrics { get; set; }

        /// <summary>
        /// End date of the period for which you want to preview the subscription
        /// </summary>
        /// <value>End date of the period for which you want to preview the subscription</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Specify this field if you want to add one or multiple subscription plans to this subscription.
        /// </summary>
        /// <value>Specify this field if you want to add one or multiple subscription plans to this subscription.</value>

        [DataMember(Name="add_subscription_plans")]
        public List<SubscriptionAddPlanPatchRequest> AddSubscriptionPlans { get; set; }

        /// <summary>
        /// Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. 
        /// </summary>
        /// <value>Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. </value>

        [DataMember(Name="replace_subscription_plans")]
        public List<SubscriptionReplacePlanPatchRequest> ReplaceSubscriptionPlans { get; set; }

        /// <summary>
        /// Gets or Sets UpdateSubscriptionPlans
        /// </summary>

        [DataMember(Name="update_subscription_plans")]
        public List<SubscriptionUpdatePlanPatchRequest> UpdateSubscriptionPlans { get; set; }

        /// <summary>
        /// Specify this field if you want to remove one or multiple subscription plans from this subscription.
        /// </summary>
        /// <value>Specify this field if you want to remove one or multiple subscription plans from this subscription.</value>

        [DataMember(Name="remove_subscription_plans")]
        public List<SubscriptionRemovePlanPatchRequest> RemoveSubscriptionPlans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewExistingRequest {\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountData: ").Append(AccountData).Append("\n");
            sb.Append("  NumberOfPeriods: ").Append(NumberOfPeriods).Append("\n");
            sb.Append("  TermEnd: ").Append(TermEnd).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AddSubscriptionPlans: ").Append(AddSubscriptionPlans).Append("\n");
            sb.Append("  ReplaceSubscriptionPlans: ").Append(ReplaceSubscriptionPlans).Append("\n");
            sb.Append("  UpdateSubscriptionPlans: ").Append(UpdateSubscriptionPlans).Append("\n");
            sb.Append("  RemoveSubscriptionPlans: ").Append(RemoveSubscriptionPlans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionPreviewExistingRequest)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewExistingRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPreviewExistingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewExistingRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    AccountData == other.AccountData ||
                    AccountData != null &&
                    AccountData.Equals(other.AccountData)
                ) && 
                (
                    NumberOfPeriods == other.NumberOfPeriods ||
                    NumberOfPeriods != null &&
                    NumberOfPeriods.Equals(other.NumberOfPeriods)
                ) && 
                (
                    TermEnd == other.TermEnd ||
                    TermEnd != null &&
                    TermEnd.Equals(other.TermEnd)
                ) && 
                (
                    Metrics == other.Metrics ||
                    Metrics != null &&
                    Metrics.SequenceEqual(other.Metrics)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    AddSubscriptionPlans == other.AddSubscriptionPlans ||
                    AddSubscriptionPlans != null &&
                    AddSubscriptionPlans.SequenceEqual(other.AddSubscriptionPlans)
                ) && 
                (
                    ReplaceSubscriptionPlans == other.ReplaceSubscriptionPlans ||
                    ReplaceSubscriptionPlans != null &&
                    ReplaceSubscriptionPlans.SequenceEqual(other.ReplaceSubscriptionPlans)
                ) && 
                (
                    UpdateSubscriptionPlans == other.UpdateSubscriptionPlans ||
                    UpdateSubscriptionPlans != null &&
                    UpdateSubscriptionPlans.SequenceEqual(other.UpdateSubscriptionPlans)
                ) && 
                (
                    RemoveSubscriptionPlans == other.RemoveSubscriptionPlans ||
                    RemoveSubscriptionPlans != null &&
                    RemoveSubscriptionPlans.SequenceEqual(other.RemoveSubscriptionPlans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (AccountData != null)
                    hashCode = hashCode * 59 + AccountData.GetHashCode();
                    if (NumberOfPeriods != null)
                    hashCode = hashCode * 59 + NumberOfPeriods.GetHashCode();
                    if (TermEnd != null)
                    hashCode = hashCode * 59 + TermEnd.GetHashCode();
                    if (Metrics != null)
                    hashCode = hashCode * 59 + Metrics.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (AddSubscriptionPlans != null)
                    hashCode = hashCode * 59 + AddSubscriptionPlans.GetHashCode();
                    if (ReplaceSubscriptionPlans != null)
                    hashCode = hashCode * 59 + ReplaceSubscriptionPlans.GetHashCode();
                    if (UpdateSubscriptionPlans != null)
                    hashCode = hashCode * 59 + UpdateSubscriptionPlans.GetHashCode();
                    if (RemoveSubscriptionPlans != null)
                    hashCode = hashCode * 59 + RemoveSubscriptionPlans.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionPreviewExistingRequest left, SubscriptionPreviewExistingRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionPreviewExistingRequest left, SubscriptionPreviewExistingRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
