/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccountCreateRequest : IEquatable<AccountCreateRequest>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfaccountCreateRequestCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// Human-readable identifier of the account. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the account. It can be user-supplied.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BillingDocumentSettings
        /// </summary>

        [DataMember(Name="billing_document_settings")]
        public BillingDocumentSettings BillingDocumentSettings { get; set; }

        /// <summary>
        /// The identifier of a bill run batch.
        /// </summary>
        /// <value>The identifier of a bill run batch.</value>

        [DataMember(Name="batch")]
        public string Batch { get; set; }

        /// <summary>
        /// The day of the month on which your customer will be invoiced. For month-end specify 31.
        /// </summary>
        /// <value>The day of the month on which your customer will be invoiced. For month-end specify 31.</value>

        [Range(0, 31)]
        [DataMember(Name="bill_cycle_day")]
        public int? BillCycleDay { get; set; }

        /// <summary>
        /// Customer billing address.
        /// </summary>
        /// <value>Customer billing address.</value>
        [Required]

        [DataMember(Name="bill_to")]
        public AllOfaccountCreateRequestBillTo BillTo { get; set; }

        /// <summary>
        /// Customer address used for calculating tax.
        /// </summary>
        /// <value>Customer address used for calculating tax.</value>

        [DataMember(Name="sold_to")]
        public AllOfaccountCreateRequestSoldTo SoldTo { get; set; }

        /// <summary>
        /// Identifier of the communication profile associated with this customer.
        /// </summary>
        /// <value>Identifier of the communication profile associated with this customer.</value>

        [DataMember(Name="communication_profile_id")]
        public string CommunicationProfileId { get; set; }

        /// <summary>
        /// CRM account identifier.
        /// </summary>
        /// <value>CRM account identifier.</value>

        [DataMember(Name="crm_id")]
        public string CrmId { get; set; }

        /// <summary>
        /// Identifier of the default payment method on the customer account.
        /// </summary>
        /// <value>Identifier of the default payment method on the customer account.</value>

        [DataMember(Name="default_payment_method_id")]
        public string DefaultPaymentMethodId { get; set; }

        /// <summary>
        /// The name of the customer account.
        /// </summary>
        /// <value>The name of the customer account.</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Identifier of this customer&#x27;s parent account, if any.
        /// </summary>
        /// <value>Identifier of this customer&#x27;s parent account, if any.</value>

        [DataMember(Name="parent_account_id")]
        public string ParentAccountId { get; set; }

        /// <summary>
        /// Payment gateway name.
        /// </summary>
        /// <value>Payment gateway name.</value>

        [DataMember(Name="payment_gateway")]
        public string PaymentGateway { get; set; }

        /// <summary>
        /// Payment terms configured in **Billing Settings &gt; Payment Terms** of your Zuora tenant.
        /// </summary>
        /// <value>Payment terms configured in **Billing Settings &gt; Payment Terms** of your Zuora tenant.</value>

        [DataMember(Name="payment_terms")]
        public string PaymentTerms { get; set; }

        /// <summary>
        /// The identifier or the billing document sequence set that is assigned to the customer account.
        /// </summary>
        /// <value>The identifier or the billing document sequence set that is assigned to the customer account.</value>

        [DataMember(Name="sequence_set_id")]
        public string SequenceSetId { get; set; }

        /// <summary>
        /// Controls whether future payments are automatically billed when they are due.
        /// </summary>
        /// <value>Controls whether future payments are automatically billed when they are due.</value>

        [DataMember(Name="auto_pay")]
        public bool? AutoPay { get; set; }

        /// <summary>
        /// Gets or Sets TaxCertificate
        /// </summary>

        [DataMember(Name="tax_certificate")]
        public TaxCertificate TaxCertificate { get; set; }

        /// <summary>
        /// Gets or Sets TaxIdentifier
        /// </summary>

        [DataMember(Name="tax_identifier")]
        public TaxIdentifier TaxIdentifier { get; set; }

        /// <summary>
        /// Three-letter ISO currency code. Once the currency is set for an account, it cannot be updated.
        /// </summary>
        /// <value>Three-letter ISO currency code. Once the currency is set for an account, it cannot be updated.</value>
        [Required]

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The name of the sales representative associated with this account
        /// </summary>
        /// <value>The name of the sales representative associated with this account</value>

        [DataMember(Name="sales_rep")]
        public string SalesRep { get; set; }

        /// <summary>
        /// A new payment method for the account.
        /// </summary>
        /// <value>A new payment method for the account.</value>

        [DataMember(Name="payment_method")]
        public AllOfaccountCreateRequestPaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountCreateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BillingDocumentSettings: ").Append(BillingDocumentSettings).Append("\n");
            sb.Append("  Batch: ").Append(Batch).Append("\n");
            sb.Append("  BillCycleDay: ").Append(BillCycleDay).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  SoldTo: ").Append(SoldTo).Append("\n");
            sb.Append("  CommunicationProfileId: ").Append(CommunicationProfileId).Append("\n");
            sb.Append("  CrmId: ").Append(CrmId).Append("\n");
            sb.Append("  DefaultPaymentMethodId: ").Append(DefaultPaymentMethodId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ParentAccountId: ").Append(ParentAccountId).Append("\n");
            sb.Append("  PaymentGateway: ").Append(PaymentGateway).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  SequenceSetId: ").Append(SequenceSetId).Append("\n");
            sb.Append("  AutoPay: ").Append(AutoPay).Append("\n");
            sb.Append("  TaxCertificate: ").Append(TaxCertificate).Append("\n");
            sb.Append("  TaxIdentifier: ").Append(TaxIdentifier).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SalesRep: ").Append(SalesRep).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if AccountCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    BillingDocumentSettings == other.BillingDocumentSettings ||
                    BillingDocumentSettings != null &&
                    BillingDocumentSettings.Equals(other.BillingDocumentSettings)
                ) && 
                (
                    Batch == other.Batch ||
                    Batch != null &&
                    Batch.Equals(other.Batch)
                ) && 
                (
                    BillCycleDay == other.BillCycleDay ||
                    BillCycleDay != null &&
                    BillCycleDay.Equals(other.BillCycleDay)
                ) && 
                (
                    BillTo == other.BillTo ||
                    BillTo != null &&
                    BillTo.Equals(other.BillTo)
                ) && 
                (
                    SoldTo == other.SoldTo ||
                    SoldTo != null &&
                    SoldTo.Equals(other.SoldTo)
                ) && 
                (
                    CommunicationProfileId == other.CommunicationProfileId ||
                    CommunicationProfileId != null &&
                    CommunicationProfileId.Equals(other.CommunicationProfileId)
                ) && 
                (
                    CrmId == other.CrmId ||
                    CrmId != null &&
                    CrmId.Equals(other.CrmId)
                ) && 
                (
                    DefaultPaymentMethodId == other.DefaultPaymentMethodId ||
                    DefaultPaymentMethodId != null &&
                    DefaultPaymentMethodId.Equals(other.DefaultPaymentMethodId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ParentAccountId == other.ParentAccountId ||
                    ParentAccountId != null &&
                    ParentAccountId.Equals(other.ParentAccountId)
                ) && 
                (
                    PaymentGateway == other.PaymentGateway ||
                    PaymentGateway != null &&
                    PaymentGateway.Equals(other.PaymentGateway)
                ) && 
                (
                    PaymentTerms == other.PaymentTerms ||
                    PaymentTerms != null &&
                    PaymentTerms.Equals(other.PaymentTerms)
                ) && 
                (
                    SequenceSetId == other.SequenceSetId ||
                    SequenceSetId != null &&
                    SequenceSetId.Equals(other.SequenceSetId)
                ) && 
                (
                    AutoPay == other.AutoPay ||
                    AutoPay != null &&
                    AutoPay.Equals(other.AutoPay)
                ) && 
                (
                    TaxCertificate == other.TaxCertificate ||
                    TaxCertificate != null &&
                    TaxCertificate.Equals(other.TaxCertificate)
                ) && 
                (
                    TaxIdentifier == other.TaxIdentifier ||
                    TaxIdentifier != null &&
                    TaxIdentifier.Equals(other.TaxIdentifier)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    SalesRep == other.SalesRep ||
                    SalesRep != null &&
                    SalesRep.Equals(other.SalesRep)
                ) && 
                (
                    PaymentMethod == other.PaymentMethod ||
                    PaymentMethod != null &&
                    PaymentMethod.Equals(other.PaymentMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (BillingDocumentSettings != null)
                    hashCode = hashCode * 59 + BillingDocumentSettings.GetHashCode();
                    if (Batch != null)
                    hashCode = hashCode * 59 + Batch.GetHashCode();
                    if (BillCycleDay != null)
                    hashCode = hashCode * 59 + BillCycleDay.GetHashCode();
                    if (BillTo != null)
                    hashCode = hashCode * 59 + BillTo.GetHashCode();
                    if (SoldTo != null)
                    hashCode = hashCode * 59 + SoldTo.GetHashCode();
                    if (CommunicationProfileId != null)
                    hashCode = hashCode * 59 + CommunicationProfileId.GetHashCode();
                    if (CrmId != null)
                    hashCode = hashCode * 59 + CrmId.GetHashCode();
                    if (DefaultPaymentMethodId != null)
                    hashCode = hashCode * 59 + DefaultPaymentMethodId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ParentAccountId != null)
                    hashCode = hashCode * 59 + ParentAccountId.GetHashCode();
                    if (PaymentGateway != null)
                    hashCode = hashCode * 59 + PaymentGateway.GetHashCode();
                    if (PaymentTerms != null)
                    hashCode = hashCode * 59 + PaymentTerms.GetHashCode();
                    if (SequenceSetId != null)
                    hashCode = hashCode * 59 + SequenceSetId.GetHashCode();
                    if (AutoPay != null)
                    hashCode = hashCode * 59 + AutoPay.GetHashCode();
                    if (TaxCertificate != null)
                    hashCode = hashCode * 59 + TaxCertificate.GetHashCode();
                    if (TaxIdentifier != null)
                    hashCode = hashCode * 59 + TaxIdentifier.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (SalesRep != null)
                    hashCode = hashCode * 59 + SalesRep.GetHashCode();
                    if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountCreateRequest left, AccountCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountCreateRequest left, AccountCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
