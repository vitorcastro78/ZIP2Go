/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// Query run information.
    /// </summary>
    [DataContract]
    public partial class QueryRun : IEquatable<QueryRun>
    { 
        /// <summary>
        /// Unique identifier of the Zuora user who created the object.
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object.</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// The SQL statement of the query.
        /// </summary>
        /// <value>The SQL statement of the query.</value>

        [DataMember(Name="sql")]
        public string Sql { get; set; }

        /// <summary>
        /// The remaining number of times Zuora will attempt the query before terminating the query and setting the state to &#x60;failed&#x60;.
        /// </summary>
        /// <value>The remaining number of times Zuora will attempt the query before terminating the query and setting the state to &#x60;failed&#x60;.</value>

        [DataMember(Name="remaining_attempts")]
        public decimal? RemainingAttempts { get; set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO-8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO-8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>

        [DataMember(Name="file")]
        public QueryRunFile File { get; set; }

        /// <summary>
        /// The number of rows in the output file.
        /// </summary>
        /// <value>The number of rows in the output file.</value>

        [DataMember(Name="number_of_rows")]
        public decimal? NumberOfRows { get; set; }

        /// <summary>
        /// The time taken to process the query in milliseconds.
        /// </summary>
        /// <value>The time taken to process the query in milliseconds.</value>

        [DataMember(Name="processing_duration")]
        public decimal? ProcessingDuration { get; set; }

        /// <summary>
        /// The query's execution state, which will be completed for successful runs.
        /// </summary>
        /// <value>The query's execution state, which will be completed for successful runs.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = "pending")]
            PendingEnum = 0,
            /// <summary>
            /// Enum AcceptedEnum for accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            AcceptedEnum = 1,
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 2,
            /// <summary>
            /// Enum CompleteEnum for complete
            /// </summary>
            [EnumMember(Value = "complete")]
            CompleteEnum = 3,
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 4,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 5        }

        /// <summary>
        /// The query&#x27;s execution state, which will be completed for successful runs.
        /// </summary>
        /// <value>The query&#x27;s execution state, which will be completed for successful runs.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// The character used as delimiter to separate values in the output file.
        /// </summary>
        /// <value>The character used as delimiter to separate values in the output file.</value>

        [DataMember(Name="column_separator")]
        public string ColumnSeparator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryRun {\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sql: ").Append(Sql).Append("\n");
            sb.Append("  RemainingAttempts: ").Append(RemainingAttempts).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  NumberOfRows: ").Append(NumberOfRows).Append("\n");
            sb.Append("  ProcessingDuration: ").Append(ProcessingDuration).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ColumnSeparator: ").Append(ColumnSeparator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QueryRun)obj);
        }

        /// <summary>
        /// Returns true if QueryRun instances are equal
        /// </summary>
        /// <param name="other">Instance of QueryRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryRun other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Sql == other.Sql ||
                    Sql != null &&
                    Sql.Equals(other.Sql)
                ) && 
                (
                    RemainingAttempts == other.RemainingAttempts ||
                    RemainingAttempts != null &&
                    RemainingAttempts.Equals(other.RemainingAttempts)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    NumberOfRows == other.NumberOfRows ||
                    NumberOfRows != null &&
                    NumberOfRows.Equals(other.NumberOfRows)
                ) && 
                (
                    ProcessingDuration == other.ProcessingDuration ||
                    ProcessingDuration != null &&
                    ProcessingDuration.Equals(other.ProcessingDuration)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ColumnSeparator == other.ColumnSeparator ||
                    ColumnSeparator != null &&
                    ColumnSeparator.Equals(other.ColumnSeparator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Sql != null)
                    hashCode = hashCode * 59 + Sql.GetHashCode();
                    if (RemainingAttempts != null)
                    hashCode = hashCode * 59 + RemainingAttempts.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    if (NumberOfRows != null)
                    hashCode = hashCode * 59 + NumberOfRows.GetHashCode();
                    if (ProcessingDuration != null)
                    hashCode = hashCode * 59 + ProcessingDuration.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ColumnSeparator != null)
                    hashCode = hashCode * 59 + ColumnSeparator.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QueryRun left, QueryRun right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QueryRun left, QueryRun right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
