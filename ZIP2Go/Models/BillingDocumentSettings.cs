/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// Billing document settings for an account
    /// </summary>
    [DataContract]
    public partial class BillingDocumentSettings : IEquatable<BillingDocumentSettings>
    { 
        /// <summary>
        /// Identifier of the credit memo template associated with this customer.
        /// </summary>
        /// <value>Identifier of the credit memo template associated with this customer.</value>

        [DataMember(Name="credit_memo_template_id")]
        public string CreditMemoTemplateId { get; set; }

        /// <summary>
        /// Identifier of the debit memo template associated with this customer.
        /// </summary>
        /// <value>Identifier of the debit memo template associated with this customer.</value>

        [DataMember(Name="debit_memo_template_id")]
        public string DebitMemoTemplateId { get; set; }

        /// <summary>
        /// Whether the customer wants to receive email invoices.
        /// </summary>
        /// <value>Whether the customer wants to receive email invoices.</value>

        [DataMember(Name="email_documents")]
        public bool? EmailDocuments { get; set; }

        /// <summary>
        /// Whether the customer wants to receive printed invoices.
        /// </summary>
        /// <value>Whether the customer wants to receive printed invoices.</value>

        [DataMember(Name="print_documents")]
        public bool? PrintDocuments { get; set; }

        /// <summary>
        /// Identifier of the invoice template associated with this customer.
        /// </summary>
        /// <value>Identifier of the invoice template associated with this customer.</value>

        [DataMember(Name="invoice_template_id")]
        public string InvoiceTemplateId { get; set; }

        /// <summary>
        /// A list of additional email addresses to receive email notifications.
        /// </summary>
        /// <value>A list of additional email addresses to receive email notifications.</value>

        [DataMember(Name="additional_email")]
        public List<string> AdditionalEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingDocumentSettings {\n");
            sb.Append("  CreditMemoTemplateId: ").Append(CreditMemoTemplateId).Append("\n");
            sb.Append("  DebitMemoTemplateId: ").Append(DebitMemoTemplateId).Append("\n");
            sb.Append("  EmailDocuments: ").Append(EmailDocuments).Append("\n");
            sb.Append("  PrintDocuments: ").Append(PrintDocuments).Append("\n");
            sb.Append("  InvoiceTemplateId: ").Append(InvoiceTemplateId).Append("\n");
            sb.Append("  AdditionalEmail: ").Append(AdditionalEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillingDocumentSettings)obj);
        }

        /// <summary>
        /// Returns true if BillingDocumentSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingDocumentSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingDocumentSettings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreditMemoTemplateId == other.CreditMemoTemplateId ||
                    CreditMemoTemplateId != null &&
                    CreditMemoTemplateId.Equals(other.CreditMemoTemplateId)
                ) && 
                (
                    DebitMemoTemplateId == other.DebitMemoTemplateId ||
                    DebitMemoTemplateId != null &&
                    DebitMemoTemplateId.Equals(other.DebitMemoTemplateId)
                ) && 
                (
                    EmailDocuments == other.EmailDocuments ||
                    EmailDocuments != null &&
                    EmailDocuments.Equals(other.EmailDocuments)
                ) && 
                (
                    PrintDocuments == other.PrintDocuments ||
                    PrintDocuments != null &&
                    PrintDocuments.Equals(other.PrintDocuments)
                ) && 
                (
                    InvoiceTemplateId == other.InvoiceTemplateId ||
                    InvoiceTemplateId != null &&
                    InvoiceTemplateId.Equals(other.InvoiceTemplateId)
                ) && 
                (
                    AdditionalEmail == other.AdditionalEmail ||
                    AdditionalEmail != null &&
                    AdditionalEmail.SequenceEqual(other.AdditionalEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreditMemoTemplateId != null)
                    hashCode = hashCode * 59 + CreditMemoTemplateId.GetHashCode();
                    if (DebitMemoTemplateId != null)
                    hashCode = hashCode * 59 + DebitMemoTemplateId.GetHashCode();
                    if (EmailDocuments != null)
                    hashCode = hashCode * 59 + EmailDocuments.GetHashCode();
                    if (PrintDocuments != null)
                    hashCode = hashCode * 59 + PrintDocuments.GetHashCode();
                    if (InvoiceTemplateId != null)
                    hashCode = hashCode * 59 + InvoiceTemplateId.GetHashCode();
                    if (AdditionalEmail != null)
                    hashCode = hashCode * 59 + AdditionalEmail.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillingDocumentSettings left, BillingDocumentSettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillingDocumentSettings left, BillingDocumentSettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
