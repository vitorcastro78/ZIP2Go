/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Prepayment : IEquatable<Prepayment>
    { 
        /// <summary>
        /// The way to calculate credit. See <a href='https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_with_Drawdown/A_Create_prepayment_charge#Credit_Option'  target='_blank'>Credit Option</a> for more information.
        /// </summary>
        /// <value>The way to calculate credit. See <a href='https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_with_Drawdown/A_Create_prepayment_charge#Credit_Option'  target='_blank'>Credit Option</a> for more information.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CreditOptionEnum
        {
            /// <summary>
            /// Enum TimeBasedEnum for time_based
            /// </summary>
            [EnumMember(Value = "time_based")]
            TimeBasedEnum = 0,
            /// <summary>
            /// Enum ConsumptionBasedEnum for consumption_based
            /// </summary>
            [EnumMember(Value = "consumption_based")]
            ConsumptionBasedEnum = 1,
            /// <summary>
            /// Enum FullCreditEnum for full_credit
            /// </summary>
            [EnumMember(Value = "full_credit")]
            FullCreditEnum = 2        }

        /// <summary>
        /// The way to calculate credit. See &lt;a href&#x3D;&#x27;https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_with_Drawdown/A_Create_prepayment_charge#Credit_Option&#x27;  target&#x3D;&#x27;_blank&#x27;&gt;Credit Option&lt;/a&gt; for more information.
        /// </summary>
        /// <value>The way to calculate credit. See &lt;a href&#x3D;&#x27;https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_with_Drawdown/A_Create_prepayment_charge#Credit_Option&#x27;  target&#x3D;&#x27;_blank&#x27;&gt;Credit Option&lt;/a&gt; for more information.</value>

        [DataMember(Name="credit_option")]
        public CreditOptionEnum? CreditOption { get; set; }

        /// <summary>
        /// The number of units included in a prepayment charge.
        /// </summary>
        /// <value>The number of units included in a prepayment charge.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// The total amount of units that end customers can use during a validity period when they subscribe to a prepayment charge.
        /// </summary>
        /// <value>The total amount of units that end customers can use during a validity period when they subscribe to a prepayment charge.</value>

        [DataMember(Name="total_quantity")]
        public decimal? TotalQuantity { get; set; }

        /// <summary>
        /// A configured unit of measure. This field is required for per-unit prices.
        /// </summary>
        /// <value>A configured unit of measure. This field is required for per-unit prices.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The period in which the prepayment units are valid to use as defined in a prepayment charge.
        /// </summary>
        /// <value>The period in which the prepayment units are valid to use as defined in a prepayment charge.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ValidityPeriodEnum
        {
            /// <summary>
            /// Enum SubscriptionTermEnum for subscription_term
            /// </summary>
            [EnumMember(Value = "subscription_term")]
            SubscriptionTermEnum = 0,
            /// <summary>
            /// Enum AnnualEnum for annual
            /// </summary>
            [EnumMember(Value = "annual")]
            AnnualEnum = 1,
            /// <summary>
            /// Enum SemiAnnualEnum for semi_annual
            /// </summary>
            [EnumMember(Value = "semi_annual")]
            SemiAnnualEnum = 2,
            /// <summary>
            /// Enum QuarterEnum for quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            QuarterEnum = 3,
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 4        }

        /// <summary>
        /// The period in which the prepayment units are valid to use as defined in a prepayment charge.
        /// </summary>
        /// <value>The period in which the prepayment units are valid to use as defined in a prepayment charge.</value>

        [DataMember(Name="validity_period")]
        public ValidityPeriodEnum? ValidityPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Prepayment {\n");
            sb.Append("  CreditOption: ").Append(CreditOption).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TotalQuantity: ").Append(TotalQuantity).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  ValidityPeriod: ").Append(ValidityPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Prepayment)obj);
        }

        /// <summary>
        /// Returns true if Prepayment instances are equal
        /// </summary>
        /// <param name="other">Instance of Prepayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Prepayment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreditOption == other.CreditOption ||
                    CreditOption != null &&
                    CreditOption.Equals(other.CreditOption)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    TotalQuantity == other.TotalQuantity ||
                    TotalQuantity != null &&
                    TotalQuantity.Equals(other.TotalQuantity)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    ValidityPeriod == other.ValidityPeriod ||
                    ValidityPeriod != null &&
                    ValidityPeriod.Equals(other.ValidityPeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreditOption != null)
                    hashCode = hashCode * 59 + CreditOption.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (TotalQuantity != null)
                    hashCode = hashCode * 59 + TotalQuantity.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    if (ValidityPeriod != null)
                    hashCode = hashCode * 59 + ValidityPeriod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Prepayment left, Prepayment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Prepayment left, Prepayment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
