/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// If the &#x60;type&#x60; of the payment method is &#x60;ach_debit&#x60;, this hash contains details about the ACH bank account.
    /// </summary>
    [DataContract]
    public partial class AchDebit : IEquatable<AchDebit>
    { 
        /// <summary>
        /// Gets or Sets Mandate
        /// </summary>

        [DataMember(Name="mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The nine-digit routing number or ABA number used by banks.
        /// </summary>
        /// <value>The nine-digit routing number or ABA number used by banks.</value>
        [Required]

        [DataMember(Name="bank_aba_code")]
        public string BankAbaCode { get; set; }

        /// <summary>
        /// The name of the account holder, which can be either a person or a company.
        /// </summary>
        /// <value>The name of the account holder, which can be either a person or a company.</value>
        [Required]

        [DataMember(Name="bank_account_name")]
        public string BankAccountName { get; set; }

        /// <summary>
        /// The type of bank account associated with the payment method.
        /// </summary>
        /// <value>The type of bank account associated with the payment method.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BankAccountTypeEnum
        {
            /// <summary>
            /// Enum BusinessSavingEnum for business_saving
            /// </summary>
            [EnumMember(Value = "business_saving")]
            BusinessSavingEnum = 0,
            /// <summary>
            /// Enum BusinessCheckingEnum for business_checking
            /// </summary>
            [EnumMember(Value = "business_checking")]
            BusinessCheckingEnum = 1,
            /// <summary>
            /// Enum CheckingEnum for checking
            /// </summary>
            [EnumMember(Value = "checking")]
            CheckingEnum = 2,
            /// <summary>
            /// Enum SavingEnum for saving
            /// </summary>
            [EnumMember(Value = "saving")]
            SavingEnum = 3        }

        /// <summary>
        /// The type of bank account associated with the payment method.
        /// </summary>
        /// <value>The type of bank account associated with the payment method.</value>
        [Required]

        [DataMember(Name="bank_account_type")]
        public BankAccountTypeEnum? BankAccountType { get; set; }

        /// <summary>
        /// Name of the bank associated with this bank account.
        /// </summary>
        /// <value>Name of the bank associated with this bank account.</value>
        [Required]

        [DataMember(Name="bank_name")]
        public string BankName { get; set; }

        /// <summary>
        /// The bank account number of the account holder.
        /// </summary>
        /// <value>The bank account number of the account holder.</value>
        [Required]

        [DataMember(Name="bank_account_number")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AchDebit {\n");
            sb.Append("  Mandate: ").Append(Mandate).Append("\n");
            sb.Append("  BankAbaCode: ").Append(BankAbaCode).Append("\n");
            sb.Append("  BankAccountName: ").Append(BankAccountName).Append("\n");
            sb.Append("  BankAccountType: ").Append(BankAccountType).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AchDebit)obj);
        }

        /// <summary>
        /// Returns true if AchDebit instances are equal
        /// </summary>
        /// <param name="other">Instance of AchDebit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AchDebit other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Mandate == other.Mandate ||
                    Mandate != null &&
                    Mandate.Equals(other.Mandate)
                ) && 
                (
                    BankAbaCode == other.BankAbaCode ||
                    BankAbaCode != null &&
                    BankAbaCode.Equals(other.BankAbaCode)
                ) && 
                (
                    BankAccountName == other.BankAccountName ||
                    BankAccountName != null &&
                    BankAccountName.Equals(other.BankAccountName)
                ) && 
                (
                    BankAccountType == other.BankAccountType ||
                    BankAccountType != null &&
                    BankAccountType.Equals(other.BankAccountType)
                ) && 
                (
                    BankName == other.BankName ||
                    BankName != null &&
                    BankName.Equals(other.BankName)
                ) && 
                (
                    BankAccountNumber == other.BankAccountNumber ||
                    BankAccountNumber != null &&
                    BankAccountNumber.Equals(other.BankAccountNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Mandate != null)
                    hashCode = hashCode * 59 + Mandate.GetHashCode();
                    if (BankAbaCode != null)
                    hashCode = hashCode * 59 + BankAbaCode.GetHashCode();
                    if (BankAccountName != null)
                    hashCode = hashCode * 59 + BankAccountName.GetHashCode();
                    if (BankAccountType != null)
                    hashCode = hashCode * 59 + BankAccountType.GetHashCode();
                    if (BankName != null)
                    hashCode = hashCode * 59 + BankName.GetHashCode();
                    if (BankAccountNumber != null)
                    hashCode = hashCode * 59 + BankAccountNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AchDebit left, AchDebit right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AchDebit left, AchDebit right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
