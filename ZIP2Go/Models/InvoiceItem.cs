/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InvoiceItem : IEquatable<InvoiceItem>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfinvoiceItemCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// The total amount of this invoice item.
        /// </summary>
        /// <value>The total amount of this invoice item.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// An arbitrary string associated with the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string associated with the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The accounting code for the deferred revenue, such as Monthly Recurring Liability.
        /// </summary>
        /// <value>The accounting code for the deferred revenue, such as Monthly Recurring Liability.</value>

        [DataMember(Name="deferred_revenue_account")]
        public string DeferredRevenueAccount { get; set; }

        /// <summary>
        /// The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
        /// </summary>
        /// <value>The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.</value>

        [DataMember(Name="recognized_revenue_account")]
        public string RecognizedRevenueAccount { get; set; }

        /// <summary>
        /// The name of the revenue recognition rule governing the revenue schedule.
        /// </summary>
        /// <value>The name of the revenue recognition rule governing the revenue schedule.</value>

        [DataMember(Name="revenue_recognition_rule_name")]
        public string RevenueRecognitionRuleName { get; set; }

        /// <summary>
        /// The number of units of this item.
        /// </summary>
        /// <value>The number of units of this item.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// The end date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.
        /// </summary>
        /// <value>The end date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.</value>

        [DataMember(Name="service_end")]
        public string ServiceEnd { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="accounts_receivable_account")]
        public string AccountsReceivableAccount { get; set; }

        /// <summary>
        /// If true, indicates that the item is a discount item.
        /// </summary>
        /// <value>If true, indicates that the item is a discount item.</value>

        [DataMember(Name="discount_item")]
        public bool? DiscountItem { get; set; }

        /// <summary>
        /// Identifier of an invoice item or a debit memo item that this discount item or credit memo item is applied to.
        /// </summary>
        /// <value>Identifier of an invoice item or a debit memo item that this discount item or credit memo item is applied to.</value>

        [DataMember(Name="applied_to_item_id")]
        public string AppliedToItemId { get; set; }

        /// <summary>
        /// The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.
        /// </summary>
        /// <value>The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.</value>

        [DataMember(Name="service_start")]
        public string ServiceStart { get; set; }

        /// <summary>
        /// Gets or Sets AccountingCode
        /// </summary>

        [DataMember(Name="accounting_code")]
        public string AccountingCode { get; set; }

        /// <summary>
        /// The identifier of the invoice associated with this invoice item.
        /// </summary>
        /// <value>The identifier of the invoice associated with this invoice item.</value>

        [DataMember(Name="invoice_id")]
        public string InvoiceId { get; set; }

        /// <summary>
        /// The unique SKU (stock keeping unit) of the product associated with this item.
        /// </summary>
        /// <value>The unique SKU (stock keeping unit) of the product associated with this item.</value>

        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// The identifier of the subscription associated with the invoice item.
        /// </summary>
        /// <value>The identifier of the subscription associated with the invoice item.</value>

        [DataMember(Name="subscription_id")]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// This specifies if the invoice item amount is inclusive or exclusive of tax.
        /// </summary>
        /// <value>This specifies if the invoice item amount is inclusive or exclusive of tax.</value>

        [DataMember(Name="tax_inclusive")]
        public bool? TaxInclusive { get; set; }

        /// <summary>
        /// The remaining balance of this invoice item.
        /// </summary>
        /// <value>The remaining balance of this invoice item.</value>

        [DataMember(Name="remaining_balance")]
        public decimal? RemainingBalance { get; set; }

        /// <summary>
        /// Specifies the units used to measure usage.
        /// </summary>
        /// <value>Specifies the units used to measure usage.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Unit amount (in the currency specified) of the invoice item.
        /// </summary>
        /// <value>Unit amount (in the currency specified) of the invoice item.</value>

        [DataMember(Name="unit_amount")]
        public decimal? UnitAmount { get; set; }

        /// <summary>
        /// The booking reference for this invoice item.
        /// </summary>
        /// <value>The booking reference for this invoice item.</value>

        [DataMember(Name="booking_reference")]
        public string BookingReference { get; set; }

        /// <summary>
        /// Name of the invoice item displayed to customers on billing documents.
        /// </summary>
        /// <value>Name of the invoice item displayed to customers on billing documents.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The date and time when the invoice item was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the invoice item was created in ISO 8601 UTC format.</value>

        [DataMember(Name="document_item_date")]
        public DateTime? DocumentItemDate { get; private set; }

        /// <summary>
        /// The identifier of the price this invoice item is associated with.
        /// </summary>
        /// <value>The identifier of the price this invoice item is associated with.</value>

        [DataMember(Name="price_id")]
        public string PriceId { get; set; }

        /// <summary>
        /// The purchase order number associated with this invoice item.
        /// </summary>
        /// <value>The purchase order number associated with this invoice item.</value>

        [DataMember(Name="purchase_order_number")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The amount of tax applied to the invoice item.
        /// </summary>
        /// <value>The amount of tax applied to the invoice item.</value>

        [DataMember(Name="tax")]
        public decimal? Tax { get; set; }

        /// <summary>
        /// The designated tax code.
        /// </summary>
        /// <value>The designated tax code.</value>

        [DataMember(Name="tax_code")]
        public string TaxCode { get; set; }

        /// <summary>
        /// The identifier the subscription item associated with this invoice item.
        /// </summary>
        /// <value>The identifier the subscription item associated with this invoice item.</value>

        [DataMember(Name="subscription_item_id")]
        public string SubscriptionItemId { get; set; }

        /// <summary>
        /// Gets or Sets TaxationItems
        /// </summary>

        [DataMember(Name="taxation_items")]
        public TaxationItemListResponse TaxationItems { get; set; }

        /// <summary>
        /// The invoice the item belongs to. EXPANDABLE
        /// </summary>
        /// <value>The invoice the item belongs to. EXPANDABLE</value>

        [DataMember(Name="invoice")]
        public AllOfinvoiceItemInvoice Invoice { get; set; }

        /// <summary>
        /// The order line item associated with this invoice item. EXPANDABLE
        /// </summary>
        /// <value>The order line item associated with this invoice item. EXPANDABLE</value>

        [DataMember(Name="line_item")]
        public AllOfinvoiceItemLineItem LineItem { get; set; }

        /// <summary>
        /// List of customer subscriptions.
        /// </summary>
        /// <value>List of customer subscriptions.</value>

        [DataMember(Name="subscription")]
        public AllOfinvoiceItemSubscription Subscription { get; private set; }

        /// <summary>
        /// The expandable subscription item associated with this billing document item.
        /// </summary>
        /// <value>The expandable subscription item associated with this billing document item.</value>

        [DataMember(Name="subscription_item")]
        public AllOfinvoiceItemSubscriptionItem SubscriptionItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeferredRevenueAccount: ").Append(DeferredRevenueAccount).Append("\n");
            sb.Append("  RecognizedRevenueAccount: ").Append(RecognizedRevenueAccount).Append("\n");
            sb.Append("  RevenueRecognitionRuleName: ").Append(RevenueRecognitionRuleName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ServiceEnd: ").Append(ServiceEnd).Append("\n");
            sb.Append("  AccountsReceivableAccount: ").Append(AccountsReceivableAccount).Append("\n");
            sb.Append("  DiscountItem: ").Append(DiscountItem).Append("\n");
            sb.Append("  AppliedToItemId: ").Append(AppliedToItemId).Append("\n");
            sb.Append("  ServiceStart: ").Append(ServiceStart).Append("\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  TaxInclusive: ").Append(TaxInclusive).Append("\n");
            sb.Append("  RemainingBalance: ").Append(RemainingBalance).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  BookingReference: ").Append(BookingReference).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DocumentItemDate: ").Append(DocumentItemDate).Append("\n");
            sb.Append("  PriceId: ").Append(PriceId).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  SubscriptionItemId: ").Append(SubscriptionItemId).Append("\n");
            sb.Append("  TaxationItems: ").Append(TaxationItems).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  LineItem: ").Append(LineItem).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  SubscriptionItem: ").Append(SubscriptionItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InvoiceItem)obj);
        }

        /// <summary>
        /// Returns true if InvoiceItem instances are equal
        /// </summary>
        /// <param name="other">Instance of InvoiceItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DeferredRevenueAccount == other.DeferredRevenueAccount ||
                    DeferredRevenueAccount != null &&
                    DeferredRevenueAccount.Equals(other.DeferredRevenueAccount)
                ) && 
                (
                    RecognizedRevenueAccount == other.RecognizedRevenueAccount ||
                    RecognizedRevenueAccount != null &&
                    RecognizedRevenueAccount.Equals(other.RecognizedRevenueAccount)
                ) && 
                (
                    RevenueRecognitionRuleName == other.RevenueRecognitionRuleName ||
                    RevenueRecognitionRuleName != null &&
                    RevenueRecognitionRuleName.Equals(other.RevenueRecognitionRuleName)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ServiceEnd == other.ServiceEnd ||
                    ServiceEnd != null &&
                    ServiceEnd.Equals(other.ServiceEnd)
                ) && 
                (
                    AccountsReceivableAccount == other.AccountsReceivableAccount ||
                    AccountsReceivableAccount != null &&
                    AccountsReceivableAccount.Equals(other.AccountsReceivableAccount)
                ) && 
                (
                    DiscountItem == other.DiscountItem ||
                    DiscountItem != null &&
                    DiscountItem.Equals(other.DiscountItem)
                ) && 
                (
                    AppliedToItemId == other.AppliedToItemId ||
                    AppliedToItemId != null &&
                    AppliedToItemId.Equals(other.AppliedToItemId)
                ) && 
                (
                    ServiceStart == other.ServiceStart ||
                    ServiceStart != null &&
                    ServiceStart.Equals(other.ServiceStart)
                ) && 
                (
                    AccountingCode == other.AccountingCode ||
                    AccountingCode != null &&
                    AccountingCode.Equals(other.AccountingCode)
                ) && 
                (
                    InvoiceId == other.InvoiceId ||
                    InvoiceId != null &&
                    InvoiceId.Equals(other.InvoiceId)
                ) && 
                (
                    Sku == other.Sku ||
                    Sku != null &&
                    Sku.Equals(other.Sku)
                ) && 
                (
                    SubscriptionId == other.SubscriptionId ||
                    SubscriptionId != null &&
                    SubscriptionId.Equals(other.SubscriptionId)
                ) && 
                (
                    TaxInclusive == other.TaxInclusive ||
                    TaxInclusive != null &&
                    TaxInclusive.Equals(other.TaxInclusive)
                ) && 
                (
                    RemainingBalance == other.RemainingBalance ||
                    RemainingBalance != null &&
                    RemainingBalance.Equals(other.RemainingBalance)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    UnitAmount == other.UnitAmount ||
                    UnitAmount != null &&
                    UnitAmount.Equals(other.UnitAmount)
                ) && 
                (
                    BookingReference == other.BookingReference ||
                    BookingReference != null &&
                    BookingReference.Equals(other.BookingReference)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DocumentItemDate == other.DocumentItemDate ||
                    DocumentItemDate != null &&
                    DocumentItemDate.Equals(other.DocumentItemDate)
                ) && 
                (
                    PriceId == other.PriceId ||
                    PriceId != null &&
                    PriceId.Equals(other.PriceId)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    Tax == other.Tax ||
                    Tax != null &&
                    Tax.Equals(other.Tax)
                ) && 
                (
                    TaxCode == other.TaxCode ||
                    TaxCode != null &&
                    TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    SubscriptionItemId == other.SubscriptionItemId ||
                    SubscriptionItemId != null &&
                    SubscriptionItemId.Equals(other.SubscriptionItemId)
                ) && 
                (
                    TaxationItems == other.TaxationItems ||
                    TaxationItems != null &&
                    TaxationItems.Equals(other.TaxationItems)
                ) && 
                (
                    Invoice == other.Invoice ||
                    Invoice != null &&
                    Invoice.Equals(other.Invoice)
                ) && 
                (
                    LineItem == other.LineItem ||
                    LineItem != null &&
                    LineItem.Equals(other.LineItem)
                ) && 
                (
                    Subscription == other.Subscription ||
                    Subscription != null &&
                    Subscription.Equals(other.Subscription)
                ) && 
                (
                    SubscriptionItem == other.SubscriptionItem ||
                    SubscriptionItem != null &&
                    SubscriptionItem.Equals(other.SubscriptionItem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DeferredRevenueAccount != null)
                    hashCode = hashCode * 59 + DeferredRevenueAccount.GetHashCode();
                    if (RecognizedRevenueAccount != null)
                    hashCode = hashCode * 59 + RecognizedRevenueAccount.GetHashCode();
                    if (RevenueRecognitionRuleName != null)
                    hashCode = hashCode * 59 + RevenueRecognitionRuleName.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ServiceEnd != null)
                    hashCode = hashCode * 59 + ServiceEnd.GetHashCode();
                    if (AccountsReceivableAccount != null)
                    hashCode = hashCode * 59 + AccountsReceivableAccount.GetHashCode();
                    if (DiscountItem != null)
                    hashCode = hashCode * 59 + DiscountItem.GetHashCode();
                    if (AppliedToItemId != null)
                    hashCode = hashCode * 59 + AppliedToItemId.GetHashCode();
                    if (ServiceStart != null)
                    hashCode = hashCode * 59 + ServiceStart.GetHashCode();
                    if (AccountingCode != null)
                    hashCode = hashCode * 59 + AccountingCode.GetHashCode();
                    if (InvoiceId != null)
                    hashCode = hashCode * 59 + InvoiceId.GetHashCode();
                    if (Sku != null)
                    hashCode = hashCode * 59 + Sku.GetHashCode();
                    if (SubscriptionId != null)
                    hashCode = hashCode * 59 + SubscriptionId.GetHashCode();
                    if (TaxInclusive != null)
                    hashCode = hashCode * 59 + TaxInclusive.GetHashCode();
                    if (RemainingBalance != null)
                    hashCode = hashCode * 59 + RemainingBalance.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    if (UnitAmount != null)
                    hashCode = hashCode * 59 + UnitAmount.GetHashCode();
                    if (BookingReference != null)
                    hashCode = hashCode * 59 + BookingReference.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (DocumentItemDate != null)
                    hashCode = hashCode * 59 + DocumentItemDate.GetHashCode();
                    if (PriceId != null)
                    hashCode = hashCode * 59 + PriceId.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (Tax != null)
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    if (TaxCode != null)
                    hashCode = hashCode * 59 + TaxCode.GetHashCode();
                    if (SubscriptionItemId != null)
                    hashCode = hashCode * 59 + SubscriptionItemId.GetHashCode();
                    if (TaxationItems != null)
                    hashCode = hashCode * 59 + TaxationItems.GetHashCode();
                    if (Invoice != null)
                    hashCode = hashCode * 59 + Invoice.GetHashCode();
                    if (LineItem != null)
                    hashCode = hashCode * 59 + LineItem.GetHashCode();
                    if (Subscription != null)
                    hashCode = hashCode * 59 + Subscription.GetHashCode();
                    if (SubscriptionItem != null)
                    hashCode = hashCode * 59 + SubscriptionItem.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InvoiceItem left, InvoiceItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InvoiceItem left, InvoiceItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
