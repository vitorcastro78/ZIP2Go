/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillingDocument : IEquatable<BillingDocument>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfbillingDocumentCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// Identifier of the account that owns the billing document.
        /// </summary>
        /// <value>Identifier of the account that owns the billing document.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Human-readable identifier of the account that owns the billing document.
        /// </summary>
        /// <value>Human-readable identifier of the account that owns the billing document.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// An arbitrary string associated with the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string associated with the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The date on which payment for the billing document is due.
        /// </summary>
        /// <value>The date on which payment for the billing document is due.</value>

        [DataMember(Name="due_date")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The date when the billing document takes effect.
        /// </summary>
        /// <value>The date when the billing document takes effect.</value>

        [DataMember(Name="document_date")]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// Reason for issuing this billing document. This field is applicable only if the &#x60;type&#x60; field is set to &#x60;credit_memo&#x60; or &#x60;debit_memo&#x60;.
        /// </summary>
        /// <value>Reason for issuing this billing document. This field is applicable only if the &#x60;type&#x60; field is set to &#x60;credit_memo&#x60; or &#x60;debit_memo&#x60;.</value>

        [DataMember(Name="reason_code")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The identifier of the invoice billing document from which this credit memo or debit memo billing document is created. This field is applicable only if the &#x60;type&#x60; field is set to &#x60;credit_memo&#x60; or &#x60;debit_memo&#x60;.
        /// </summary>
        /// <value>The identifier of the invoice billing document from which this credit memo or debit memo billing document is created. This field is applicable only if the &#x60;type&#x60; field is set to &#x60;credit_memo&#x60; or &#x60;debit_memo&#x60;.</value>

        [DataMember(Name="invoice_id")]
        public string InvoiceId { get; set; }

        /// <summary>
        /// Whether to transfer to an external accounting system.
        /// </summary>
        /// <value>Whether to transfer to an external accounting system.</value>

        [DataMember(Name="transfer_to_accounting")]
        public bool? TransferToAccounting { get; set; }

        /// <summary>
        /// Indicates whether to exclude this credit memo billing document from the rule of automatically applying it to invoices. This field is applicable only if the &#x60;type&#x60; field is set to &#x60;credit_memo&#x60;.
        /// </summary>
        /// <value>Indicates whether to exclude this credit memo billing document from the rule of automatically applying it to invoices. This field is applicable only if the &#x60;type&#x60; field is set to &#x60;credit_memo&#x60;.</value>

        [DataMember(Name="exclude_from_auto_apply_rules")]
        public bool? ExcludeFromAutoApplyRules { get; set; }

        /// <summary>
        /// Indicates whether the billing document is automatically picked up for processing in the corresponding payment run.
        /// </summary>
        /// <value>Indicates whether the billing document is automatically picked up for processing in the corresponding payment run.</value>

        [DataMember(Name="pay")]
        public bool? Pay { get; set; }

        /// <summary>
        /// The type of billing document. Can be one of the credit memo, debit memo, or invoice.
        /// </summary>
        /// <value>The type of billing document. Can be one of the credit memo, debit memo, or invoice.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CreditMemoEnum for credit_memo
            /// </summary>
            [EnumMember(Value = "credit_memo")]
            CreditMemoEnum = 0,
            /// <summary>
            /// Enum DebitMemoEnum for debit_memo
            /// </summary>
            [EnumMember(Value = "debit_memo")]
            DebitMemoEnum = 1,
            /// <summary>
            /// Enum InvoiceEnum for invoice
            /// </summary>
            [EnumMember(Value = "invoice")]
            InvoiceEnum = 2        }

        /// <summary>
        /// The type of billing document. Can be one of the credit memo, debit memo, or invoice.
        /// </summary>
        /// <value>The type of billing document. Can be one of the credit memo, debit memo, or invoice.</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// A human-readable identifier for the billing document; may be user-supplied.
        /// </summary>
        /// <value>A human-readable identifier for the billing document; may be user-supplied.</value>

        [DataMember(Name="billing_document_number")]
        public string BillingDocumentNumber { get; private set; }

        /// <summary>
        /// The amount of this billing document item refunded.
        /// </summary>
        /// <value>The amount of this billing document item refunded.</value>

        [DataMember(Name="amount_refunded")]
        public decimal? AmountRefunded { get; set; }

        /// <summary>
        /// Gets or Sets StateTransitions
        /// </summary>

        [DataMember(Name="state_transitions")]
        public AllOfbillingDocumentStateTransitions StateTransitions { get; set; }

        /// <summary>
        /// Identifier of the Zuora user who posted the billing document.
        /// </summary>
        /// <value>Identifier of the Zuora user who posted the billing document.</value>

        [DataMember(Name="posted_by_id")]
        public string PostedById { get; private set; }

        /// <summary>
        /// The status of the billing document.
        /// </summary>
        /// <value>The status of the billing document.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum DraftEnum for draft
            /// </summary>
            [EnumMember(Value = "draft")]
            DraftEnum = 0,
            /// <summary>
            /// Enum OpenEnum for open
            /// </summary>
            [EnumMember(Value = "open")]
            OpenEnum = 1,
            /// <summary>
            /// Enum UncollectibleEnum for uncollectible
            /// </summary>
            [EnumMember(Value = "uncollectible")]
            UncollectibleEnum = 2,
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 3        }

        /// <summary>
        /// The status of the billing document.
        /// </summary>
        /// <value>The status of the billing document.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// The account that owns the billing document. EXPANDABLE
        /// </summary>
        /// <value>The account that owns the billing document. EXPANDABLE</value>

        [DataMember(Name="account")]
        public AllOfbillingDocumentAccount Account { get; set; }

        /// <summary>
        /// List of billing document items.
        /// </summary>
        /// <value>List of billing document items.</value>

        [DataMember(Name="items")]
        public AllOfbillingDocumentItems Items { get; private set; }

        /// <summary>
        /// The total amount.
        /// </summary>
        /// <value>The total amount.</value>

        [DataMember(Name="total")]
        public decimal? Total { get; private set; }

        /// <summary>
        /// The total amount exclusive of tax.
        /// </summary>
        /// <value>The total amount exclusive of tax.</value>

        [DataMember(Name="subtotal")]
        public decimal? Subtotal { get; private set; }

        /// <summary>
        /// The total tax amount.
        /// </summary>
        /// <value>The total tax amount.</value>

        [DataMember(Name="tax")]
        public decimal? Tax { get; private set; }

        /// <summary>
        /// The total balance remaining.  This field is deprecated. Use &#x60;remaining_balance&#x60; field.
        /// </summary>
        /// <value>The total balance remaining.  This field is deprecated. Use &#x60;remaining_balance&#x60; field.</value>

        [DataMember(Name="balance")]
        public decimal? Balance { get; private set; }

        /// <summary>
        /// The total balance remaining.
        /// </summary>
        /// <value>The total balance remaining.</value>

        [DataMember(Name="remaining_balance")]
        public decimal? RemainingBalance { get; private set; }

        /// <summary>
        /// The total amount paid.
        /// </summary>
        /// <value>The total amount paid.</value>

        [DataMember(Name="amount_paid")]
        public decimal? AmountPaid { get; private set; }

        /// <summary>
        /// Whether payment was successfully collected for this invoice. An invoice can be paid with a payment or a credit memo.
        /// </summary>
        /// <value>Whether payment was successfully collected for this invoice. An invoice can be paid with a payment or a credit memo.</value>

        [DataMember(Name="paid")]
        public bool? Paid { get; private set; }

        /// <summary>
        /// Whether payment is past due.
        /// </summary>
        /// <value>Whether payment is past due.</value>

        [DataMember(Name="past_due")]
        public bool? PastDue { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  TransferToAccounting: ").Append(TransferToAccounting).Append("\n");
            sb.Append("  ExcludeFromAutoApplyRules: ").Append(ExcludeFromAutoApplyRules).Append("\n");
            sb.Append("  Pay: ").Append(Pay).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BillingDocumentNumber: ").Append(BillingDocumentNumber).Append("\n");
            sb.Append("  AmountRefunded: ").Append(AmountRefunded).Append("\n");
            sb.Append("  StateTransitions: ").Append(StateTransitions).Append("\n");
            sb.Append("  PostedById: ").Append(PostedById).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  RemainingBalance: ").Append(RemainingBalance).Append("\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  Paid: ").Append(Paid).Append("\n");
            sb.Append("  PastDue: ").Append(PastDue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillingDocument)obj);
        }

        /// <summary>
        /// Returns true if BillingDocument instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingDocument other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    DocumentDate == other.DocumentDate ||
                    DocumentDate != null &&
                    DocumentDate.Equals(other.DocumentDate)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    InvoiceId == other.InvoiceId ||
                    InvoiceId != null &&
                    InvoiceId.Equals(other.InvoiceId)
                ) && 
                (
                    TransferToAccounting == other.TransferToAccounting ||
                    TransferToAccounting != null &&
                    TransferToAccounting.Equals(other.TransferToAccounting)
                ) && 
                (
                    ExcludeFromAutoApplyRules == other.ExcludeFromAutoApplyRules ||
                    ExcludeFromAutoApplyRules != null &&
                    ExcludeFromAutoApplyRules.Equals(other.ExcludeFromAutoApplyRules)
                ) && 
                (
                    Pay == other.Pay ||
                    Pay != null &&
                    Pay.Equals(other.Pay)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    BillingDocumentNumber == other.BillingDocumentNumber ||
                    BillingDocumentNumber != null &&
                    BillingDocumentNumber.Equals(other.BillingDocumentNumber)
                ) && 
                (
                    AmountRefunded == other.AmountRefunded ||
                    AmountRefunded != null &&
                    AmountRefunded.Equals(other.AmountRefunded)
                ) && 
                (
                    StateTransitions == other.StateTransitions ||
                    StateTransitions != null &&
                    StateTransitions.Equals(other.StateTransitions)
                ) && 
                (
                    PostedById == other.PostedById ||
                    PostedById != null &&
                    PostedById.Equals(other.PostedById)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.Equals(other.Items)
                ) && 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) && 
                (
                    Subtotal == other.Subtotal ||
                    Subtotal != null &&
                    Subtotal.Equals(other.Subtotal)
                ) && 
                (
                    Tax == other.Tax ||
                    Tax != null &&
                    Tax.Equals(other.Tax)
                ) && 
                (
                    Balance == other.Balance ||
                    Balance != null &&
                    Balance.Equals(other.Balance)
                ) && 
                (
                    RemainingBalance == other.RemainingBalance ||
                    RemainingBalance != null &&
                    RemainingBalance.Equals(other.RemainingBalance)
                ) && 
                (
                    AmountPaid == other.AmountPaid ||
                    AmountPaid != null &&
                    AmountPaid.Equals(other.AmountPaid)
                ) && 
                (
                    Paid == other.Paid ||
                    Paid != null &&
                    Paid.Equals(other.Paid)
                ) && 
                (
                    PastDue == other.PastDue ||
                    PastDue != null &&
                    PastDue.Equals(other.PastDue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (DocumentDate != null)
                    hashCode = hashCode * 59 + DocumentDate.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (InvoiceId != null)
                    hashCode = hashCode * 59 + InvoiceId.GetHashCode();
                    if (TransferToAccounting != null)
                    hashCode = hashCode * 59 + TransferToAccounting.GetHashCode();
                    if (ExcludeFromAutoApplyRules != null)
                    hashCode = hashCode * 59 + ExcludeFromAutoApplyRules.GetHashCode();
                    if (Pay != null)
                    hashCode = hashCode * 59 + Pay.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (BillingDocumentNumber != null)
                    hashCode = hashCode * 59 + BillingDocumentNumber.GetHashCode();
                    if (AmountRefunded != null)
                    hashCode = hashCode * 59 + AmountRefunded.GetHashCode();
                    if (StateTransitions != null)
                    hashCode = hashCode * 59 + StateTransitions.GetHashCode();
                    if (PostedById != null)
                    hashCode = hashCode * 59 + PostedById.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (Subtotal != null)
                    hashCode = hashCode * 59 + Subtotal.GetHashCode();
                    if (Tax != null)
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    if (Balance != null)
                    hashCode = hashCode * 59 + Balance.GetHashCode();
                    if (RemainingBalance != null)
                    hashCode = hashCode * 59 + RemainingBalance.GetHashCode();
                    if (AmountPaid != null)
                    hashCode = hashCode * 59 + AmountPaid.GetHashCode();
                    if (Paid != null)
                    hashCode = hashCode * 59 + Paid.GetHashCode();
                    if (PastDue != null)
                    hashCode = hashCode * 59 + PastDue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillingDocument left, BillingDocument right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillingDocument left, BillingDocument right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
