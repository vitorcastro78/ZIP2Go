/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// If the &#x60;type&#x60; of the payment method is &#x60;card&#x60;, this hash contains details about the Credit Card payment method. When providing a card number, you must meet the requirements for PCI compliance. We strongly recommend using Zuora&#x27;s [Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0) instead of interacting with this API directly.
    /// </summary>
    [DataContract]
    public partial class CardUpdate : IEquatable<CardUpdate>
    { 
        /// <summary>
        /// One- or two-digit expiration month (1-12) of the credit card.
        /// </summary>
        /// <value>One- or two-digit expiration month (1-12) of the credit card.</value>

        [DataMember(Name="expiry_month")]
        public decimal? ExpiryMonth { get; set; }

        /// <summary>
        /// Two- or four-digit number representing the card&#x27;s expiration year.
        /// </summary>
        /// <value>Two- or four-digit number representing the card&#x27;s expiration year.</value>

        [DataMember(Name="expiry_year")]
        public decimal? ExpiryYear { get; set; }

        /// <summary>
        /// Card security code. It is highly recommended to always include this value.
        /// </summary>
        /// <value>Card security code. It is highly recommended to always include this value.</value>

        [DataMember(Name="security_code")]
        public string SecurityCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardUpdate {\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CardUpdate)obj);
        }

        /// <summary>
        /// Returns true if CardUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of CardUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExpiryMonth == other.ExpiryMonth ||
                    ExpiryMonth != null &&
                    ExpiryMonth.Equals(other.ExpiryMonth)
                ) && 
                (
                    ExpiryYear == other.ExpiryYear ||
                    ExpiryYear != null &&
                    ExpiryYear.Equals(other.ExpiryYear)
                ) && 
                (
                    SecurityCode == other.SecurityCode ||
                    SecurityCode != null &&
                    SecurityCode.Equals(other.SecurityCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExpiryMonth != null)
                    hashCode = hashCode * 59 + ExpiryMonth.GetHashCode();
                    if (ExpiryYear != null)
                    hashCode = hashCode * 59 + ExpiryYear.GetHashCode();
                    if (SecurityCode != null)
                    hashCode = hashCode * 59 + SecurityCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CardUpdate left, CardUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CardUpdate left, CardUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
