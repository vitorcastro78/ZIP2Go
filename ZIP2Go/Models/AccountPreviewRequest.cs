/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccountPreviewRequest : IEquatable<AccountPreviewRequest>
    { 
        /// <summary>
        /// Any combination of one-time, recurring, and usage.
        /// </summary>
        /// <value>Any combination of one-time, recurring, and usage.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ExcludeEnum
        {
            /// <summary>
            /// Enum OneTimeEnum for one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            OneTimeEnum = 0,
            /// <summary>
            /// Enum RecurringEnum for recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            RecurringEnum = 1,
            /// <summary>
            /// Enum UsageEnum for usage
            /// </summary>
            [EnumMember(Value = "usage")]
            UsageEnum = 2        }

        /// <summary>
        /// Any combination of one-time, recurring, and usage.
        /// </summary>
        /// <value>Any combination of one-time, recurring, and usage.</value>

        [DataMember(Name="exclude")]
        public ExcludeEnum? Exclude { get; set; }

        /// <summary>
        /// Indicates whether to include items in the draft status.
        /// </summary>
        /// <value>Indicates whether to include items in the draft status.</value>

        [DataMember(Name="include_draft_items")]
        public bool? IncludeDraftItems { get; set; }

        /// <summary>
        /// Indicates whether to include evergreen subscriptions.
        /// </summary>
        /// <value>Indicates whether to include evergreen subscriptions.</value>

        [DataMember(Name="include_evergreen_subscriptions")]
        public bool? IncludeEvergreenSubscriptions { get; set; }

        /// <summary>
        /// The target date is used to determine which charges to bill. All unbilled charges as of or prior to the target date are included. Zuora automatically keeps track of all charges that need to be billed and that have not been billed prior to the target date.
        /// </summary>
        /// <value>The target date is used to determine which charges to bill. All unbilled charges as of or prior to the target date are included. Zuora automatically keeps track of all charges that need to be billed and that have not been billed prior to the target date.</value>
        [Required]

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountPreviewRequest {\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  IncludeDraftItems: ").Append(IncludeDraftItems).Append("\n");
            sb.Append("  IncludeEvergreenSubscriptions: ").Append(IncludeEvergreenSubscriptions).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountPreviewRequest)obj);
        }

        /// <summary>
        /// Returns true if AccountPreviewRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountPreviewRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountPreviewRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Exclude == other.Exclude ||
                    Exclude != null &&
                    Exclude.Equals(other.Exclude)
                ) && 
                (
                    IncludeDraftItems == other.IncludeDraftItems ||
                    IncludeDraftItems != null &&
                    IncludeDraftItems.Equals(other.IncludeDraftItems)
                ) && 
                (
                    IncludeEvergreenSubscriptions == other.IncludeEvergreenSubscriptions ||
                    IncludeEvergreenSubscriptions != null &&
                    IncludeEvergreenSubscriptions.Equals(other.IncludeEvergreenSubscriptions)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Exclude != null)
                    hashCode = hashCode * 59 + Exclude.GetHashCode();
                    if (IncludeDraftItems != null)
                    hashCode = hashCode * 59 + IncludeDraftItems.GetHashCode();
                    if (IncludeEvergreenSubscriptions != null)
                    hashCode = hashCode * 59 + IncludeEvergreenSubscriptions.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountPreviewRequest left, AccountPreviewRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountPreviewRequest left, AccountPreviewRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
