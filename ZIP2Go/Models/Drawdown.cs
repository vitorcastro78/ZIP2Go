/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Drawdown : IEquatable<Drawdown>
    { 
        /// <summary>
        /// The conversion rate between usage unit of measure (UOM) and drawdown unit of measure for a drawdown charge.        **Note**:    &lt;ul&gt;    &lt;li&gt;Must be a positive number (&gt;0).&lt;/li&gt;    &lt;li&gt;Must be &#x60;1&#x60; when usage UOM and drawdown UOM are the same.&lt;/li&gt;     &lt;li&gt;If both &#x60;conversion_rate&#x60; and &#x60;unit_of_measure&#x60; for the drawdown are empty, the system will set default values respectively: &lt;ul&gt;      &lt;li&gt; &#x60;conversion_rate&#x60;: 1 &lt;/li&gt;      &lt;li&gt; &#x60;unit_of_measure&#x60;: Same as the usage UOM of this drawdown charge. &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;        The &#x60;conversion_rate&#x60; and &#x60;unit_of_measure&#x60; fields need to have values or be empty at the same time.     
        /// </summary>
        /// <value>The conversion rate between usage unit of measure (UOM) and drawdown unit of measure for a drawdown charge.        **Note**:    &lt;ul&gt;    &lt;li&gt;Must be a positive number (&gt;0).&lt;/li&gt;    &lt;li&gt;Must be &#x60;1&#x60; when usage UOM and drawdown UOM are the same.&lt;/li&gt;     &lt;li&gt;If both &#x60;conversion_rate&#x60; and &#x60;unit_of_measure&#x60; for the drawdown are empty, the system will set default values respectively: &lt;ul&gt;      &lt;li&gt; &#x60;conversion_rate&#x60;: 1 &lt;/li&gt;      &lt;li&gt; &#x60;unit_of_measure&#x60;: Same as the usage UOM of this drawdown charge. &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;        The &#x60;conversion_rate&#x60; and &#x60;unit_of_measure&#x60; fields need to have values or be empty at the same time.     </value>

        [DataMember(Name="conversion_rate")]
        public decimal? ConversionRate { get; set; }

        /// <summary>
        /// Unit of measurement for a drawdown charge.
        /// </summary>
        /// <value>Unit of measurement for a drawdown charge.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Drawdown {\n");
            sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Drawdown)obj);
        }

        /// <summary>
        /// Returns true if Drawdown instances are equal
        /// </summary>
        /// <param name="other">Instance of Drawdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Drawdown other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConversionRate == other.ConversionRate ||
                    ConversionRate != null &&
                    ConversionRate.Equals(other.ConversionRate)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ConversionRate != null)
                    hashCode = hashCode * 59 + ConversionRate.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Drawdown left, Drawdown right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Drawdown left, Drawdown right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
