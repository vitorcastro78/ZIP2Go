/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.Models
{
    /// <summary>
    /// Price information.
    /// </summary>
    [DataContract]
    public partial class Price : IEquatable<Price>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfPriceCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// The name of the price.
        /// </summary>
        /// <value>The name of the price.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>

        [MaxLength(100)]
        [DataMember(Name="recognized_revenue_accounting_code")]
        public string RecognizedRevenueAccountingCode { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>

        [MaxLength(100)]
        [DataMember(Name="deferred_revenue_accounting_code")]
        public string DeferredRevenueAccountingCode { get; set; }

        /// <summary>
        /// Gets or Sets Recurring
        /// </summary>

        [DataMember(Name="recurring")]
        public Recurring Recurring { get; set; }

        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StartEventEnum
        {
            /// <summary>
            /// Enum ContractEffectiveEnum for contract_effective
            /// </summary>
            [EnumMember(Value = "contract_effective")]
            ContractEffectiveEnum = 0,
            /// <summary>
            /// Enum ServiceActivationEnum for service_activation
            /// </summary>
            [EnumMember(Value = "service_activation")]
            ServiceActivationEnum = 1,
            /// <summary>
            /// Enum CustomerAcceptanceEnum for customer_acceptance
            /// </summary>
            [EnumMember(Value = "customer_acceptance")]
            CustomerAcceptanceEnum = 2,
            /// <summary>
            /// Enum SpecificDateEnum for specific_date
            /// </summary>
            [EnumMember(Value = "specific_date")]
            SpecificDateEnum = 3        }

        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>

        [DataMember(Name="start_event")]
        public StartEventEnum? StartEvent { get; set; }

        /// <summary>
        /// Specifies the mode for tiered prices.
        /// </summary>
        /// <value>Specifies the mode for tiered prices.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TiersModeEnum
        {
            /// <summary>
            /// Enum GraduatedEnum for graduated
            /// </summary>
            [EnumMember(Value = "graduated")]
            GraduatedEnum = 0,
            /// <summary>
            /// Enum VolumeEnum for volume
            /// </summary>
            [EnumMember(Value = "volume")]
            VolumeEnum = 1,
            /// <summary>
            /// Enum HighWatermarkVolumeEnum for high_watermark_volume
            /// </summary>
            [EnumMember(Value = "high_watermark_volume")]
            HighWatermarkVolumeEnum = 2,
            /// <summary>
            /// Enum HighWatermarkGraduatedEnum for high_watermark_graduated
            /// </summary>
            [EnumMember(Value = "high_watermark_graduated")]
            HighWatermarkGraduatedEnum = 3,
            /// <summary>
            /// Enum GraduatedWithOverageEnum for graduated_with_overage
            /// </summary>
            [EnumMember(Value = "graduated_with_overage")]
            GraduatedWithOverageEnum = 4        }

        /// <summary>
        /// Specifies the mode for tiered prices.
        /// </summary>
        /// <value>Specifies the mode for tiered prices.</value>

        [DataMember(Name="tiers_mode")]
        public TiersModeEnum? TiersMode { get; set; }

        /// <summary>
        /// Gets or Sets ApplyDiscountTo
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ApplyDiscountToEnum
        {
            /// <summary>
            /// Enum OneTimeEnum for one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            OneTimeEnum = 0,
            /// <summary>
            /// Enum RecurringEnum for recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            RecurringEnum = 1,
            /// <summary>
            /// Enum UsageEnum for usage
            /// </summary>
            [EnumMember(Value = "usage")]
            UsageEnum = 2        }

        /// <summary>
        /// Any combination of one_time, recurring and plan.
        /// </summary>
        /// <value>Any combination of one_time, recurring and plan.</value>

        [DataMember(Name="apply_discount_to")]
        public List<ApplyDiscountToEnum> ApplyDiscountTo { get; set; }

        /// <summary>
        /// Price information for different tiers. When creating or updating tiered prices, you must specify this field and the &#x60;tiers_mode&#x60; field.
        /// </summary>
        /// <value>Price information for different tiers. When creating or updating tiered prices, you must specify this field and the &#x60;tiers_mode&#x60; field.</value>

        [DataMember(Name="tiers")]
        public List<Tier> Tiers { get; set; }

        /// <summary>
        /// A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.
        /// </summary>
        /// <value>A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.</value>

        [DataMember(Name="tax_code")]
        public string TaxCode { get; set; }

        /// <summary>
        /// If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.
        /// </summary>
        /// <value>If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.</value>

        [DataMember(Name="tax_inclusive")]
        public bool? TaxInclusive { get; set; }

        /// <summary>
        /// A configured unit of measure. This field is required for per-unit prices.
        /// </summary>
        /// <value>A configured unit of measure. This field is required for per-unit prices.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Quantity of the product to which your customers subscribe.
        /// </summary>
        /// <value>Quantity of the product to which your customers subscribe.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// The minimum quantity for a price. Specify this field and the &#x60;max_quantity&#x60; field to create a range of quantities allowed in a price.
        /// </summary>
        /// <value>The minimum quantity for a price. Specify this field and the &#x60;max_quantity&#x60; field to create a range of quantities allowed in a price.</value>

        [DataMember(Name="min_quantity")]
        public decimal? MinQuantity { get; set; }

        /// <summary>
        /// The maximum quantity for a price. Specify this field and the &#x60;min_quantity&#x60; field to create a range of quantities allowed in a price.
        /// </summary>
        /// <value>The maximum quantity for a price. Specify this field and the &#x60;min_quantity&#x60; field to create a range of quantities allowed in a price.</value>

        [DataMember(Name="max_quantity")]
        public decimal? MaxQuantity { get; set; }

        /// <summary>
        /// Specifies at what level a discount should be applied: account, subscription, or plan.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied: account, subscription, or plan.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DiscountLevelEnum
        {
            /// <summary>
            /// Enum AccountEnum for account
            /// </summary>
            [EnumMember(Value = "account")]
            AccountEnum = 0,
            /// <summary>
            /// Enum SubscriptionEnum for subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            SubscriptionEnum = 1,
            /// <summary>
            /// Enum PlanEnum for plan
            /// </summary>
            [EnumMember(Value = "plan")]
            PlanEnum = 2        }

        /// <summary>
        /// Specifies at what level a discount should be applied: account, subscription, or plan.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied: account, subscription, or plan.</value>

        [DataMember(Name="discount_level")]
        public DiscountLevelEnum? DiscountLevel { get; set; }

        /// <summary>
        /// Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time.
        /// </summary>
        /// <value>Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RevenueRecognitionRuleEnum
        {
            /// <summary>
            /// Enum OnInvoiceEnum for on_invoice
            /// </summary>
            [EnumMember(Value = "on_invoice")]
            OnInvoiceEnum = 0,
            /// <summary>
            /// Enum DailyOverTimeEnum for daily_over_time
            /// </summary>
            [EnumMember(Value = "daily_over_time")]
            DailyOverTimeEnum = 1        }

        /// <summary>
        /// Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time.
        /// </summary>
        /// <value>Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time.</value>

        [DataMember(Name="revenue_recognition_rule")]
        public RevenueRecognitionRuleEnum? RevenueRecognitionRule { get; set; }

        /// <summary>
        /// This field is only applicable for the Percentage Discount price. This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:        &lt;ul&gt;       &lt;li&gt;&#x60;true&#x60;: This is a stacked discount, which should be calculated by stacking with other discounts.&lt;/li&gt;       &lt;li&gt; &#x60;false&#x60;: This is not a stacked discount, which should be calculated in sequence with other discounts.&lt;/li&gt;&lt;/ul&gt; For more information, see &lt;a href&#x3D;&#x27;https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models&#x27; target&#x3D;&#x27;_blank&#x27;&gt;Stacked discounts&lt;/a&gt;
        /// </summary>
        /// <value>This field is only applicable for the Percentage Discount price. This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:        &lt;ul&gt;       &lt;li&gt;&#x60;true&#x60;: This is a stacked discount, which should be calculated by stacking with other discounts.&lt;/li&gt;       &lt;li&gt; &#x60;false&#x60;: This is not a stacked discount, which should be calculated in sequence with other discounts.&lt;/li&gt;&lt;/ul&gt; For more information, see &lt;a href&#x3D;&#x27;https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models&#x27; target&#x3D;&#x27;_blank&#x27;&gt;Stacked discounts&lt;/a&gt;</value>

        [DataMember(Name="stacked_discount")]
        public bool? StackedDiscount { get; set; }

        /// <summary>
        /// Gets or Sets Amounts
        /// </summary>

        [DataMember(Name="amounts")]
        public Dictionary<string, decimal?> Amounts { get; set; }

        /// <summary>
        /// Gets or Sets UnitAmounts
        /// </summary>

        [DataMember(Name="unit_amounts")]
        public Dictionary<string, decimal?> UnitAmounts { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmounts
        /// </summary>

        [DataMember(Name="discount_amounts")]
        public Dictionary<string, decimal?> DiscountAmounts { get; set; }

        /// <summary>
        /// Discount percent. Specify this field if you offer a percentage-based discount.
        /// </summary>
        /// <value>Discount percent. Specify this field if you offer a percentage-based discount.</value>

        [DataMember(Name="discount_percent")]
        public decimal? DiscountPercent { get; set; }

        /// <summary>
        /// Specifies the base interval of a price. If not provided, this field defaults to `billing_period`.
        /// </summary>
        /// <value>Specifies the base interval of a price. If not provided, this field defaults to `billing_period`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PriceBaseIntervalEnum
        {
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 0,
            /// <summary>
            /// Enum BillingPeriodEnum for billing_period
            /// </summary>
            [EnumMember(Value = "billing_period")]
            BillingPeriodEnum = 1,
            /// <summary>
            /// Enum WeekEnum for week
            /// </summary>
            [EnumMember(Value = "week")]
            WeekEnum = 2        }

        /// <summary>
        /// Specifies the base interval of a price. If not provided, this field defaults to &#x60;billing_period&#x60;.
        /// </summary>
        /// <value>Specifies the base interval of a price. If not provided, this field defaults to &#x60;billing_period&#x60;.</value>

        [DataMember(Name="price_base_interval")]
        public PriceBaseIntervalEnum? PriceBaseInterval { get; set; }

        /// <summary>
        /// Gets or Sets Overage
        /// </summary>

        [DataMember(Name="overage")]
        public AllOfPriceOverage Overage { get; set; }

        /// <summary>
        /// Gets or Sets Revenue
        /// </summary>

        [DataMember(Name="revenue")]
        public AllOfPriceRevenue Revenue { get; set; }

        /// <summary>
        /// An active accounting code defined in **Finance Settings &gt; Configure Accounting Codes** in your Zuora tenant.
        /// </summary>
        /// <value>An active accounting code defined in **Finance Settings &gt; Configure Accounting Codes** in your Zuora tenant.</value>

        [DataMember(Name="accounting_code")]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Gets or Sets Prepayment
        /// </summary>

        [DataMember(Name="prepayment")]
        public Prepayment Prepayment { get; set; }

        /// <summary>
        /// Gets or Sets Drawdown
        /// </summary>

        [DataMember(Name="drawdown")]
        public Drawdown Drawdown { get; set; }

        /// <summary>
        /// Gets or Sets Taxable
        /// </summary>

        [DataMember(Name="taxable")]
        public bool? Taxable { get; set; }

        /// <summary>
        /// Specify the ID of a plan to which this price is associated.
        /// </summary>
        /// <value>Specify the ID of a plan to which this price is associated.</value>

        [DataMember(Name="plan_id")]
        public string PlanId { get; set; }

        /// <summary>
        /// Specify the number of a plan to which this price is associated. This field is required if plan_id is not supplied
        /// </summary>
        /// <value>Specify the number of a plan to which this price is associated. This field is required if plan_id is not supplied</value>

        [DataMember(Name="plan_number")]
        public string PlanNumber { get; set; }

        /// <summary>
        /// Name of the custom field that will be used to set a per unit rate under the &#x60;Pre-Rated Per Unit&#x60; charge model 
        /// </summary>
        /// <value>Name of the custom field that will be used to set a per unit rate under the &#x60;Pre-Rated Per Unit&#x60; charge model </value>

        [DataMember(Name="custom_field_per_unit_rate")]
        public string CustomFieldPerUnitRate { get; set; }

        /// <summary>
        /// Name of the custom field that will be used to set a total amount under the &#x60;Pre-Rated&#x60; charge model 
        /// </summary>
        /// <value>Name of the custom field that will be used to set a total amount under the &#x60;Pre-Rated&#x60; charge model </value>

        [DataMember(Name="custom_field_total_amount")]
        public string CustomFieldTotalAmount { get; set; }

        /// <summary>
        /// Whether the price can be used for new purchases.
        /// </summary>
        /// <value>Whether the price can be used for new purchases.</value>

        [DataMember(Name="active")]
        public bool? Active { get; set; }

        /// <summary>
        /// The type of charge. Can be &#x60;one_time&#x60;,&#x60;recurring&#x60;, or &#x60;usage&#x60;.
        /// </summary>
        /// <value>The type of charge. Can be &#x60;one_time&#x60;,&#x60;recurring&#x60;, or &#x60;usage&#x60;.</value>

        [DataMember(Name="charge_type")]
        public string ChargeType { get; set; }

        /// <summary>
        /// The charge model of the price, which determines how users are charged. Common charge models include flat fee, per-unit, volume, and tiered prices.
        /// </summary>
        /// <value>The charge model of the price, which determines how users are charged. Common charge models include flat fee, per-unit, volume, and tiered prices.</value>

        [DataMember(Name="charge_model")]
        public string ChargeModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Price {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RecognizedRevenueAccountingCode: ").Append(RecognizedRevenueAccountingCode).Append("\n");
            sb.Append("  DeferredRevenueAccountingCode: ").Append(DeferredRevenueAccountingCode).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  StartEvent: ").Append(StartEvent).Append("\n");
            sb.Append("  TiersMode: ").Append(TiersMode).Append("\n");
            sb.Append("  ApplyDiscountTo: ").Append(ApplyDiscountTo).Append("\n");
            sb.Append("  Tiers: ").Append(Tiers).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  TaxInclusive: ").Append(TaxInclusive).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  MinQuantity: ").Append(MinQuantity).Append("\n");
            sb.Append("  MaxQuantity: ").Append(MaxQuantity).Append("\n");
            sb.Append("  DiscountLevel: ").Append(DiscountLevel).Append("\n");
            sb.Append("  RevenueRecognitionRule: ").Append(RevenueRecognitionRule).Append("\n");
            sb.Append("  StackedDiscount: ").Append(StackedDiscount).Append("\n");
            sb.Append("  Amounts: ").Append(Amounts).Append("\n");
            sb.Append("  UnitAmounts: ").Append(UnitAmounts).Append("\n");
            sb.Append("  DiscountAmounts: ").Append(DiscountAmounts).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  PriceBaseInterval: ").Append(PriceBaseInterval).Append("\n");
            sb.Append("  Overage: ").Append(Overage).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  Prepayment: ").Append(Prepayment).Append("\n");
            sb.Append("  Drawdown: ").Append(Drawdown).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  PlanNumber: ").Append(PlanNumber).Append("\n");
            sb.Append("  CustomFieldPerUnitRate: ").Append(CustomFieldPerUnitRate).Append("\n");
            sb.Append("  CustomFieldTotalAmount: ").Append(CustomFieldTotalAmount).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  ChargeModel: ").Append(ChargeModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Price)obj);
        }

        /// <summary>
        /// Returns true if Price instances are equal
        /// </summary>
        /// <param name="other">Instance of Price to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Price other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    RecognizedRevenueAccountingCode == other.RecognizedRevenueAccountingCode ||
                    RecognizedRevenueAccountingCode != null &&
                    RecognizedRevenueAccountingCode.Equals(other.RecognizedRevenueAccountingCode)
                ) && 
                (
                    DeferredRevenueAccountingCode == other.DeferredRevenueAccountingCode ||
                    DeferredRevenueAccountingCode != null &&
                    DeferredRevenueAccountingCode.Equals(other.DeferredRevenueAccountingCode)
                ) && 
                (
                    Recurring == other.Recurring ||
                    Recurring != null &&
                    Recurring.Equals(other.Recurring)
                ) && 
                (
                    StartEvent == other.StartEvent ||
                    StartEvent != null &&
                    StartEvent.Equals(other.StartEvent)
                ) && 
                (
                    TiersMode == other.TiersMode ||
                    TiersMode != null &&
                    TiersMode.Equals(other.TiersMode)
                ) && 
                (
                    ApplyDiscountTo == other.ApplyDiscountTo ||
                    ApplyDiscountTo != null &&
                    ApplyDiscountTo.SequenceEqual(other.ApplyDiscountTo)
                ) && 
                (
                    Tiers == other.Tiers ||
                    Tiers != null &&
                    Tiers.SequenceEqual(other.Tiers)
                ) && 
                (
                    TaxCode == other.TaxCode ||
                    TaxCode != null &&
                    TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    TaxInclusive == other.TaxInclusive ||
                    TaxInclusive != null &&
                    TaxInclusive.Equals(other.TaxInclusive)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    MinQuantity == other.MinQuantity ||
                    MinQuantity != null &&
                    MinQuantity.Equals(other.MinQuantity)
                ) && 
                (
                    MaxQuantity == other.MaxQuantity ||
                    MaxQuantity != null &&
                    MaxQuantity.Equals(other.MaxQuantity)
                ) && 
                (
                    DiscountLevel == other.DiscountLevel ||
                    DiscountLevel != null &&
                    DiscountLevel.Equals(other.DiscountLevel)
                ) && 
                (
                    RevenueRecognitionRule == other.RevenueRecognitionRule ||
                    RevenueRecognitionRule != null &&
                    RevenueRecognitionRule.Equals(other.RevenueRecognitionRule)
                ) && 
                (
                    StackedDiscount == other.StackedDiscount ||
                    StackedDiscount != null &&
                    StackedDiscount.Equals(other.StackedDiscount)
                ) && 
                (
                    Amounts == other.Amounts ||
                    Amounts != null &&
                    Amounts.SequenceEqual(other.Amounts)
                ) && 
                (
                    UnitAmounts == other.UnitAmounts ||
                    UnitAmounts != null &&
                    UnitAmounts.SequenceEqual(other.UnitAmounts)
                ) && 
                (
                    DiscountAmounts == other.DiscountAmounts ||
                    DiscountAmounts != null &&
                    DiscountAmounts.SequenceEqual(other.DiscountAmounts)
                ) && 
                (
                    DiscountPercent == other.DiscountPercent ||
                    DiscountPercent != null &&
                    DiscountPercent.Equals(other.DiscountPercent)
                ) && 
                (
                    PriceBaseInterval == other.PriceBaseInterval ||
                    PriceBaseInterval != null &&
                    PriceBaseInterval.Equals(other.PriceBaseInterval)
                ) && 
                (
                    Overage == other.Overage ||
                    Overage != null &&
                    Overage.Equals(other.Overage)
                ) && 
                (
                    Revenue == other.Revenue ||
                    Revenue != null &&
                    Revenue.Equals(other.Revenue)
                ) && 
                (
                    AccountingCode == other.AccountingCode ||
                    AccountingCode != null &&
                    AccountingCode.Equals(other.AccountingCode)
                ) && 
                (
                    Prepayment == other.Prepayment ||
                    Prepayment != null &&
                    Prepayment.Equals(other.Prepayment)
                ) && 
                (
                    Drawdown == other.Drawdown ||
                    Drawdown != null &&
                    Drawdown.Equals(other.Drawdown)
                ) && 
                (
                    Taxable == other.Taxable ||
                    Taxable != null &&
                    Taxable.Equals(other.Taxable)
                ) && 
                (
                    PlanId == other.PlanId ||
                    PlanId != null &&
                    PlanId.Equals(other.PlanId)
                ) && 
                (
                    PlanNumber == other.PlanNumber ||
                    PlanNumber != null &&
                    PlanNumber.Equals(other.PlanNumber)
                ) && 
                (
                    CustomFieldPerUnitRate == other.CustomFieldPerUnitRate ||
                    CustomFieldPerUnitRate != null &&
                    CustomFieldPerUnitRate.Equals(other.CustomFieldPerUnitRate)
                ) && 
                (
                    CustomFieldTotalAmount == other.CustomFieldTotalAmount ||
                    CustomFieldTotalAmount != null &&
                    CustomFieldTotalAmount.Equals(other.CustomFieldTotalAmount)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    ChargeType == other.ChargeType ||
                    ChargeType != null &&
                    ChargeType.Equals(other.ChargeType)
                ) && 
                (
                    ChargeModel == other.ChargeModel ||
                    ChargeModel != null &&
                    ChargeModel.Equals(other.ChargeModel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (RecognizedRevenueAccountingCode != null)
                    hashCode = hashCode * 59 + RecognizedRevenueAccountingCode.GetHashCode();
                    if (DeferredRevenueAccountingCode != null)
                    hashCode = hashCode * 59 + DeferredRevenueAccountingCode.GetHashCode();
                    if (Recurring != null)
                    hashCode = hashCode * 59 + Recurring.GetHashCode();
                    if (StartEvent != null)
                    hashCode = hashCode * 59 + StartEvent.GetHashCode();
                    if (TiersMode != null)
                    hashCode = hashCode * 59 + TiersMode.GetHashCode();
                    if (ApplyDiscountTo != null)
                    hashCode = hashCode * 59 + ApplyDiscountTo.GetHashCode();
                    if (Tiers != null)
                    hashCode = hashCode * 59 + Tiers.GetHashCode();
                    if (TaxCode != null)
                    hashCode = hashCode * 59 + TaxCode.GetHashCode();
                    if (TaxInclusive != null)
                    hashCode = hashCode * 59 + TaxInclusive.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (MinQuantity != null)
                    hashCode = hashCode * 59 + MinQuantity.GetHashCode();
                    if (MaxQuantity != null)
                    hashCode = hashCode * 59 + MaxQuantity.GetHashCode();
                    if (DiscountLevel != null)
                    hashCode = hashCode * 59 + DiscountLevel.GetHashCode();
                    if (RevenueRecognitionRule != null)
                    hashCode = hashCode * 59 + RevenueRecognitionRule.GetHashCode();
                    if (StackedDiscount != null)
                    hashCode = hashCode * 59 + StackedDiscount.GetHashCode();
                    if (Amounts != null)
                    hashCode = hashCode * 59 + Amounts.GetHashCode();
                    if (UnitAmounts != null)
                    hashCode = hashCode * 59 + UnitAmounts.GetHashCode();
                    if (DiscountAmounts != null)
                    hashCode = hashCode * 59 + DiscountAmounts.GetHashCode();
                    if (DiscountPercent != null)
                    hashCode = hashCode * 59 + DiscountPercent.GetHashCode();
                    if (PriceBaseInterval != null)
                    hashCode = hashCode * 59 + PriceBaseInterval.GetHashCode();
                    if (Overage != null)
                    hashCode = hashCode * 59 + Overage.GetHashCode();
                    if (Revenue != null)
                    hashCode = hashCode * 59 + Revenue.GetHashCode();
                    if (AccountingCode != null)
                    hashCode = hashCode * 59 + AccountingCode.GetHashCode();
                    if (Prepayment != null)
                    hashCode = hashCode * 59 + Prepayment.GetHashCode();
                    if (Drawdown != null)
                    hashCode = hashCode * 59 + Drawdown.GetHashCode();
                    if (Taxable != null)
                    hashCode = hashCode * 59 + Taxable.GetHashCode();
                    if (PlanId != null)
                    hashCode = hashCode * 59 + PlanId.GetHashCode();
                    if (PlanNumber != null)
                    hashCode = hashCode * 59 + PlanNumber.GetHashCode();
                    if (CustomFieldPerUnitRate != null)
                    hashCode = hashCode * 59 + CustomFieldPerUnitRate.GetHashCode();
                    if (CustomFieldTotalAmount != null)
                    hashCode = hashCode * 59 + CustomFieldTotalAmount.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (ChargeType != null)
                    hashCode = hashCode * 59 + ChargeType.GetHashCode();
                    if (ChargeModel != null)
                    hashCode = hashCode * 59 + ChargeModel.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Price left, Price right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Price left, Price right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
