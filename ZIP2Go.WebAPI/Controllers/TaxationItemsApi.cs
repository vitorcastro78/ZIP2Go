/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ZIP2GO.Service.Models;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller para gerenciamento de itens de tributação
    /// </summary>
    [ApiController]
    public class TaxationItemsController : ControllerBaseApi
    {
        private readonly ITaxationItemsService _taxationItemsService;

        public TaxationItemsController(
            ITaxationItemsService taxationItemsService,
            IHttpContextAccessor httpContext,
            IEasyCachingProvider cache,
            ILogger<TaxationItemsController> logger) : base(httpContext, cache, logger)
        {
            _taxationItemsService = taxationItemsService ?? throw new ArgumentNullException(nameof(taxationItemsService));
        }

        /// <summary>
        /// Cria um novo item de tributação
        /// </summary>
        /// <remarks>Cria um novo item de tributação com os dados fornecidos.</remarks>
        [HttpPost]
        [Route("/v2/taxation_items")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateTaxationItem")]
        [SwaggerResponse(statusCode: 201, type: typeof(TaxationItem), description: "Item de tributação criado com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        public virtual async Task<IActionResult> CreateTaxationItem(
            [FromBody] TaxationItemCreateRequest request,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            if (request == null)
            {
                _logger.LogWarning("Tentativa de criar item de tributação com corpo nulo");
                return BadRequest(new ErrorResponse { Message = "O corpo da requisição é obrigatório" });
            }

            return await ExecuteWithErrorHandlingAsync(async () =>
            {
                var result = await _taxationItemsService.CreateTaxationItemAsync(
                    request, fields, expand, filter, pageSize,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey);

                _logger.LogInformation("Item de tributação criado com sucesso: {TaxationItemId}", result.Id);
                return CreatedAtAction(nameof(GetTaxationItem), new { taxationItemId = result.Id }, result);
            });
        }

        /// <summary>
        /// Exclui um item de tributação
        /// </summary>
        /// <remarks>Exclui permanentemente um item de tributação. Esta operação não pode ser desfeita.</remarks>
        [HttpDelete]
        [Route("/v2/taxation_items/{taxation_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteTaxationItem")]
        [SwaggerResponse(statusCode: 204, description: "Item de tributação excluído com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> DeleteTaxationItem(
            [FromRoute][Required] string taxationItemId,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidateResourceId(taxationItemId, "item de tributação");

            return await ExecuteWithErrorHandlingAsync(async () =>
            {
                await _taxationItemsService.DeleteTaxationItemAsync(
                    taxationItemId, zuoraTrackId, zuoraEntityIds, idempotencyKey);

                _logger.LogInformation("Item de tributação excluído com sucesso: {TaxationItemId}", taxationItemId);
                return NoContent();
            });
        }

        /// <summary>
        /// Obtém um item de tributação específico
        /// </summary>
        /// <remarks>Retorna os detalhes de um item de tributação específico.</remarks>
        [HttpGet]
        [Route("/v2/taxation_items/{taxation_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTaxationItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(TaxationItem), description: "Item de tributação")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> GetTaxationItem(
            [FromRoute][Required] string taxationItemId,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidateResourceId(taxationItemId, "item de tributação");
            ValidatePaginationParameters(pageSize);

            var cacheKey = $"taxation_item_{taxationItemId}";
            return await ExecuteWithCacheAsync(
                cacheKey,
                async () => await _taxationItemsService.GetTaxationItemAsync(
                    taxationItemId, fields, expand, filter, pageSize,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey));
        }

        /// <summary>
        /// Obtém itens de tributação
        /// </summary>
        /// <remarks>Retorna uma lista de itens de tributação com base nos filtros especificados.</remarks>
        [HttpGet]
        [Route("/v2/taxation_items")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTaxationItems")]
        [SwaggerResponse(statusCode: 200, type: typeof(TaxationItemListResponse), description: "Lista de itens de tributação")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> GetTaxationItems(
            [FromQuery] string cursor,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery] List<string> sort,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromQuery] List<string> fields,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidatePaginationParameters(pageSize);

            var cacheKey = $"taxation_items_{cursor}_{string.Join(",", filter ?? new List<string>())}_{pageSize}";
            return await ExecuteWithCacheAsync(
                cacheKey,
                async () => await _taxationItemsService.GetTaxationItemsAsync(
                    cursor, expand, filter, sort, pageSize, fields,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey));
        }

        /// <summary>
        /// Atualiza um item de tributação
        /// </summary>
        /// <remarks>Atualiza um item de tributação existente com os dados fornecidos.</remarks>
        [HttpPatch]
        [Route("/v2/taxation_items/{taxation_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateTaxationItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(TaxationItem), description: "Item de tributação atualizado com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> UpdateTaxationItem(
            [FromBody] TaxationItemPatchRequest request,
            [FromRoute][Required] string taxationItemId,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            if (request == null)
            {
                _logger.LogWarning("Tentativa de atualizar item de tributação com corpo nulo");
                return BadRequest(new ErrorResponse { Message = "O corpo da requisição é obrigatório" });
            }

            ValidateResourceId(taxationItemId, "item de tributação");
            ValidatePaginationParameters(pageSize);

            return await ExecuteWithErrorHandlingAsync(async () =>
            {
                var result = await _taxationItemsService.UpdateTaxationItemAsync(
                    request, taxationItemId, fields, expand, filter, pageSize,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey);

                _logger.LogInformation("Item de tributação atualizado com sucesso: {TaxationItemId}", taxationItemId);
                return Ok(result);
            });
        }
    }
}