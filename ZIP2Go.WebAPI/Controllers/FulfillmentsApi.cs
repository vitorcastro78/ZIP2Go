/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using EasyCaching.Core;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using ZIP2GO.Service.Models;
using Newtonsoft.Json;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;

using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;
using ZIP2Go.WebAPI.Controllers;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class FulfillmentsApiController : ControllerBaseApi
    {
        private readonly IFulfillmentsService _fulfillmentsService;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IEasyCachingProvider _cacheProvider;

        public FulfillmentsApiController(
            IFulfillmentsService fulfillmentsService,
            IHttpContextAccessor httpContextAccessor,
            IEasyCachingProvider cache) : base(httpContextAccessor, cache)
        {
            _fulfillmentsService = fulfillmentsService ?? throw new ArgumentNullException(nameof(fulfillmentsService));
            _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));
            _cacheProvider = cache ?? throw new ArgumentNullException(nameof(cache));
        }

        /// <summary>
        /// Creates a new fulfillment
        /// </summary>
        /// <param name="body">The fulfillment data to create</param>
        /// <returns>The created fulfillment</returns>
        [HttpPost]
        [Route("/v2/fulfillments")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateFulfillment")]
        [SwaggerResponse(statusCode: 201, type: typeof(Fulfillment), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> CreateFulfillment([FromBody] FulfillmentCreateRequest body)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Fulfillment));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"quantity\" : 0.8008281904610115,\n  \"target_date\" : \"2022-01-01T00:00:00.000+00:00\",\n  \"custom_fields\" : \"\",\n  \"description\" : \"description\",\n  \"external_id\" : \"external_id\",\n  \"type\" : \"delivery\",\n  \"fulfillment_date\" : \"2023-01-01T00:00:00.000+00:00\",\n  \"fulfillment_system\" : \"fulfillment_system\",\n  \"fulfillment_number\" : \"fulfillment_number\",\n  \"carrier\" : \"carrier\",\n  \"revenue\" : \"\",\n  \"custom_objects\" : \"\",\n  \"order_line_item_id\" : \"order_line_item_id\",\n  \"tracking_number\" : \"tracking_number\",\n  \"updated_by_id\" : \"updated_by_id\",\n  \"location\" : \"\",\n  \"id\" : \"id\",\n  \"created_by_id\" : \"created_by_id\",\n  \"state\" : \"accepted\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Fulfillment>(exampleJson)
            : default(Fulfillment);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates multiple fulfillments
        /// </summary>
        /// <param name="body">The list of fulfillments to create</param>
        /// <returns>The list of created fulfillments</returns>
        [HttpPost]
        [Route("/v2/fulfillments/bulk_create")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateFulfillments")]
        [SwaggerResponse(statusCode: 201, type: typeof(FulfillmentCreateBulkResponse), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> CreateFulfillments([FromBody] FulfillmentCreateBulkRequest body)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(FulfillmentCreateBulkResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"amount_paid\" : 0.8008281904610115,\n  \"credit_memo_numbers\" : [ \"credit_memo_numbers\", \"credit_memo_numbers\" ],\n  \"data\" : [ {\n    \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"quantity\" : 0.8008281904610115,\n    \"target_date\" : \"2022-01-01T00:00:00.000+00:00\",\n    \"custom_fields\" : \"\",\n    \"description\" : \"description\",\n    \"external_id\" : \"external_id\",\n    \"type\" : \"delivery\",\n    \"fulfillment_date\" : \"2023-01-01T00:00:00.000+00:00\",\n    \"fulfillment_system\" : \"fulfillment_system\",\n    \"fulfillment_number\" : \"fulfillment_number\",\n    \"carrier\" : \"carrier\",\n    \"revenue\" : \"\",\n    \"custom_objects\" : \"\",\n    \"order_line_item_id\" : \"order_line_item_id\",\n    \"tracking_number\" : \"tracking_number\",\n    \"updated_by_id\" : \"updated_by_id\",\n    \"location\" : \"\",\n    \"id\" : \"id\",\n    \"created_by_id\" : \"created_by_id\",\n    \"state\" : \"accepted\"\n  }, {\n    \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"quantity\" : 0.8008281904610115,\n    \"target_date\" : \"2022-01-01T00:00:00.000+00:00\",\n    \"custom_fields\" : \"\",\n    \"description\" : \"description\",\n    \"external_id\" : \"external_id\",\n    \"type\" : \"delivery\",\n    \"fulfillment_date\" : \"2023-01-01T00:00:00.000+00:00\",\n    \"fulfillment_system\" : \"fulfillment_system\",\n    \"fulfillment_number\" : \"fulfillment_number\",\n    \"carrier\" : \"carrier\",\n    \"revenue\" : \"\",\n    \"custom_objects\" : \"\",\n    \"order_line_item_id\" : \"order_line_item_id\",\n    \"tracking_number\" : \"tracking_number\",\n    \"updated_by_id\" : \"updated_by_id\",\n    \"location\" : \"\",\n    \"id\" : \"id\",\n    \"created_by_id\" : \"created_by_id\",\n    \"state\" : \"accepted\"\n  } ],\n  \"invoice_numbers\" : [ \"invoice_numbers\", \"invoice_numbers\" ],\n  \"payment_number\" : \"payment_number\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FulfillmentCreateBulkResponse>(exampleJson)
            : default(FulfillmentCreateBulkResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes a fulfillment
        /// </summary>
        /// <param name="fulfillmentId">The ID of the fulfillment to delete</param>
        /// <returns>No content if successful</returns>
        [HttpDelete]
        [Route("/v2/fulfillments/{fulfillment_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteFulfillment")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> DeleteFulfillment([FromRoute][Required] string fulfillmentId)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a fulfillment by ID
        /// </summary>
        /// <param name="fulfillmentId">The ID of the fulfillment to retrieve</param>
        /// <returns>The requested fulfillment details</returns>
        [HttpGet]
        [Route("/v2/fulfillments/{fulfillment_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetFulfillment")]
        [SwaggerResponse(statusCode: 200, type: typeof(Fulfillment), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetFulfillment([FromRoute][Required] string fulfillmentId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Fulfillment));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"quantity\" : 0.8008281904610115,\n  \"target_date\" : \"2022-01-01T00:00:00.000+00:00\",\n  \"custom_fields\" : \"\",\n  \"description\" : \"description\",\n  \"external_id\" : \"external_id\",\n  \"type\" : \"delivery\",\n  \"fulfillment_date\" : \"2023-01-01T00:00:00.000+00:00\",\n  \"fulfillment_system\" : \"fulfillment_system\",\n  \"fulfillment_number\" : \"fulfillment_number\",\n  \"carrier\" : \"carrier\",\n  \"revenue\" : \"\",\n  \"custom_objects\" : \"\",\n  \"order_line_item_id\" : \"order_line_item_id\",\n  \"tracking_number\" : \"tracking_number\",\n  \"updated_by_id\" : \"updated_by_id\",\n  \"location\" : \"\",\n  \"id\" : \"id\",\n  \"created_by_id\" : \"created_by_id\",\n  \"state\" : \"accepted\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Fulfillment>(exampleJson)
            : default(Fulfillment);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Lists all fulfillments
        /// </summary>
        /// <returns>A list of fulfillments with pagination information</returns>
        [HttpGet]
        [Route("/v2/fulfillments")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetFulfillments")]
        [SwaggerResponse(statusCode: 200, type: typeof(FilfillmentListResponse), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetFulfillments()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FilfillmentListResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"next_page\" : \"next_page\",\n  \"data\" : [ {\n    \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"quantity\" : 0.8008281904610115,\n    \"target_date\" : \"2022-01-01T00:00:00.000+00:00\",\n    \"custom_fields\" : \"\",\n    \"description\" : \"description\",\n    \"external_id\" : \"external_id\",\n    \"type\" : \"delivery\",\n    \"fulfillment_date\" : \"2023-01-01T00:00:00.000+00:00\",\n    \"fulfillment_system\" : \"fulfillment_system\",\n    \"fulfillment_number\" : \"fulfillment_number\",\n    \"carrier\" : \"carrier\",\n    \"revenue\" : \"\",\n    \"custom_objects\" : \"\",\n    \"order_line_item_id\" : \"order_line_item_id\",\n    \"tracking_number\" : \"tracking_number\",\n    \"updated_by_id\" : \"updated_by_id\",\n    \"location\" : \"\",\n    \"id\" : \"id\",\n    \"created_by_id\" : \"created_by_id\",\n    \"state\" : \"accepted\"\n  }, {\n    \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"quantity\" : 0.8008281904610115,\n    \"target_date\" : \"2022-01-01T00:00:00.000+00:00\",\n    \"custom_fields\" : \"\",\n    \"description\" : \"description\",\n    \"external_id\" : \"external_id\",\n    \"type\" : \"delivery\",\n    \"fulfillment_date\" : \"2023-01-01T00:00:00.000+00:00\",\n    \"fulfillment_system\" : \"fulfillment_system\",\n    \"fulfillment_number\" : \"fulfillment_number\",\n    \"carrier\" : \"carrier\",\n    \"revenue\" : \"\",\n    \"custom_objects\" : \"\",\n    \"order_line_item_id\" : \"order_line_item_id\",\n    \"tracking_number\" : \"tracking_number\",\n    \"updated_by_id\" : \"updated_by_id\",\n    \"location\" : \"\",\n    \"id\" : \"id\",\n    \"created_by_id\" : \"created_by_id\",\n    \"state\" : \"accepted\"\n  } ]\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FilfillmentListResponse>(exampleJson)
            : default(FilfillmentListResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a fulfillment
        /// </summary>
        /// <param name="body">The fulfillment data to update</param>
        /// <param name="fulfillmentId">The ID of the fulfillment to update</param>
        /// <returns>The updated fulfillment details</returns>
        [HttpPatch]
        [Route("/v2/fulfillments/{fulfillment_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateFulfillment")]
        [SwaggerResponse(statusCode: 200, type: typeof(Fulfillment), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> UpdateFulfillment([FromBody] FulfillmentPatchRequest body, [FromRoute][Required] string fulfillmentId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Fulfillment));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"quantity\" : 0.8008281904610115,\n  \"target_date\" : \"2022-01-01T00:00:00.000+00:00\",\n  \"custom_fields\" : \"\",\n  \"description\" : \"description\",\n  \"external_id\" : \"external_id\",\n  \"type\" : \"delivery\",\n  \"fulfillment_date\" : \"2023-01-01T00:00:00.000+00:00\",\n  \"fulfillment_system\" : \"fulfillment_system\",\n  \"fulfillment_number\" : \"fulfillment_number\",\n  \"carrier\" : \"carrier\",\n  \"revenue\" : \"\",\n  \"custom_objects\" : \"\",\n  \"order_line_item_id\" : \"order_line_item_id\",\n  \"tracking_number\" : \"tracking_number\",\n  \"updated_by_id\" : \"updated_by_id\",\n  \"location\" : \"\",\n  \"id\" : \"id\",\n  \"created_by_id\" : \"created_by_id\",\n  \"state\" : \"accepted\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Fulfillment>(exampleJson)
            : default(Fulfillment);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
