/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ZIP2GO.Service.Models;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller para gerenciamento de documentos de faturamento
    /// </summary>
    [ApiController]
    public class BillingDocumentsController : ControllerBaseApi
    {
        private readonly IBillingDocumentsService _billingDocumentsService;

        public BillingDocumentsController(
            IBillingDocumentsService billingDocumentsService,
            IHttpContextAccessor httpContext,
            IEasyCachingProvider cache,
            ILogger<BillingDocumentsController> logger) : base(httpContext, cache, logger)
        {
            _billingDocumentsService = billingDocumentsService ?? throw new ArgumentNullException(nameof(billingDocumentsService));
        }

        /// <summary>
        /// Obtém documentos de faturamento
        /// </summary>
        /// <remarks>Retorna uma lista de documentos de faturamento com base nos filtros especificados.</remarks>
        [HttpGet]
        [Route("/v2/billing-documents")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetBillingDocuments")]
        [SwaggerResponse(statusCode: 200, type: typeof(BillingDocumentListResponse), description: "Lista de documentos de faturamento")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> GetBillingDocuments(
            [FromQuery] string cursor,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery] List<string> sort,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> itemsFields,
            [FromQuery] List<string> taxationItemsFields,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey,
            [FromHeader] string acceptEncoding,
            [FromHeader] string contentEncoding)
        {
            ValidatePaginationParameters(pageSize);

            var cacheKey = $"billing_documents_{cursor}_{string.Join(",", filter ?? new List<string>())}_{pageSize}";
            return await ExecuteWithCacheAsync(
                cacheKey,
                async () => await _billingDocumentsService.GetBillingDocumentsAsync(
                    cursor, expand, filter, sort, pageSize, fields,
                    itemsFields, taxationItemsFields, zuoraTrackId,
                    zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding));
        }

        /// <summary>
        /// Obtém um documento de faturamento específico
        /// </summary>
        /// <remarks>Retorna os detalhes de um documento de faturamento específico.</remarks>
        [HttpGet]
        [Route("/v2/billing-documents/{billing_document_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetBillingDocument")]
        [SwaggerResponse(statusCode: 200, type: typeof(BillingDocument), description: "Documento de faturamento")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> GetBillingDocument(
            [FromRoute][Required] string billingDocumentId,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey,
            [FromHeader] string acceptEncoding,
            [FromHeader] string contentEncoding)
        {
            ValidateResourceId(billingDocumentId, "documento de faturamento");
            ValidatePaginationParameters(pageSize);

            var cacheKey = $"billing_document_{billingDocumentId}";
            return await ExecuteWithCacheAsync(
                cacheKey,
                async () => await _billingDocumentsService.GetBillingDocumentAsync(
                    billingDocumentId, fields, expand, filter, pageSize,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey,
                    acceptEncoding, contentEncoding));
        }

        /// <summary>
        /// Cria um novo documento de faturamento
        /// </summary>
        /// <remarks>Cria um novo documento de faturamento com base nos dados fornecidos.</remarks>
        [HttpPost]
        [Route("/v2/billing-documents")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateBillingDocument")]
        [SwaggerResponse(statusCode: 201, type: typeof(BillingDocument), description: "Documento de faturamento criado com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        public virtual async Task<IActionResult> CreateBillingDocument(
            [FromBody] BillingDocumentCreateRequest body,
            [FromHeader] string zuoraTrackId,
            [FromHeader] bool? _async,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey,
            [FromHeader] string acceptEncoding,
            [FromHeader] string contentEncoding)
        {
            if (body == null)
            {
                return BadRequest(new ErrorResponse { Message = "O corpo da requisição não pode ser nulo" });
            }

            return await ExecuteWithErrorHandlingAsync(
                async () => await _billingDocumentsService.CreateBillingDocumentAsync(
                    body, zuoraTrackId, _async, zuoraEntityIds,
                    idempotencyKey, acceptEncoding, contentEncoding),
                "criar documento de faturamento");
        }
    }
}