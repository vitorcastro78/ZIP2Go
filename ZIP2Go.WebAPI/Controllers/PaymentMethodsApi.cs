/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using EasyCaching.Core;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2Go.WebAPI.Controllers;
using ZIP2GO.Service.Models;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing payment methods in the system.
    /// Provides endpoints for creating, updating, deleting, and querying payment methods.
    /// </summary>
    [ApiController]
    public class PaymentMethodsController : ControllerBaseApi
    {
        private readonly IEasyCachingProvider _cacheProvider;

        private readonly IHttpContextAccessor _httpContextAccessor;

        private readonly IPaymentMethodsService _paymentMethodsService;

        /// <summary>
        /// Initializes a new instance of the payment methods controller.
        /// </summary>
        /// <param name="paymentMethodsService">Service for managing payment methods</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public PaymentMethodsController(
            IPaymentMethodsService paymentMethodsService,
            IHttpContextAccessor httpContextAccessor,
            IEasyCachingProvider cache) : base(httpContextAccessor, cache)
        {
            _paymentMethodsService = paymentMethodsService ?? throw new ArgumentNullException(nameof(paymentMethodsService));
            _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));
            _cacheProvider = cache ?? throw new ArgumentNullException(nameof(cache));
        }

        /// <summary>
        /// Creates a new payment method.
        /// </summary>
        /// <param name="body">Payment method data to create</param>
        /// <returns>The newly created payment method</returns>
        /// <response code="201">Payment method created successfully</response>
        /// <response code="400">Invalid payment method data</response>
        [HttpPost]
        [Route("/v2/payment_methods")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreatePaymentMethod")]
        public async Task<IActionResult> CreatePaymentMethod([FromBody] PaymentMethodCreateRequest body)
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _paymentMethodsService.CreatePaymentMethod(body, zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }

        /// <summary>
        /// Retrieves a payment method by its ID.
        /// </summary>
        /// <param name="paymentMethodId">The unique identifier of the payment method</param>
        /// <returns>The requested payment method details</returns>
        /// <response code="200">Payment method found and returned</response>
        /// <response code="404">Payment method not found</response>
        [HttpGet]
        [Route("/v2/payment_methods/{payment_method_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetPaymentMethod")]
        public async Task<IActionResult> GetPaymentMethodById([FromRoute][Required] string paymentMethodId)
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _paymentMethodsService.GetPaymentMethodById(paymentMethodId, zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }

        /// <summary>
        /// Retrieves a list of all payment methods.
        /// </summary>
        /// <returns>A paginated list of payment methods</returns>
        /// <response code="200">List of payment methods retrieved successfully</response>
        [HttpGet]
        [Route("/v2/payment_methods")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetPaymentMethods")]
        public async Task<IActionResult> GetPaymentMethods()
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _paymentMethodsService.GetPaymentMethods("", zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }

        /// <summary>
        /// Scrubs sensitive data from a payment method.
        /// </summary>
        /// <param name="paymentMethodId">ID of the payment method to scrub</param>
        /// <returns>No content if successful</returns>
        /// <response code="204">Payment method scrubbed successfully</response>
        /// <response code="404">Payment method not found</response>
        [HttpPost]
        [Route("/v2/payment_methods/{payment_method_id}/scrub")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ScrubPaymentMethod")]
        public async Task<IActionResult> ScrubPaymentMethod([FromRoute][Required] string paymentMethodId)
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            _paymentMethodsService.ScrubPaymentMethod(paymentMethodId, zuoraTrackId, async);           //TODO: Change the data returned
            return Ok();
        }

        /// <summary>
        /// Updates an existing payment method.
        /// </summary>
        /// <param name="body">Updated payment method data</param>
        /// <param name="paymentMethodId">ID of the payment method to update</param>
        /// <returns>The updated payment method information</returns>
        /// <response code="200">Payment method updated successfully</response>
        /// <response code="404">Payment method not found</response>
        [HttpPatch]
        [Route("/v2/payment_methods/{payment_method_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdatePaymentMethod")]
        public async Task<IActionResult> UpdatePaymentMethod([FromBody] PaymentMethodPatchRequest body, [FromRoute][Required] string paymentMethodId)
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _paymentMethodsService.GetPaymentMethodById(paymentMethodId, zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }
    }
}