/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using EasyCaching.Core;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2Go.WebAPI.Controllers;
using Service.Models;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing debit memos in the system.
    /// Provides endpoints for creating, updating, deleting, and querying debit memos.
    /// </summary>
    [ApiController]
    public class DebitMemosController : ControllerBaseApi
    {
        private readonly IEasyCachingProvider _cacheProvider;

        private readonly IDebitMemosService _debitMemosService;

        private readonly IHttpContextAccessor _httpContextAccessor;

        /// <summary>
        /// Initializes a new instance of the debit memos controller.
        /// </summary>
        /// <param name="debitMemosService">Service for managing debit memos</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public DebitMemosController(
            IDebitMemosService debitMemosService,
            IHttpContextAccessor httpContextAccessor,
            IEasyCachingProvider cache) : base(httpContextAccessor, cache)
        {
            _debitMemosService = debitMemosService ?? throw new ArgumentNullException(nameof(debitMemosService));
            _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));
            _cacheProvider = cache ?? throw new ArgumentNullException(nameof(cache));
        }

        /// <summary>
        /// Creates a new debit memo.
        /// </summary>
        /// <param name="body">Debit memo data to create</param>
        /// <returns>The newly created debit memo</returns>
        /// <response code="201">Debit memo created successfully</response>
        /// <response code="400">Invalid debit memo data</response>
        [HttpPost]
        [Route("/v2/debit_memos")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateDebitMemo")]
        public async Task<IActionResult> CreateDebitMemo([FromBody] DebitMemoCreateRequest body)
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _debitMemosService.CreateDebitMemo(body, zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }

        /// <summary>
        /// Retrieves a debit memo by its ID.
        /// </summary>
        /// <param name="debitMemoId">The unique identifier of the debit memo</param>
        /// <returns>The requested debit memo details</returns>
        /// <response code="200">Debit memo found and returned</response>
        /// <response code="404">Debit memo not found</response>
        [HttpGet]
        [Route("/v2/debit_memos/{debit_memo_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetDebitMemo")]
        public async Task<IActionResult> GetDebitMemo([FromRoute][Required] string debitMemoId)
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _debitMemosService.GetDebitMemo(debitMemoId, zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }

        /// <summary>
        /// Retrieves a list of all debit memos.
        /// </summary>
        /// <returns>A paginated list of debit memos</returns>
        /// <response code="200">List of debit memos retrieved successfully</response>
        [HttpGet]
        [Route("/v2/debit_memos")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetDebitMemos")]
        public async Task<IActionResult> GetDebitMemos()
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _debitMemosService.GetDebitMemos("cursor", zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }

        /// <summary>
        /// Updates an existing debit memo.
        /// </summary>
        /// <param name="body">Updated debit memo data</param>
        /// <param name="debitMemoId">ID of the debit memo to update</param>
        /// <returns>The updated debit memo information</returns>
        /// <response code="200">Debit memo updated successfully</response>
        /// <response code="404">Debit memo not found</response>
        [HttpPatch]
        [Route("/v2/debit_memos/{debit_memo_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateDebitMemo")]
        public async Task<IActionResult> UpdateDebitMemo([FromBody] DebitMemoPatchRequest body, [FromRoute][Required] string debitMemoId)
        {
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _debitMemosService.PatchDebitMemo(body, debitMemoId, zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }
    }
}