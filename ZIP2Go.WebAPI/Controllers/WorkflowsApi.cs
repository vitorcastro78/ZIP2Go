/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ZIP2GO.Service.Models;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller para gerenciamento de fluxos de trabalho
    /// </summary>
    [ApiController]
    public class WorkflowsController : ControllerBaseApi
    {
        private readonly IWorkflowsService _workflowsService;

        public WorkflowsController(
            IWorkflowsService workflowsService,
            IHttpContextAccessor httpContext,
            IEasyCachingProvider cache,
            ILogger<WorkflowsController> logger) : base(httpContext, cache, logger)
        {
            _workflowsService = workflowsService ?? throw new ArgumentNullException(nameof(workflowsService));
        }

        /// <summary>
        /// Obtém fluxos de trabalho
        /// </summary>
        /// <remarks>Retorna uma lista de fluxos de trabalho com base nos filtros especificados.</remarks>
        [HttpGet]
        [Route("/v2/workflows")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetWorkflows")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkflowListResponse), description: "Lista de fluxos de trabalho")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> GetWorkflows(
            [FromQuery] string cursor,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery] List<string> sort,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromQuery] List<string> fields,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidatePaginationParameters(pageSize);

            var cacheKey = $"workflows_{cursor}_{string.Join(",", filter ?? new List<string>())}_{pageSize}";
            return await ExecuteWithCacheAsync(
                cacheKey,
                async () => await _workflowsService.GetWorkflowsAsync(
                    cursor, expand, filter, sort, pageSize, fields,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey));
        }

        /// <summary>
        /// Obtém um fluxo de trabalho específico
        /// </summary>
        /// <remarks>Retorna os detalhes de um fluxo de trabalho específico.</remarks>
        [HttpGet]
        [Route("/v2/workflows/{workflow_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetWorkflow")]
        [SwaggerResponse(statusCode: 200, type: typeof(Workflow), description: "Fluxo de trabalho")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> GetWorkflow(
            [FromRoute][Required] string workflowId,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidateResourceId(workflowId, "fluxo de trabalho");
            ValidatePaginationParameters(pageSize);

            var cacheKey = $"workflow_{workflowId}";
            return await ExecuteWithCacheAsync(
                cacheKey,
                async () => await _workflowsService.GetWorkflowAsync(
                    workflowId, fields, expand, filter, pageSize,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey));
        }

        /// <summary>
        /// Cria um novo fluxo de trabalho
        /// </summary>
        /// <remarks>Cria um novo fluxo de trabalho com os dados fornecidos.</remarks>
        [HttpPost]
        [Route("/v2/workflows")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateWorkflow")]
        [SwaggerResponse(statusCode: 201, type: typeof(Workflow), description: "Fluxo de trabalho criado com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        public virtual async Task<IActionResult> CreateWorkflow(
            [FromBody] WorkflowCreateRequest request,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            if (request == null)
            {
                _logger.LogWarning("Tentativa de criar fluxo de trabalho com corpo nulo");
                return BadRequest(new ErrorResponse { Message = "O corpo da requisição é obrigatório" });
            }

            return await ExecuteWithErrorHandlingAsync(async () =>
            {
                var result = await _workflowsService.CreateWorkflowAsync(
                    request, fields, expand, zuoraTrackId, zuoraEntityIds, idempotencyKey);

                _logger.LogInformation("Fluxo de trabalho criado com sucesso: {WorkflowId}", result.Id);
                return CreatedAtAction(nameof(GetWorkflow), new { workflowId = result.Id }, result);
            });
        }
    }
}