/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ZIP2GO.Service.Models;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller para gerenciamento de registros de uso
    /// </summary>
    [ApiController]
    public class UsageRecordsController : ControllerBaseApi
    {
        private readonly IUsageRecordsService _usageRecordsService;

        public UsageRecordsController(
            IUsageRecordsService usageRecordsService,
            IHttpContextAccessor httpContext,
            IEasyCachingProvider cache,
            ILogger<UsageRecordsController> logger) : base(httpContext, cache, logger)
        {
            _usageRecordsService = usageRecordsService ?? throw new ArgumentNullException(nameof(usageRecordsService));
        }

        /// <summary>
        /// Obtém registros de uso
        /// </summary>
        /// <remarks>Retorna uma lista de registros de uso com base nos filtros especificados.</remarks>
        [HttpGet]
        [Route("/v2/usage-records")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetUsageRecords")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsageRecordListResponse), description: "Lista de registros de uso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> GetUsageRecords(
            [FromQuery] string cursor,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery] List<string> sort,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromQuery] List<string> fields,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidatePaginationParameters(pageSize);

            var cacheKey = $"usage_records_{cursor}_{string.Join(",", filter ?? new List<string>())}_{pageSize}";
            return await ExecuteWithCacheAsync(
                cacheKey,
                async () => await _usageRecordsService.GetUsageRecordsAsync(
                    cursor, expand, filter, sort, pageSize, fields,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey));
        }

        /// <summary>
        /// Obtém um registro de uso específico
        /// </summary>
        /// <remarks>Retorna os detalhes de um registro de uso específico.</remarks>
        [HttpGet]
        [Route("/v2/usage-records/{usage_record_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetUsageRecord")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsageRecord), description: "Registro de uso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Não encontrado")]
        public virtual async Task<IActionResult> GetUsageRecord(
            [FromRoute][Required] string usageRecordId,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromQuery] List<string> filter,
            [FromQuery][Range(1, 99)] int? pageSize,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidateResourceId(usageRecordId, "registro de uso");
            ValidatePaginationParameters(pageSize);

            var cacheKey = $"usage_record_{usageRecordId}";
            return await ExecuteWithCacheAsync(
                cacheKey,
                async () => await _usageRecordsService.GetUsageRecordAsync(
                    usageRecordId, fields, expand, filter, pageSize,
                    zuoraTrackId, zuoraEntityIds, idempotencyKey));
        }

        /// <summary>
        /// Cria um novo registro de uso
        /// </summary>
        /// <remarks>Cria um novo registro de uso com os dados fornecidos.</remarks>
        [HttpPost]
        [Route("/v2/usage-records")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateUsageRecord")]
        [SwaggerResponse(statusCode: 201, type: typeof(UsageRecord), description: "Registro de uso criado com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        public virtual async Task<IActionResult> CreateUsageRecord(
            [FromBody] UsageRecordCreateRequest request,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            if (request == null)
            {
                _logger.LogWarning("Tentativa de criar registro de uso com corpo nulo");
                return BadRequest(new ErrorResponse { Message = "O corpo da requisição é obrigatório" });
            }

            return await ExecuteWithErrorHandlingAsync(async () =>
            {
                var result = await _usageRecordsService.CreateUsageRecordAsync(
                    request, fields, expand, zuoraTrackId, zuoraEntityIds, idempotencyKey);

                _logger.LogInformation("Registro de uso criado com sucesso: {UsageRecordId}", result.Id);
                return CreatedAtAction(nameof(GetUsageRecord), new { usageRecordId = result.Id }, result);
            });
        }
    }
}