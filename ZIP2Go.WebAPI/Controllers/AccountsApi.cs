/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using EasyCaching.Core;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2Go.WebAPI.Controllers;
using ZIP2GO.Service.Models;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing user accounts in the system.
    /// Provides endpoints for creating, updating, deleting, and querying accounts.
    /// </summary>
    [ApiController]
    public class AccountsController : ControllerBaseApi
    {
        private readonly IAccountsService _accountsService;

        private readonly IEasyCachingProvider _cacheProvider;

        private readonly IHttpContextAccessor _httpContextAccessor;

        /// <summary>
        /// Initializes a new instance of the accounts controller.
        /// </summary>
        /// <param name="accountsService">Service for managing accounts</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public AccountsController(
            IAccountsService accountsService,
            IHttpContextAccessor httpContextAccessor,
            IEasyCachingProvider cache) : base(httpContextAccessor, cache)
        {
            _accountsService = accountsService ?? throw new ArgumentNullException(nameof(accountsService));
            _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));
            _cacheProvider = cache ?? throw new ArgumentNullException(nameof(cache));
        }

        /// <summary>
        /// Creates a new account in the system.
        /// </summary>
        /// <param name="body">Account data to create</param>
        /// <returns>The newly created account</returns>
        /// <response code="201">Account created successfully</response>
        /// <response code="400">Invalid account data</response>
        [HttpPost]
        [Route("/v2/accounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateAccount")]
        [SwaggerResponse(statusCode: 201, type: typeof(Account), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> CreateAccount([FromBody] AccountCreateRequest body)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Account));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string zuoraTrackId = new Guid().ToString();
            bool async = true;
            string exampleJson = null;
            var result = _accountsService.CreateAccount(body, zuoraTrackId, async);           //TODO: Change the data returned
            return new ObjectResult(result);
        }

        /// <summary>
        /// Deletes an account from the system
        /// </summary>
        /// <param name="accountId">The ID of the account to delete</param>
        /// <param name="zuoraTrackId">The Zuora track ID for tracking the request</param>
        /// <param name="async">Whether to perform the operation asynchronously</param>
        /// <returns>NoContent if successful</returns>
        [HttpDelete]
        [Route("/v2/accounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteAccount")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> DeleteAccount([FromRoute][Required] string accountId, string zuoraTrackId, bool async = true)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));

            _accountsService.DeleteAccount(accountId, zuoraTrackId, async);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Generates billing documents for an account
        /// </summary>
        /// <param name="body">The request body containing billing document generation parameters</param>
        /// <param name="accountId">The ID of the account</param>
        /// <param name="zuoraTrackId">The Zuora track ID for tracking the request</param>
        /// <param name="async">Whether to perform the operation asynchronously</param>
        /// <returns>The generated billing documents response</returns>
        [HttpPost]
        [Route("/v2/accounts/{accountId}/bill")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GenerateBillingDocuments")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateBillingDocumentsAccountResponse), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GenerateBillingDocuments([FromBody] GenerateBillingDocumentsAccountRequest body, [FromRoute][Required] string accountId, string zuoraTrackId, bool async = true)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateBillingDocumentsAccountResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"invoices\" : \"\",\n  \"credit_memos\" : \"\"\n}";
            var result = _accountsService.GenerateBillingDocuments(body, accountId, zuoraTrackId, async);
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateBillingDocumentsAccountResponse>(exampleJson)
            : default(GenerateBillingDocumentsAccountResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves an account by its ID.
        /// </summary>
        /// <param name="accountId">The unique identifier of the account</param>
        /// <returns>The requested account details</returns>
        /// <response code="200">Account found and returned</response>
        /// <response code="404">Account not found</response>
        [HttpGet]
        [Route("/v2/accounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetAccount")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetAccount([FromRoute][Required] string accountId, string zuoraTrackId, bool async = true)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"bill_to\" : \"\",\n  \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"account_number\" : \"A-100001\",\n  \"subscriptions\" : \"\",\n  \"bill_cycle_day\" : 2,\n  \"payments\" : \"\",\n  \"description\" : \"description of test account\",\n  \"credit_memos\" : \"\",\n  \"payment_terms\" : \"Net 30\",\n  \"enabled\" : true,\n  \"payment_methods\" : \"\",\n  \"remaining_debit_memo_balance\" : 10,\n  \"invoices\" : \"\",\n  \"billing_document_settings\" : {\n    \"credit_memo_template_id\" : \"2c92c08b6a8c978f016a9e0084622b62\",\n    \"print_documents\" : false,\n    \"invoice_template_id\" : \"8f64d4d754739d85d0346e00ef77e50d\",\n    \"additional_email\" : \"jdoe@zuora.com\",\n    \"email_documents\" : false,\n    \"debit_memo_template_id\" : \"2c92c08c6a8c7e08016a9ec8d72f3ab5\"\n  },\n  \"currency\" : \"USD\",\n  \"debit_memos\" : \"\",\n  \"id\" : \"id\",\n  \"auto_pay\" : true,\n  \"usage_records\" : \"\",\n  \"default_payment_method_id\" : \"8a95b1946b6aeac8718c32aab8c395f\",\n  \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sales_rep\" : \"Max\",\n  \"remaining_payment_balance\" : 20,\n  \"payment_gateway\" : \"adyen gateway\",\n  \"billing_documents\" : \"\",\n  \"custom_fields\" : \"\",\n  \"bill_to_id\" : \"2c92c0f86a8dd422016a9e7a70116b0d\",\n  \"default_payment_method\" : \"\",\n  \"batch\" : \"batch\",\n  \"communication_profile_id\" : \"2c92c0946a6dffc0016a7faab604299b\",\n  \"tax_identifier\" : {\n    \"id\" : \"id\"\n  },\n  \"tax_certificate\" : {\n    \"end_date\" : \"2023-01-01T00:00:00.000+00:00\",\n    \"description\" : \"description\",\n    \"issuing_jurisdiction\" : \"Georgia\",\n    \"company_code\" : \"ABC\",\n    \"id\" : \"id\",\n    \"state\" : \"pending\",\n    \"tax_identifier\" : \"DE123456789\",\n    \"start_date\" : \"2022-01-01T00:00:00.000+00:00\",\n    \"entity_use_code\" : \"entity_use_code\"\n  },\n  \"sold_to\" : \"\",\n  \"custom_objects\" : \"\",\n  \"crm_id\" : \"1a2b3c4d5e\",\n  \"parent_account_id\" : \"8ad093f27d6eee80017d6effd7a66759\",\n  \"sequence_set_id\" : \"2c92a4204a6dffc0016a7faab723041c\",\n  \"name\" : \"test account\",\n  \"updated_by_id\" : \"updated_by_id\",\n  \"created_by_id\" : \"created_by_id\",\n  \"remaining_credit_memo_balance\" : 50,\n  \"sold_to_id\" : \"8ad0823f8040e52d0180433026b156fe\",\n  \"remaining_invoice_balance\" : 100\n}";
            var result = _accountsService.GetAccount(accountId, zuoraTrackId, async);
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a list of all accounts.
        /// </summary>
        /// <returns>A paginated list of accounts</returns>
        /// <response code="200">List of accounts retrieved successfully</response>
        [HttpGet]
        [Route("/v2/accounts")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListAccountResponse), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetAccounts()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ListAccountResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));

            string zuoraTrackId = new Guid().ToString();
            bool async = true;

            string exampleJson = null;
            exampleJson = "{\n  \"next_page\" : \"next_page\",\n  \"data\" : [ {\n    \"bill_to\" : \"\",\n    \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"account_number\" : \"A-100001\",\n    \"subscriptions\" : \"\",\n    \"bill_cycle_day\" : 2,\n    \"payments\" : \"\",\n    \"description\" : \"description of test account\",\n    \"credit_memos\" : \"\",\n    \"payment_terms\" : \"Net 30\",\n    \"enabled\" : true,\n    \"payment_methods\" : \"\",\n    \"remaining_debit_memo_balance\" : 10,\n    \"invoices\" : \"\",\n    \"billing_document_settings\" : {\n      \"credit_memo_template_id\" : \"2c92c08b6a8c978f016a9e0084622b62\",\n      \"print_documents\" : false,\n      \"invoice_template_id\" : \"8f64d4d754739d85d0346e00ef77e50d\",\n      \"additional_email\" : \"jdoe@zuora.com\",\n      \"email_documents\" : false,\n      \"debit_memo_template_id\" : \"2c92c08c6a8c7e08016a9ec8d72f3ab5\"\n    },\n    \"currency\" : \"USD\",\n    \"debit_memos\" : \"\",\n    \"id\" : \"id\",\n    \"auto_pay\" : true,\n    \"usage_records\" : \"\",\n    \"default_payment_method_id\" : \"8a95b1946b6aeac8718c32aab8c395f\",\n    \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sales_rep\" : \"Max\",\n    \"remaining_payment_balance\" : 20,\n    \"payment_gateway\" : \"adyen gateway\",\n    \"billing_documents\" : \"\",\n    \"custom_fields\" : \"\",\n    \"bill_to_id\" : \"2c92c0f86a8dd422016a9e7a70116b0d\",\n    \"default_payment_method\" : \"\",\n    \"batch\" : \"batch\",\n    \"communication_profile_id\" : \"2c92c0946a6dffc0016a7faab604299b\",\n    \"tax_identifier\" : {\n      \"id\" : \"id\"\n    },\n    \"tax_certificate\" : {\n      \"end_date\" : \"2023-01-01T00:00:00.000+00:00\",\n      \"description\" : \"description\",\n      \"issuing_jurisdiction\" : \"Georgia\",\n      \"company_code\" : \"ABC\",\n      \"id\" : \"id\",\n      \"state\" : \"pending\",\n      \"tax_identifier\" : \"DE123456789\",\n      \"start_date\" : \"2022-01-01T00:00:00.000+00:00\",\n      \"entity_use_code\" : \"entity_use_code\"\n    },\n    \"sold_to\" : \"\",\n    \"custom_objects\" : \"\",\n    \"crm_id\" : \"1a2b3c4d5e\",\n    \"parent_account_id\" : \"8ad093f27d6eee80017d6effd7a66759\",\n    \"sequence_set_id\" : \"2c92a4204a6dffc0016a7faab723041c\",\n    \"name\" : \"test account\",\n    \"updated_by_id\" : \"updated_by_id\",\n    \"created_by_id\" : \"created_by_id\",\n    \"remaining_credit_memo_balance\" : 50,\n    \"sold_to_id\" : \"8ad0823f8040e52d0180433026b156fe\",\n    \"remaining_invoice_balance\" : 100\n  }, {\n    \"bill_to\" : \"\",\n    \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"account_number\" : \"A-100001\",\n    \"subscriptions\" : \"\",\n    \"bill_cycle_day\" : 2,\n    \"payments\" : \"\",\n    \"description\" : \"description of test account\",\n    \"credit_memos\" : \"\",\n    \"payment_terms\" : \"Net 30\",\n    \"enabled\" : true,\n    \"payment_methods\" : \"\",\n    \"remaining_debit_memo_balance\" : 10,\n    \"invoices\" : \"\",\n    \"billing_document_settings\" : {\n      \"credit_memo_template_id\" : \"2c92c08b6a8c978f016a9e0084622b62\",\n      \"print_documents\" : false,\n      \"invoice_template_id\" : \"8f64d4d754739d85d0346e00ef77e50d\",\n      \"additional_email\" : \"jdoe@zuora.com\",\n      \"email_documents\" : false,\n      \"debit_memo_template_id\" : \"2c92c08c6a8c7e08016a9ec8d72f3ab5\"\n    },\n    \"currency\" : \"USD\",\n    \"debit_memos\" : \"\",\n    \"id\" : \"id\",\n    \"auto_pay\" : true,\n    \"usage_records\" : \"\",\n    \"default_payment_method_id\" : \"8a95b1946b6aeac8718c32aab8c395f\",\n    \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sales_rep\" : \"Max\",\n    \"remaining_payment_balance\" : 20,\n    \"payment_gateway\" : \"adyen gateway\",\n    \"billing_documents\" : \"\",\n    \"custom_fields\" : \"\",\n    \"bill_to_id\" : \"2c92c0f86a8dd422016a9e7a70116b0d\",\n    \"default_payment_method\" : \"\",\n    \"batch\" : \"batch\",\n    \"communication_profile_id\" : \"2c92c0946a6dffc0016a7faab604299b\",\n    \"tax_identifier\" : {\n      \"id\" : \"id\"\n    },\n    \"tax_certificate\" : {\n      \"end_date\" : \"2023-01-01T00:00:00.000+00:00\",\n      \"description\" : \"description\",\n      \"issuing_jurisdiction\" : \"Georgia\",\n      \"company_code\" : \"ABC\",\n      \"id\" : \"id\",\n      \"state\" : \"pending\",\n      \"tax_identifier\" : \"DE123456789\",\n      \"start_date\" : \"2022-01-01T00:00:00.000+00:00\",\n      \"entity_use_code\" : \"entity_use_code\"\n    },\n    \"sold_to\" : \"\",\n    \"custom_objects\" : \"\",\n    \"crm_id\" : \"1a2b3c4d5e\",\n    \"parent_account_id\" : \"8ad093f27d6eee80017d6effd7a66759\",\n    \"sequence_set_id\" : \"2c92a4204a6dffc0016a7faab723041c\",\n    \"name\" : \"test account\",\n    \"updated_by_id\" : \"updated_by_id\",\n    \"created_by_id\" : \"created_by_id\",\n    \"remaining_credit_memo_balance\" : 50,\n    \"sold_to_id\" : \"8ad0823f8040e52d0180433026b156fe\",\n    \"remaining_invoice_balance\" : 100\n  } ]\n}";
            var result = _accountsService.GetAccounts(zuoraTrackId, async);
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ListAccountResponse>(exampleJson)
            : default(ListAccountResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing account's information.
        /// </summary>
        /// <param name="body">Updated account data</param>
        /// <param name="accountId">ID of the account to update</param>
        /// <returns>The updated account information</returns>
        /// <response code="200">Account updated successfully</response>
        /// <response code="404">Account not found</response>
        [HttpPatch]
        [Route("/v2/accounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateAccount")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> UpdateAccount([FromBody] AccountPatchRequest body, [FromRoute][Required] string accountId, string zuoraTrackId, bool async = true)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"bill_to\" : \"\",\n  \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"account_number\" : \"A-100001\",\n  \"subscriptions\" : \"\",\n  \"bill_cycle_day\" : 2,\n  \"payments\" : \"\",\n  \"description\" : \"description of test account\",\n  \"credit_memos\" : \"\",\n  \"payment_terms\" : \"Net 30\",\n  \"enabled\" : true,\n  \"payment_methods\" : \"\",\n  \"remaining_debit_memo_balance\" : 10,\n  \"invoices\" : \"\",\n  \"billing_document_settings\" : {\n    \"credit_memo_template_id\" : \"2c92c08b6a8c978f016a9e0084622b62\",\n    \"print_documents\" : false,\n    \"invoice_template_id\" : \"8f64d4d754739d85d0346e00ef77e50d\",\n    \"additional_email\" : \"jdoe@zuora.com\",\n    \"email_documents\" : false,\n    \"debit_memo_template_id\" : \"2c92c08c6a8c7e08016a9ec8d72f3ab5\"\n  },\n  \"currency\" : \"USD\",\n  \"debit_memos\" : \"\",\n  \"id\" : \"id\",\n  \"auto_pay\" : true,\n  \"usage_records\" : \"\",\n  \"default_payment_method_id\" : \"8a95b1946b6aeac8718c32aab8c395f\",\n  \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sales_rep\" : \"Max\",\n  \"remaining_payment_balance\" : 20,\n  \"payment_gateway\" : \"adyen gateway\",\n  \"billing_documents\" : \"\",\n  \"custom_fields\" : \"\",\n  \"bill_to_id\" : \"2c92c0f86a8dd422016a9e7a70116b0d\",\n  \"default_payment_method\" : \"\",\n  \"batch\" : \"batch\",\n  \"communication_profile_id\" : \"2c92c0946a6dffc0016a7faab604299b\",\n  \"tax_identifier\" : {\n    \"id\" : \"id\"\n  },\n  \"tax_certificate\" : {\n    \"end_date\" : \"2023-01-01T00:00:00.000+00:00\",\n    \"description\" : \"description\",\n    \"issuing_jurisdiction\" : \"Georgia\",\n    \"company_code\" : \"ABC\",\n    \"id\" : \"id\",\n    \"state\" : \"pending\",\n    \"tax_identifier\" : \"DE123456789\",\n    \"start_date\" : \"2022-01-01T00:00:00.000+00:00\",\n    \"entity_use_code\" : \"entity_use_code\"\n  },\n  \"sold_to\" : \"\",\n  \"custom_objects\" : \"\",\n  \"crm_id\" : \"1a2b3c4d5e\",\n  \"parent_account_id\" : \"8ad093f27d6eee80017d6effd7a66759\",\n  \"sequence_set_id\" : \"2c92a4204a6dffc0016a7faab723041c\",\n  \"name\" : \"test account\",\n  \"updated_by_id\" : \"updated_by_id\",\n  \"created_by_id\" : \"created_by_id\",\n  \"remaining_credit_memo_balance\" : 50,\n  \"sold_to_id\" : \"8ad0823f8040e52d0180433026b156fe\",\n  \"remaining_invoice_balance\" : 100\n}";
            _accountsService.UpdateAccount(body, accountId, zuoraTrackId, async);
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}