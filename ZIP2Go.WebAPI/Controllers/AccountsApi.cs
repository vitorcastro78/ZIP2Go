/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using EasyCaching.Core;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc; 
using Microsoft.Extensions.Logging;
using ZIP2GO.Service.Models;
using Newtonsoft.Json;
using Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;
using ZIP2GO.WebAPI.Controllers;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller para gerenciamento de contas
    /// </summary>
    [ApiController]
    public class AccountsController : ControllerBaseApi
    {
        private readonly IAccountsService _accountsService;
        private readonly ILogger<AccountsController> _logger;

        public AccountsController(
            IAccountsService accountsService,
            IHttpContextAccessor httpContext,
            IEasyCachingProvider cache,
            ILogger<AccountsController> logger) : base(httpContext, cache, logger)
        {
            _accountsService = accountsService ?? throw new ArgumentNullException(nameof(accountsService));
            _logger = logger;
        }

        /// <summary>
        /// Cria uma nova conta
        /// </summary>
        /// <remarks>Cria uma nova conta com os dados fornecidos.</remarks>
        [HttpPost]
        [Route("/v2/accounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateAccount")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Conta criada com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        public virtual async Task<IActionResult> CreateAccount(
            [FromBody] AccountCreateRequest request,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidateRequestBody(request, "conta");

            return await ExecuteWithErrorHandlingAsync(async () =>
            {
                var result = await _accountsService.CreateAccountAsync(
                    request, fields, expand, zuoraTrackId, zuoraEntityIds, idempotencyKey);

                _logger.LogInformation("Conta criada com sucesso: {AccountId}", result.Id);
                return Ok(result);
            });
        }

        /// <summary>
        /// Exclui uma conta
        /// </summary>
        /// <remarks>Exclui uma conta específica e todos os seus dados associados.</remarks>
        [HttpDelete]
        [Route("/v2/accounts/{account_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteAccount")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Conta excluída com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Conta não encontrada")]
        public virtual async Task<IActionResult> DeleteAccount(
            [FromRoute][Required] string accountId,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidateResourceId(accountId, "conta");

            return await ExecuteWithErrorHandlingAsync(async () =>
            {
                var result = await _accountsService.DeleteAccountAsync(
                    accountId, fields, expand, zuoraTrackId, zuoraEntityIds, idempotencyKey);

                _logger.LogInformation("Conta excluída com sucesso: {AccountId}", accountId);
                return Ok(result);
            });
        }

        /// <summary>
        /// Gera documentos de faturamento para uma conta
        /// </summary>
        /// <remarks>Gera documentos de faturamento para uma conta específica.</remarks>
        [HttpPost]
        [Route("/v2/accounts/{account_id}/billing-documents")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GenerateBillingDocuments")]
        [SwaggerResponse(statusCode: 200, type: typeof(BillingDocumentListResponse), description: "Documentos de faturamento gerados com sucesso")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Requisição inválida")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Não autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Conta não encontrada")]
        public virtual async Task<IActionResult> GenerateBillingDocuments(
            [FromRoute][Required] string accountId,
            [FromBody] BillingDocumentGenerateRequest request,
            [FromQuery] List<string> fields,
            [FromQuery] List<string> expand,
            [FromHeader] string zuoraTrackId,
            [FromHeader] string zuoraEntityIds,
            [FromHeader] string idempotencyKey)
        {
            ValidateResourceId(accountId, "conta");
            ValidateRequestBody(request, "documentos de faturamento");

            return await ExecuteWithErrorHandlingAsync(async () =>
            {
                var result = await _accountsService.GenerateBillingDocumentsAsync(
                    accountId, request, fields, expand, zuoraTrackId, zuoraEntityIds, idempotencyKey);

                _logger.LogInformation("Documentos de faturamento gerados com sucesso para a conta: {AccountId}", accountId);
                return Ok(result);
            });
        }
    }
}