/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// Specify this field if you want to pause a subscription.
    /// </summary>
    [DataContract]
    public partial class SubscriptionPausePatchResponse : IEquatable<SubscriptionPausePatchResponse>
    { 
        /// <summary>
        /// Date on which the subscription is paused.
        /// </summary>
        /// <value>Date on which the subscription is paused.</value>

        [DataMember(Name="pause_date")]
        public string PauseDate { get; set; }

        /// <summary>
        /// Can be either the end of the current billing period or a specific date.
        /// </summary>
        /// <value>Can be either the end of the current billing period or a specific date.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PauseAtEnum
        {
            /// <summary>
            /// Enum InvoicePeriodEndEnum for invoice_period_end
            /// </summary>
            [EnumMember(Value = "invoice_period_end")]
            InvoicePeriodEndEnum = 0        }

        /// <summary>
        /// Can be either the end of the current billing period or a specific date.
        /// </summary>
        /// <value>Can be either the end of the current billing period or a specific date.</value>

        [DataMember(Name="pause_at")]
        public PauseAtEnum? PauseAt { get; set; }

        /// <summary>
        /// The number of intervals in a duration where the subscription is paused. For example, pause_interval&#x3D;year and pause_interval_count&#x3D;1 represents a 1-year pause.
        /// </summary>
        /// <value>The number of intervals in a duration where the subscription is paused. For example, pause_interval&#x3D;year and pause_interval_count&#x3D;1 represents a 1-year pause.</value>

        [DataMember(Name="pause_interval_count")]
        public decimal? PauseIntervalCount { get; set; }

        /// <summary>
        /// Unit in which the pause duration is defined. One of day, week, month or year.
        /// </summary>
        /// <value>Unit in which the pause duration is defined. One of day, week, month or year.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PauseIntervalEnum
        {
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 0,
            /// <summary>
            /// Enum DayEnum for day
            /// </summary>
            [EnumMember(Value = "day")]
            DayEnum = 1,
            /// <summary>
            /// Enum YearEnum for year
            /// </summary>
            [EnumMember(Value = "year")]
            YearEnum = 2,
            /// <summary>
            /// Enum WeekEnum for week
            /// </summary>
            [EnumMember(Value = "week")]
            WeekEnum = 3        }

        /// <summary>
        /// Unit in which the pause duration is defined. One of day, week, month or year.
        /// </summary>
        /// <value>Unit in which the pause duration is defined. One of day, week, month or year.</value>

        [DataMember(Name="pause_interval")]
        public PauseIntervalEnum? PauseInterval { get; set; }

        /// <summary>
        /// Gets or Sets ResumeBehavior
        /// </summary>

        [DataMember(Name="resume_behavior")]
        public ResumeSubscriptionRequest ResumeBehavior { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPausePatchResponse {\n");
            sb.Append("  PauseDate: ").Append(PauseDate).Append("\n");
            sb.Append("  PauseAt: ").Append(PauseAt).Append("\n");
            sb.Append("  PauseIntervalCount: ").Append(PauseIntervalCount).Append("\n");
            sb.Append("  PauseInterval: ").Append(PauseInterval).Append("\n");
            sb.Append("  ResumeBehavior: ").Append(ResumeBehavior).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionPausePatchResponse)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionPausePatchResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPausePatchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPausePatchResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PauseDate == other.PauseDate ||
                    PauseDate != null &&
                    PauseDate.Equals(other.PauseDate)
                ) && 
                (
                    PauseAt == other.PauseAt ||
                    PauseAt != null &&
                    PauseAt.Equals(other.PauseAt)
                ) && 
                (
                    PauseIntervalCount == other.PauseIntervalCount ||
                    PauseIntervalCount != null &&
                    PauseIntervalCount.Equals(other.PauseIntervalCount)
                ) && 
                (
                    PauseInterval == other.PauseInterval ||
                    PauseInterval != null &&
                    PauseInterval.Equals(other.PauseInterval)
                ) && 
                (
                    ResumeBehavior == other.ResumeBehavior ||
                    ResumeBehavior != null &&
                    ResumeBehavior.Equals(other.ResumeBehavior)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PauseDate != null)
                    hashCode = hashCode * 59 + PauseDate.GetHashCode();
                    if (PauseAt != null)
                    hashCode = hashCode * 59 + PauseAt.GetHashCode();
                    if (PauseIntervalCount != null)
                    hashCode = hashCode * 59 + PauseIntervalCount.GetHashCode();
                    if (PauseInterval != null)
                    hashCode = hashCode * 59 + PauseInterval.GetHashCode();
                    if (ResumeBehavior != null)
                    hashCode = hashCode * 59 + ResumeBehavior.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionPausePatchResponse left, SubscriptionPausePatchResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionPausePatchResponse left, SubscriptionPausePatchResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
