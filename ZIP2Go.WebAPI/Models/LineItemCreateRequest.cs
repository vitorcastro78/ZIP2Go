/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ZIP2Go.WebAPI.Enums;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// Order line items
    /// </summary>
    [DataContract]
    public partial class LineItemCreateRequest : IEquatable<LineItemCreateRequest>
    { 
        /// <summary>
        /// A configured unit of measure. This field is required for per-unit prices.
        /// </summary>
        /// <value>A configured unit of measure. This field is required for per-unit prices.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The unit amount of the price. Specify this field if you want to override the original price with a per-unit price.
        /// </summary>
        /// <value>The unit amount of the price. Specify this field if you want to override the original price with a per-unit price.</value>

        [DataMember(Name="unit_amount")]
        public decimal? UnitAmount { get; set; }

        /// <summary>
        /// The target date for the order line item to be picked up by bill run for billing.
        /// </summary>
        /// <value>The target date for the order line item to be picked up by bill run for billing.</value>

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>

        [MaxLength(100)]
        [DataMember(Name="deferred_revenue_account")]
        public string DeferredRevenueAccount { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Revenue
        /// </summary>

        [DataMember(Name="revenue")]
        public AllOflineItemCreateRequestRevenue Revenue { get; set; }

        /// <summary>
        /// Discount amount. Specify this field if you offer an amount-based discount.
        /// </summary>
        /// <value>Discount amount. Specify this field if you offer an amount-based discount.</value>

        [DataMember(Name="discount_unit_amount")]
        public decimal? DiscountUnitAmount { get; set; }

        /// <summary>
        /// Discount percent. Specify this field if you offer a percentage-based discount.
        /// </summary>
        /// <value>Discount percent. Specify this field if you offer a percentage-based discount.</value>

        [DataMember(Name="discount_percent")]
        public decimal? DiscountPercent { get; set; }

        /// <summary>
        /// The category for the order line item, to indicate a product sale or return.
        /// </summary>
        /// <value>The category for the order line item, to indicate a product sale or return.</value>

        [DataMember(Name="category")]
        public LineItemCategoryEnum? Category { get; set; }

        /// <summary>
        /// The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field.
        /// </summary>
        /// <value>The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field.</value>

        [DataMember(Name="state")]
        public LineItemStateEnum? State { get; set; }

        /// <summary>
        /// The type of the order line item.
        /// </summary>
        /// <value>The type of the order line item.</value>
        [Required]

        [DataMember(Name="type")]
        public LineItemTypeEnum? Type { get; set; }

        /// <summary>
        /// The name of the order line item.
        /// </summary>
        /// <value>The name of the order line item.</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Human-readable identifier of the order item. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the order item. It can be user-supplied.</value>

        [DataMember(Name="item_number")]
        public string ItemNumber { get; set; }

        /// <summary>
        /// The list price per unit for the order line item.
        /// </summary>
        /// <value>The list price per unit for the order line item.</value>

        [DataMember(Name="list_unit_price")]
        public decimal? ListUnitPrice { get; set; }

        /// <summary>
        /// The product code for the order line item.
        /// </summary>
        /// <value>The product code for the order line item.</value>

        [DataMember(Name="product_code")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Identifier of the price.
        /// </summary>
        /// <value>Identifier of the price.</value>

        [DataMember(Name="price_id")]
        public string PriceId { get; set; }

        /// <summary>
        /// Used by customers to specify the Purchase Order Number provided by the buyer.
        /// </summary>
        /// <value>Used by customers to specify the Purchase Order Number provided by the buyer.</value>

        [DataMember(Name="purchase_order_number")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The quantity of units, such as the number of authors in a hosted wiki service.
        /// </summary>
        /// <value>The quantity of units, such as the number of authors in a hosted wiki service.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>

        [MaxLength(100)]
        [DataMember(Name="recognized_revenue_account")]
        public string RecognizedRevenueAccount { get; set; }

        /// <summary>
        /// The revenue recognition rule for the order line item.
        /// </summary>
        /// <value>The revenue recognition rule for the order line item.</value>

        [DataMember(Name="revenue_recognition_rule_name")]
        public string RevenueRecognitionRuleName { get; set; }

        /// <summary>
        /// Customer address used for calculating tax.
        /// </summary>
        /// <value>Customer address used for calculating tax.</value>

        [DataMember(Name="sold_to_id")]
        public string SoldToId { get; set; }

        /// <summary>
        /// A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.
        /// </summary>
        /// <value>A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.</value>

        [DataMember(Name="tax_code")]
        public string TaxCode { get; set; }

        /// <summary>
        /// If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.
        /// </summary>
        /// <value>If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.</value>

        [DataMember(Name="tax_inclusive")]
        public bool? TaxInclusive { get; set; }

        /// <summary>
        /// The date a transaction starts. The default value of this field is the order date.
        /// </summary>
        /// <value>The date a transaction starts. The default value of this field is the order date.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the &#x60;start_date&#x60; field.
        /// </summary>
        /// <value>The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the &#x60;start_date&#x60; field.</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// List of invoice items. EXPANDABLE
        /// </summary>
        /// <value>List of invoice items. EXPANDABLE</value>

        [DataMember(Name="invoice_items")]
        public AllOflineItemCreateRequestInvoiceItems InvoiceItems { get; private set; }

        /// <summary>
        /// Relates an order line item to a subscription when you create the order line item.
        /// </summary>
        /// <value>Relates an order line item to a subscription when you create the order line item.</value>

        [DataMember(Name="related_subscription_number")]
        public string RelatedSubscriptionNumber { get; set; }

        /// <summary>
        /// The billing rule for the Order Line Item.
        /// </summary>
        /// <value>The billing rule for the Order Line Item.</value>

        [DataMember(Name="billing_rule")]
        public BillingRuleEnum? BillingRule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItemCreateRequest {\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  DeferredRevenueAccount: ").Append(DeferredRevenueAccount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  DiscountUnitAmount: ").Append(DiscountUnitAmount).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  ListUnitPrice: ").Append(ListUnitPrice).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  PriceId: ").Append(PriceId).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RecognizedRevenueAccount: ").Append(RecognizedRevenueAccount).Append("\n");
            sb.Append("  RevenueRecognitionRuleName: ").Append(RevenueRecognitionRuleName).Append("\n");
            sb.Append("  SoldToId: ").Append(SoldToId).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  TaxInclusive: ").Append(TaxInclusive).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  InvoiceItems: ").Append(InvoiceItems).Append("\n");
            sb.Append("  RelatedSubscriptionNumber: ").Append(RelatedSubscriptionNumber).Append("\n");
            sb.Append("  BillingRule: ").Append(BillingRule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LineItemCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if LineItemCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of LineItemCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItemCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    UnitAmount == other.UnitAmount ||
                    UnitAmount != null &&
                    UnitAmount.Equals(other.UnitAmount)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    DeferredRevenueAccount == other.DeferredRevenueAccount ||
                    DeferredRevenueAccount != null &&
                    DeferredRevenueAccount.Equals(other.DeferredRevenueAccount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Revenue == other.Revenue ||
                    Revenue != null &&
                    Revenue.Equals(other.Revenue)
                ) && 
                (
                    DiscountUnitAmount == other.DiscountUnitAmount ||
                    DiscountUnitAmount != null &&
                    DiscountUnitAmount.Equals(other.DiscountUnitAmount)
                ) && 
                (
                    DiscountPercent == other.DiscountPercent ||
                    DiscountPercent != null &&
                    DiscountPercent.Equals(other.DiscountPercent)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ItemNumber == other.ItemNumber ||
                    ItemNumber != null &&
                    ItemNumber.Equals(other.ItemNumber)
                ) && 
                (
                    ListUnitPrice == other.ListUnitPrice ||
                    ListUnitPrice != null &&
                    ListUnitPrice.Equals(other.ListUnitPrice)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    PriceId == other.PriceId ||
                    PriceId != null &&
                    PriceId.Equals(other.PriceId)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    RecognizedRevenueAccount == other.RecognizedRevenueAccount ||
                    RecognizedRevenueAccount != null &&
                    RecognizedRevenueAccount.Equals(other.RecognizedRevenueAccount)
                ) && 
                (
                    RevenueRecognitionRuleName == other.RevenueRecognitionRuleName ||
                    RevenueRecognitionRuleName != null &&
                    RevenueRecognitionRuleName.Equals(other.RevenueRecognitionRuleName)
                ) && 
                (
                    SoldToId == other.SoldToId ||
                    SoldToId != null &&
                    SoldToId.Equals(other.SoldToId)
                ) && 
                (
                    TaxCode == other.TaxCode ||
                    TaxCode != null &&
                    TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    TaxInclusive == other.TaxInclusive ||
                    TaxInclusive != null &&
                    TaxInclusive.Equals(other.TaxInclusive)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    InvoiceItems == other.InvoiceItems ||
                    InvoiceItems != null &&
                    InvoiceItems.Equals(other.InvoiceItems)
                ) && 
                (
                    RelatedSubscriptionNumber == other.RelatedSubscriptionNumber ||
                    RelatedSubscriptionNumber != null &&
                    RelatedSubscriptionNumber.Equals(other.RelatedSubscriptionNumber)
                ) && 
                (
                    BillingRule == other.BillingRule ||
                    BillingRule != null &&
                    BillingRule.Equals(other.BillingRule)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    if (UnitAmount != null)
                    hashCode = hashCode * 59 + UnitAmount.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (DeferredRevenueAccount != null)
                    hashCode = hashCode * 59 + DeferredRevenueAccount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Revenue != null)
                    hashCode = hashCode * 59 + Revenue.GetHashCode();
                    if (DiscountUnitAmount != null)
                    hashCode = hashCode * 59 + DiscountUnitAmount.GetHashCode();
                    if (DiscountPercent != null)
                    hashCode = hashCode * 59 + DiscountPercent.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ItemNumber != null)
                    hashCode = hashCode * 59 + ItemNumber.GetHashCode();
                    if (ListUnitPrice != null)
                    hashCode = hashCode * 59 + ListUnitPrice.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (PriceId != null)
                    hashCode = hashCode * 59 + PriceId.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (RecognizedRevenueAccount != null)
                    hashCode = hashCode * 59 + RecognizedRevenueAccount.GetHashCode();
                    if (RevenueRecognitionRuleName != null)
                    hashCode = hashCode * 59 + RevenueRecognitionRuleName.GetHashCode();
                    if (SoldToId != null)
                    hashCode = hashCode * 59 + SoldToId.GetHashCode();
                    if (TaxCode != null)
                    hashCode = hashCode * 59 + TaxCode.GetHashCode();
                    if (TaxInclusive != null)
                    hashCode = hashCode * 59 + TaxInclusive.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (InvoiceItems != null)
                    hashCode = hashCode * 59 + InvoiceItems.GetHashCode();
                    if (RelatedSubscriptionNumber != null)
                    hashCode = hashCode * 59 + RelatedSubscriptionNumber.GetHashCode();
                    if (BillingRule != null)
                    hashCode = hashCode * 59 + BillingRule.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LineItemCreateRequest left, LineItemCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LineItemCreateRequest left, LineItemCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
