/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionReplacePlanPatchResponse : IEquatable<SubscriptionReplacePlanPatchResponse>
    { 
        /// <summary>
        /// Identifier of the subscription plan.
        /// </summary>
        /// <value>Identifier of the subscription plan.</value>

        [DataMember(Name="previous_subscription_plan_id")]
        public string PreviousSubscriptionPlanId { get; set; }

        /// <summary>
        /// Identifier of the plan to be removed. Only provide one of &#x60;previous_plan_id&#x60; or &#x60;subscription_plan_id&#x60; in your request, not both.
        /// </summary>
        /// <value>Identifier of the plan to be removed. Only provide one of &#x60;previous_plan_id&#x60; or &#x60;subscription_plan_id&#x60; in your request, not both.</value>

        [DataMember(Name="previous_plan_id")]
        public string PreviousPlanId { get; set; }

        /// <summary>
        /// The date when the replacement occurs. It can be either the current date or the end of the current billing period.
        /// </summary>
        /// <value>The date when the replacement occurs. It can be either the current date or the end of the current billing period.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReplaceAtEnum
        {
            /// <summary>
            /// Enum NowEnum for now
            /// </summary>
            [EnumMember(Value = "now")]
            NowEnum = 0,
            /// <summary>
            /// Enum EndOfBillingPeriodEnum for end_of_billing_period
            /// </summary>
            [EnumMember(Value = "end_of_billing_period")]
            EndOfBillingPeriodEnum = 1,
            /// <summary>
            /// Enum SpecificDateEnum for specific_date
            /// </summary>
            [EnumMember(Value = "specific_date")]
            SpecificDateEnum = 2        }

        /// <summary>
        /// The date when the replacement occurs. It can be either the current date or the end of the current billing period.
        /// </summary>
        /// <value>The date when the replacement occurs. It can be either the current date or the end of the current billing period.</value>

        [DataMember(Name="replace_at")]
        public ReplaceAtEnum? ReplaceAt { get; set; }

        /// <summary>
        /// The type of the replacement.
        /// </summary>
        /// <value>The type of the replacement.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReplacementTypeEnum
        {
            /// <summary>
            /// Enum UpgradeEnum for upgrade
            /// </summary>
            [EnumMember(Value = "upgrade")]
            UpgradeEnum = 0,
            /// <summary>
            /// Enum DowngradeEnum for downgrade
            /// </summary>
            [EnumMember(Value = "downgrade")]
            DowngradeEnum = 1,
            /// <summary>
            /// Enum CrossgradeEnum for crossgrade
            /// </summary>
            [EnumMember(Value = "crossgrade")]
            CrossgradeEnum = 2,
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 3        }

        /// <summary>
        /// The type of the replacement.
        /// </summary>
        /// <value>The type of the replacement.</value>

        [DataMember(Name="replacement_type")]
        public ReplacementTypeEnum? ReplacementType { get; set; }

        /// <summary>
        /// A unique string to represent the subscription plan in the order. The unique token is used to perform multiple actions against a newly added subscription plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added subscription plan and use that token in future order actions.
        /// </summary>
        /// <value>A unique string to represent the subscription plan in the order. The unique token is used to perform multiple actions against a newly added subscription plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added subscription plan and use that token in future order actions.</value>

        [DataMember(Name="unique_token")]
        public string UniqueToken { get; set; }

        /// <summary>
        /// The id of the subscription plan to be updated. It can be the latest version or any history version id.
        /// </summary>
        /// <value>The id of the subscription plan to be updated. It can be the latest version or any history version id.</value>

        [DataMember(Name="plan_id")]
        public string PlanId { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionItems
        /// </summary>

        [DataMember(Name="subscription_items")]
        public AllOfsubscriptionReplacePlanPatchResponseSubscriptionItems SubscriptionItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionReplacePlanPatchResponse {\n");
            sb.Append("  PreviousSubscriptionPlanId: ").Append(PreviousSubscriptionPlanId).Append("\n");
            sb.Append("  PreviousPlanId: ").Append(PreviousPlanId).Append("\n");
            sb.Append("  ReplaceAt: ").Append(ReplaceAt).Append("\n");
            sb.Append("  ReplacementType: ").Append(ReplacementType).Append("\n");
            sb.Append("  UniqueToken: ").Append(UniqueToken).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  SubscriptionItems: ").Append(SubscriptionItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionReplacePlanPatchResponse)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionReplacePlanPatchResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionReplacePlanPatchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionReplacePlanPatchResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PreviousSubscriptionPlanId == other.PreviousSubscriptionPlanId ||
                    PreviousSubscriptionPlanId != null &&
                    PreviousSubscriptionPlanId.Equals(other.PreviousSubscriptionPlanId)
                ) && 
                (
                    PreviousPlanId == other.PreviousPlanId ||
                    PreviousPlanId != null &&
                    PreviousPlanId.Equals(other.PreviousPlanId)
                ) && 
                (
                    ReplaceAt == other.ReplaceAt ||
                    ReplaceAt != null &&
                    ReplaceAt.Equals(other.ReplaceAt)
                ) && 
                (
                    ReplacementType == other.ReplacementType ||
                    ReplacementType != null &&
                    ReplacementType.Equals(other.ReplacementType)
                ) && 
                (
                    UniqueToken == other.UniqueToken ||
                    UniqueToken != null &&
                    UniqueToken.Equals(other.UniqueToken)
                ) && 
                (
                    PlanId == other.PlanId ||
                    PlanId != null &&
                    PlanId.Equals(other.PlanId)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    SubscriptionItems == other.SubscriptionItems ||
                    SubscriptionItems != null &&
                    SubscriptionItems.Equals(other.SubscriptionItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PreviousSubscriptionPlanId != null)
                    hashCode = hashCode * 59 + PreviousSubscriptionPlanId.GetHashCode();
                    if (PreviousPlanId != null)
                    hashCode = hashCode * 59 + PreviousPlanId.GetHashCode();
                    if (ReplaceAt != null)
                    hashCode = hashCode * 59 + ReplaceAt.GetHashCode();
                    if (ReplacementType != null)
                    hashCode = hashCode * 59 + ReplacementType.GetHashCode();
                    if (UniqueToken != null)
                    hashCode = hashCode * 59 + UniqueToken.GetHashCode();
                    if (PlanId != null)
                    hashCode = hashCode * 59 + PlanId.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (SubscriptionItems != null)
                    hashCode = hashCode * 59 + SubscriptionItems.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionReplacePlanPatchResponse left, SubscriptionReplacePlanPatchResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionReplacePlanPatchResponse left, SubscriptionReplacePlanPatchResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
