/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WriteOffItemsRequest : IEquatable<WriteOffItemsRequest>
    { 
        /// <summary>
        /// An arbitrary string associated with the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string associated with the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="deferred_revenue_account")]
        public string DeferredRevenueAccount { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="on_account_account")]
        public string OnAccountAccount { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="recognized_revenue_account")]
        public string RecognizedRevenueAccount { get; set; }

        /// <summary>
        /// The name of the revenue recognition rule governing the revenue schedule.
        /// </summary>
        /// <value>The name of the revenue recognition rule governing the revenue schedule.</value>

        [DataMember(Name="revenue_recognition_rule_name")]
        public string RevenueRecognitionRuleName { get; set; }

        /// <summary>
        /// The end date of the service period associated with this invoice item. If the price for the associated subscription item is a one-time fee, then this date is the date of that subscription item.
        /// </summary>
        /// <value>The end date of the service period associated with this invoice item. If the price for the associated subscription item is a one-time fee, then this date is the date of that subscription item.</value>

        [DataMember(Name="service_end")]
        public DateTime? ServiceEnd { get; set; }

        /// <summary>
        /// The start date of the service period associated with this invoice item. If the price for the associated subscription item is a one-time fee, then this date is the date of that subscription item.
        /// </summary>
        /// <value>The start date of the service period associated with this invoice item. If the price for the associated subscription item is a one-time fee, then this date is the date of that subscription item.</value>

        [DataMember(Name="service_start")]
        public DateTime? ServiceStart { get; set; }

        /// <summary>
        /// The unique SKU (stock keeping unit) of the product associated with this item.
        /// </summary>
        /// <value>The unique SKU (stock keeping unit) of the product associated with this item.</value>

        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Specifies the units used to measure usage.
        /// </summary>
        /// <value>Specifies the units used to measure usage.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The unique identifier of the invoice item.
        /// </summary>
        /// <value>The unique identifier of the invoice item.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WriteOffItemsRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeferredRevenueAccount: ").Append(DeferredRevenueAccount).Append("\n");
            sb.Append("  OnAccountAccount: ").Append(OnAccountAccount).Append("\n");
            sb.Append("  RecognizedRevenueAccount: ").Append(RecognizedRevenueAccount).Append("\n");
            sb.Append("  RevenueRecognitionRuleName: ").Append(RevenueRecognitionRuleName).Append("\n");
            sb.Append("  ServiceEnd: ").Append(ServiceEnd).Append("\n");
            sb.Append("  ServiceStart: ").Append(ServiceStart).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WriteOffItemsRequest)obj);
        }

        /// <summary>
        /// Returns true if WriteOffItemsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of WriteOffItemsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WriteOffItemsRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DeferredRevenueAccount == other.DeferredRevenueAccount ||
                    DeferredRevenueAccount != null &&
                    DeferredRevenueAccount.Equals(other.DeferredRevenueAccount)
                ) && 
                (
                    OnAccountAccount == other.OnAccountAccount ||
                    OnAccountAccount != null &&
                    OnAccountAccount.Equals(other.OnAccountAccount)
                ) && 
                (
                    RecognizedRevenueAccount == other.RecognizedRevenueAccount ||
                    RecognizedRevenueAccount != null &&
                    RecognizedRevenueAccount.Equals(other.RecognizedRevenueAccount)
                ) && 
                (
                    RevenueRecognitionRuleName == other.RevenueRecognitionRuleName ||
                    RevenueRecognitionRuleName != null &&
                    RevenueRecognitionRuleName.Equals(other.RevenueRecognitionRuleName)
                ) && 
                (
                    ServiceEnd == other.ServiceEnd ||
                    ServiceEnd != null &&
                    ServiceEnd.Equals(other.ServiceEnd)
                ) && 
                (
                    ServiceStart == other.ServiceStart ||
                    ServiceStart != null &&
                    ServiceStart.Equals(other.ServiceStart)
                ) && 
                (
                    Sku == other.Sku ||
                    Sku != null &&
                    Sku.Equals(other.Sku)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DeferredRevenueAccount != null)
                    hashCode = hashCode * 59 + DeferredRevenueAccount.GetHashCode();
                    if (OnAccountAccount != null)
                    hashCode = hashCode * 59 + OnAccountAccount.GetHashCode();
                    if (RecognizedRevenueAccount != null)
                    hashCode = hashCode * 59 + RecognizedRevenueAccount.GetHashCode();
                    if (RevenueRecognitionRuleName != null)
                    hashCode = hashCode * 59 + RevenueRecognitionRuleName.GetHashCode();
                    if (ServiceEnd != null)
                    hashCode = hashCode * 59 + ServiceEnd.GetHashCode();
                    if (ServiceStart != null)
                    hashCode = hashCode * 59 + ServiceStart.GetHashCode();
                    if (Sku != null)
                    hashCode = hashCode * 59 + Sku.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WriteOffItemsRequest left, WriteOffItemsRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WriteOffItemsRequest left, WriteOffItemsRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
