/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// If the &#x60;type&#x60; of the payment method is &#x60;cc_ref&#x60;, this hash contains details about the Credit Card Reference Transactions payment method. See [Supported payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/A_Supported_Payment_Methods) for payment gateways that support this type of payment method.
    /// </summary>
    [DataContract]
    public partial class CcRef : IEquatable<CcRef>
    { 
        /// <summary>
        /// A gateway unique identifier that replaces sensitive payment method data. This field is conditionally required only when &#x60;token&#x60; is being used to represent a gateway customer profile.
        /// </summary>
        /// <value>A gateway unique identifier that replaces sensitive payment method data. This field is conditionally required only when &#x60;token&#x60; is being used to represent a gateway customer profile.</value>

        [DataMember(Name="second_token")]
        public string SecondToken { get; set; }

        /// <summary>
        /// A gateway unique identifier that replaces sensitive payment method data or represents a gateway&#x27;s unique customer profile. When &#x60;token&#x60; is used to represent a customer profile, &#x60;second_token&#x60; is conditionally required for representing the underlying tokenized payment method.
        /// </summary>
        /// <value>A gateway unique identifier that replaces sensitive payment method data or represents a gateway&#x27;s unique customer profile. When &#x60;token&#x60; is used to represent a customer profile, &#x60;second_token&#x60; is conditionally required for representing the underlying tokenized payment method.</value>
        [Required]

        [DataMember(Name="token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Mandate
        /// </summary>

        [DataMember(Name="mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>

        [DataMember(Name="card")]
        public CcRefCard Card { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CcRef {\n");
            sb.Append("  SecondToken: ").Append(SecondToken).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Mandate: ").Append(Mandate).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CcRef)obj);
        }

        /// <summary>
        /// Returns true if CcRef instances are equal
        /// </summary>
        /// <param name="other">Instance of CcRef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CcRef other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SecondToken == other.SecondToken ||
                    SecondToken != null &&
                    SecondToken.Equals(other.SecondToken)
                ) && 
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                ) && 
                (
                    Mandate == other.Mandate ||
                    Mandate != null &&
                    Mandate.Equals(other.Mandate)
                ) && 
                (
                    Card == other.Card ||
                    Card != null &&
                    Card.Equals(other.Card)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SecondToken != null)
                    hashCode = hashCode * 59 + SecondToken.GetHashCode();
                    if (Token != null)
                    hashCode = hashCode * 59 + Token.GetHashCode();
                    if (Mandate != null)
                    hashCode = hashCode * 59 + Mandate.GetHashCode();
                    if (Card != null)
                    hashCode = hashCode * 59 + Card.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CcRef left, CcRef right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CcRef left, CcRef right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
