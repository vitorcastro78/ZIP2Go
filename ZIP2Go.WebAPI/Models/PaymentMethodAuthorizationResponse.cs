/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ZIP2Go.WebAPI.Enums;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentMethodAuthorizationResponse : IEquatable<PaymentMethodAuthorizationResponse>
    { 
        /// <summary>
        /// Identifier of the authorization transaction from the payment gateway.
        /// </summary>
        /// <value>Identifier of the authorization transaction from the payment gateway.</value>

        [DataMember(Name="auth_transaction_id")]
        public string AuthTransactionId { get; set; }

        /// <summary>
        /// A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead. Gateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems. When you create a payment for capturing the authorized funds, it is highly recommended to pass in the &#x60;gateway_order_id&#x60; that you used when authorizing the funds by using the Create authorization operation, together with the &#x60;authorization_id&#x60; field.
        /// </summary>
        /// <value>A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead. Gateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems. When you create a payment for capturing the authorized funds, it is highly recommended to pass in the &#x60;gateway_order_id&#x60; that you used when authorizing the funds by using the Create authorization operation, together with the &#x60;authorization_id&#x60; field.</value>

        [DataMember(Name="gateway_order_id")]
        public string GatewayOrderId { get; set; }

       

        /// <summary>
        /// The status of the payment authorization.
        /// </summary>
        /// <value>The status of the payment authorization.</value>

        [DataMember(Name="state")]
        public PaymentMethodAuthorizationStateEnum? State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethodAuthorizationResponse {\n");
            sb.Append("  AuthTransactionId: ").Append(AuthTransactionId).Append("\n");
            sb.Append("  GatewayOrderId: ").Append(GatewayOrderId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentMethodAuthorizationResponse)obj);
        }

        /// <summary>
        /// Returns true if PaymentMethodAuthorizationResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentMethodAuthorizationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodAuthorizationResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AuthTransactionId == other.AuthTransactionId ||
                    AuthTransactionId != null &&
                    AuthTransactionId.Equals(other.AuthTransactionId)
                ) && 
                (
                    GatewayOrderId == other.GatewayOrderId ||
                    GatewayOrderId != null &&
                    GatewayOrderId.Equals(other.GatewayOrderId)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AuthTransactionId != null)
                    hashCode = hashCode * 59 + AuthTransactionId.GetHashCode();
                    if (GatewayOrderId != null)
                    hashCode = hashCode * 59 + GatewayOrderId.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentMethodAuthorizationResponse left, PaymentMethodAuthorizationResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentMethodAuthorizationResponse left, PaymentMethodAuthorizationResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
