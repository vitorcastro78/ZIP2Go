/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewBillingDocumentItemResponse : IEquatable<SubscriptionPreviewBillingDocumentItemResponse>
    { 
        /// <summary>
        /// Gets or Sets SubscriptionItemDescription
        /// </summary>

        [DataMember(Name="subscription_item_description")]
        public string SubscriptionItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionItemName
        /// </summary>

        [DataMember(Name="subscription_item_name")]
        public string SubscriptionItemName { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionItemNumber
        /// </summary>

        [DataMember(Name="subscription_item_number")]
        public string SubscriptionItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ProcessingTypeEnum
        {
            /// <summary>
            /// Enum SubscriptionItemEnum for subscription_item
            /// </summary>
            [EnumMember(Value = "subscription_item")]
            SubscriptionItemEnum = 0,
            /// <summary>
            /// Enum DiscountEnum for discount
            /// </summary>
            [EnumMember(Value = "discount")]
            DiscountEnum = 1,
            /// <summary>
            /// Enum PrepaymentEnum for prepayment
            /// </summary>
            [EnumMember(Value = "prepayment")]
            PrepaymentEnum = 2,
            /// <summary>
            /// Enum TaxEnum for tax
            /// </summary>
            [EnumMember(Value = "tax")]
            TaxEnum = 3        }

        /// <summary>
        /// Gets or Sets ProcessingType
        /// </summary>

        [DataMember(Name="processing_type")]
        public ProcessingTypeEnum? ProcessingType { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>

        [DataMember(Name="product_name")]
        public string ProductName { get; set; }

        /// <summary>
        /// The identifier of the price this billing document item is associated with.
        /// </summary>
        /// <value>The identifier of the price this billing document item is associated with.</value>

        [DataMember(Name="price_id")]
        public string PriceId { get; set; }

        /// <summary>
        /// The end date of the service period associated with this billing document item. If the associated charge is a one-time fee, then this date is the date of that charge.
        /// </summary>
        /// <value>The end date of the service period associated with this billing document item. If the associated charge is a one-time fee, then this date is the date of that charge.</value>

        [DataMember(Name="service_end_date")]
        public string ServiceEndDate { get; set; }

        /// <summary>
        /// The start date of the service period associated with this billing document item. If the associated charge is a one-time fee, then this date is the date of that charge.
        /// </summary>
        /// <value>The start date of the service period associated with this billing document item. If the associated charge is a one-time fee, then this date is the date of that charge.</value>

        [DataMember(Name="service_start_date")]
        public string ServiceStartDate { get; set; }

        /// <summary>
        /// The amount of tax applied to the billing document item.
        /// </summary>
        /// <value>The amount of tax applied to the billing document item.</value>

        [DataMember(Name="tax")]
        public decimal? Tax { get; set; }

        /// <summary>
        /// The number of units of this item.
        /// </summary>
        /// <value>The number of units of this item.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Specifies the units used to measure usage.
        /// </summary>
        /// <value>Specifies the units used to measure usage.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The total amount of this billing document item exclusive of tax.
        /// </summary>
        /// <value>The total amount of this billing document item exclusive of tax.</value>

        [DataMember(Name="subtotal")]
        public decimal? Subtotal { get; set; }

        /// <summary>
        /// The total amount of this billing document item.
        /// </summary>
        /// <value>The total amount of this billing document item.</value>

        [DataMember(Name="total")]
        public decimal? Total { get; set; }

        /// <summary>
        /// Gets or Sets TaxationItems
        /// </summary>

        [DataMember(Name="taxation_items")]
        public List<AllOfsubscriptionPreviewBillingDocumentItemResponseTaxationItemsItems> TaxationItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewBillingDocumentItemResponse {\n");
            sb.Append("  SubscriptionItemDescription: ").Append(SubscriptionItemDescription).Append("\n");
            sb.Append("  SubscriptionItemName: ").Append(SubscriptionItemName).Append("\n");
            sb.Append("  SubscriptionItemNumber: ").Append(SubscriptionItemNumber).Append("\n");
            sb.Append("  ProcessingType: ").Append(ProcessingType).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  PriceId: ").Append(PriceId).Append("\n");
            sb.Append("  ServiceEndDate: ").Append(ServiceEndDate).Append("\n");
            sb.Append("  ServiceStartDate: ").Append(ServiceStartDate).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TaxationItems: ").Append(TaxationItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionPreviewBillingDocumentItemResponse)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewBillingDocumentItemResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPreviewBillingDocumentItemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewBillingDocumentItemResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubscriptionItemDescription == other.SubscriptionItemDescription ||
                    SubscriptionItemDescription != null &&
                    SubscriptionItemDescription.Equals(other.SubscriptionItemDescription)
                ) && 
                (
                    SubscriptionItemName == other.SubscriptionItemName ||
                    SubscriptionItemName != null &&
                    SubscriptionItemName.Equals(other.SubscriptionItemName)
                ) && 
                (
                    SubscriptionItemNumber == other.SubscriptionItemNumber ||
                    SubscriptionItemNumber != null &&
                    SubscriptionItemNumber.Equals(other.SubscriptionItemNumber)
                ) && 
                (
                    ProcessingType == other.ProcessingType ||
                    ProcessingType != null &&
                    ProcessingType.Equals(other.ProcessingType)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    PriceId == other.PriceId ||
                    PriceId != null &&
                    PriceId.Equals(other.PriceId)
                ) && 
                (
                    ServiceEndDate == other.ServiceEndDate ||
                    ServiceEndDate != null &&
                    ServiceEndDate.Equals(other.ServiceEndDate)
                ) && 
                (
                    ServiceStartDate == other.ServiceStartDate ||
                    ServiceStartDate != null &&
                    ServiceStartDate.Equals(other.ServiceStartDate)
                ) && 
                (
                    Tax == other.Tax ||
                    Tax != null &&
                    Tax.Equals(other.Tax)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    Subtotal == other.Subtotal ||
                    Subtotal != null &&
                    Subtotal.Equals(other.Subtotal)
                ) && 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) && 
                (
                    TaxationItems == other.TaxationItems ||
                    TaxationItems != null &&
                    TaxationItems.SequenceEqual(other.TaxationItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubscriptionItemDescription != null)
                    hashCode = hashCode * 59 + SubscriptionItemDescription.GetHashCode();
                    if (SubscriptionItemName != null)
                    hashCode = hashCode * 59 + SubscriptionItemName.GetHashCode();
                    if (SubscriptionItemNumber != null)
                    hashCode = hashCode * 59 + SubscriptionItemNumber.GetHashCode();
                    if (ProcessingType != null)
                    hashCode = hashCode * 59 + ProcessingType.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (PriceId != null)
                    hashCode = hashCode * 59 + PriceId.GetHashCode();
                    if (ServiceEndDate != null)
                    hashCode = hashCode * 59 + ServiceEndDate.GetHashCode();
                    if (ServiceStartDate != null)
                    hashCode = hashCode * 59 + ServiceStartDate.GetHashCode();
                    if (Tax != null)
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    if (Subtotal != null)
                    hashCode = hashCode * 59 + Subtotal.GetHashCode();
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (TaxationItems != null)
                    hashCode = hashCode * 59 + TaxationItems.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionPreviewBillingDocumentItemResponse left, SubscriptionPreviewBillingDocumentItemResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionPreviewBillingDocumentItemResponse left, SubscriptionPreviewBillingDocumentItemResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
