/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FlexibleBillingDocumentSettings : IEquatable<FlexibleBillingDocumentSettings>
    { 
        /// <summary>
        /// Identifier of the invoice template associated with this customer. Not applicable for debit memos or credit memos.
        /// </summary>
        /// <value>Identifier of the invoice template associated with this customer. Not applicable for debit memos or credit memos.</value>

        [DataMember(Name="template_id")]
        public string TemplateId { get; set; }

        /// <summary>
        /// ID of the billing document sequence set.
        /// </summary>
        /// <value>ID of the billing document sequence set.</value>

        [DataMember(Name="sequence_set_id")]
        public string SequenceSetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlexibleBillingDocumentSettings {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  SequenceSetId: ").Append(SequenceSetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlexibleBillingDocumentSettings)obj);
        }

        /// <summary>
        /// Returns true if FlexibleBillingDocumentSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of FlexibleBillingDocumentSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexibleBillingDocumentSettings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TemplateId == other.TemplateId ||
                    TemplateId != null &&
                    TemplateId.Equals(other.TemplateId)
                ) && 
                (
                    SequenceSetId == other.SequenceSetId ||
                    SequenceSetId != null &&
                    SequenceSetId.Equals(other.SequenceSetId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TemplateId != null)
                    hashCode = hashCode * 59 + TemplateId.GetHashCode();
                    if (SequenceSetId != null)
                    hashCode = hashCode * 59 + SequenceSetId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlexibleBillingDocumentSettings left, FlexibleBillingDocumentSettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlexibleBillingDocumentSettings left, FlexibleBillingDocumentSettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
