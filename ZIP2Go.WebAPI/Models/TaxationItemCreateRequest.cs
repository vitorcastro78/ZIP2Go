/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TaxationItemCreateRequest : IEquatable<TaxationItemCreateRequest>
    { 
        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="on_account_account")]
        public string OnAccountAccount { get; set; }

        /// <summary>
        /// The calculated tax amount excluded due to the exemption.
        /// </summary>
        /// <value>The calculated tax amount excluded due to the exemption.</value>

        [DataMember(Name="amount_exempt")]
        public decimal? AmountExempt { get; set; }

        /// <summary>
        /// Unique identifier of the invoice item to which the taxation item applies. **This field is required if you are creating a credit memo or debit memo from an invoice, and is not applicable if you are creating an invoice.**.     
        /// </summary>
        /// <value>Unique identifier of the invoice item to which the taxation item applies. **This field is required if you are creating a credit memo or debit memo from an invoice, and is not applicable if you are creating an invoice.**.     </value>

        [DataMember(Name="invoice_item_id")]
        public string InvoiceItemId { get; set; }

        /// <summary>
        /// The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
        /// </summary>
        /// <value>The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.</value>

        [MaxLength(32)]
        [DataMember(Name="jurisdiction")]
        public string Jurisdiction { get; set; }

        /// <summary>
        /// The identifier for the location based on the value of the &#x60;tax_code&#x60; field.
        /// </summary>
        /// <value>The identifier for the location based on the value of the &#x60;tax_code&#x60; field.</value>

        [MaxLength(32)]
        [DataMember(Name="location_code")]
        public string LocationCode { get; set; }

        /// <summary>
        /// The name of the taxation item.
        /// </summary>
        /// <value>The name of the taxation item.</value>
        [Required]

        [MaxLength(128)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The amount of the tax applied to the total price.
        /// </summary>
        /// <value>The amount of the tax applied to the total price.</value>
        [Required]

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.
        /// </summary>
        /// <value>A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.</value>
        [Required]

        [DataMember(Name="tax_code")]
        public string TaxCode { get; set; }

        /// <summary>
        /// The amount of the tax applied to the total price.
        /// </summary>
        /// <value>The amount of the tax applied to the total price.</value>

        [DataMember(Name="tax_code_name")]
        public string TaxCodeName { get; set; }

        /// <summary>
        /// The date on which the tax is applied.
        /// </summary>
        /// <value>The date on which the tax is applied.</value>
        [Required]

        [DataMember(Name="tax_date")]
        public DateTime? TaxDate { get; set; }

        /// <summary>
        /// The amount of the tax applied to the total price.
        /// </summary>
        /// <value>The amount of the tax applied to the total price.</value>
        [Required]

        [DataMember(Name="tax_rate")]
        public decimal? TaxRate { get; set; }

        /// <summary>
        /// The name of the tax rate, such as sales tax or GST. This name is displayed on billing documents.
        /// </summary>
        /// <value>The name of the tax rate, such as sales tax or GST. This name is displayed on billing documents.</value>

        [DataMember(Name="tax_rate_name")]
        public string TaxRateName { get; set; }

        /// <summary>
        /// Indicates whether the tax rate is an amount or a percentage.
        /// </summary>
        /// <value>Indicates whether the tax rate is an amount or a percentage.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TaxRateTypeEnum
        {
            /// <summary>
            /// Enum PercentEnum for percent
            /// </summary>
            [EnumMember(Value = "percent")]
            PercentEnum = 0,
            /// <summary>
            /// Enum AmountEnum for amount
            /// </summary>
            [EnumMember(Value = "amount")]
            AmountEnum = 1        }

        /// <summary>
        /// Indicates whether the tax rate is an amount or a percentage.
        /// </summary>
        /// <value>Indicates whether the tax rate is an amount or a percentage.</value>

        [DataMember(Name="tax_rate_type")]
        public TaxRateTypeEnum? TaxRateType { get; set; }

        /// <summary>
        /// The ID of the taxation item of the invoice, from which the credit or debit memo is created. This field is only applicable when the &#x60;type&#x60; of the billing document is &#x60;credit_memo&#x60; and &#x60;debit_memo&#x60;.
        /// </summary>
        /// <value>The ID of the taxation item of the invoice, from which the credit or debit memo is created. This field is only applicable when the &#x60;type&#x60; of the billing document is &#x60;credit_memo&#x60; and &#x60;debit_memo&#x60;.</value>

        [DataMember(Name="source_tax_item_id")]
        public string SourceTaxItemId { get; set; }

        /// <summary>
        /// If set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.
        /// </summary>
        /// <value>If set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.</value>

        [DataMember(Name="tax_inclusive")]
        public bool? TaxInclusive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxationItemCreateRequest {\n");
            sb.Append("  OnAccountAccount: ").Append(OnAccountAccount).Append("\n");
            sb.Append("  AmountExempt: ").Append(AmountExempt).Append("\n");
            sb.Append("  InvoiceItemId: ").Append(InvoiceItemId).Append("\n");
            sb.Append("  Jurisdiction: ").Append(Jurisdiction).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  TaxCodeName: ").Append(TaxCodeName).Append("\n");
            sb.Append("  TaxDate: ").Append(TaxDate).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxRateName: ").Append(TaxRateName).Append("\n");
            sb.Append("  TaxRateType: ").Append(TaxRateType).Append("\n");
            sb.Append("  SourceTaxItemId: ").Append(SourceTaxItemId).Append("\n");
            sb.Append("  TaxInclusive: ").Append(TaxInclusive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaxationItemCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if TaxationItemCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxationItemCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxationItemCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OnAccountAccount == other.OnAccountAccount ||
                    OnAccountAccount != null &&
                    OnAccountAccount.Equals(other.OnAccountAccount)
                ) && 
                (
                    AmountExempt == other.AmountExempt ||
                    AmountExempt != null &&
                    AmountExempt.Equals(other.AmountExempt)
                ) && 
                (
                    InvoiceItemId == other.InvoiceItemId ||
                    InvoiceItemId != null &&
                    InvoiceItemId.Equals(other.InvoiceItemId)
                ) && 
                (
                    Jurisdiction == other.Jurisdiction ||
                    Jurisdiction != null &&
                    Jurisdiction.Equals(other.Jurisdiction)
                ) && 
                (
                    LocationCode == other.LocationCode ||
                    LocationCode != null &&
                    LocationCode.Equals(other.LocationCode)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    TaxCode == other.TaxCode ||
                    TaxCode != null &&
                    TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    TaxCodeName == other.TaxCodeName ||
                    TaxCodeName != null &&
                    TaxCodeName.Equals(other.TaxCodeName)
                ) && 
                (
                    TaxDate == other.TaxDate ||
                    TaxDate != null &&
                    TaxDate.Equals(other.TaxDate)
                ) && 
                (
                    TaxRate == other.TaxRate ||
                    TaxRate != null &&
                    TaxRate.Equals(other.TaxRate)
                ) && 
                (
                    TaxRateName == other.TaxRateName ||
                    TaxRateName != null &&
                    TaxRateName.Equals(other.TaxRateName)
                ) && 
                (
                    TaxRateType == other.TaxRateType ||
                    TaxRateType != null &&
                    TaxRateType.Equals(other.TaxRateType)
                ) && 
                (
                    SourceTaxItemId == other.SourceTaxItemId ||
                    SourceTaxItemId != null &&
                    SourceTaxItemId.Equals(other.SourceTaxItemId)
                ) && 
                (
                    TaxInclusive == other.TaxInclusive ||
                    TaxInclusive != null &&
                    TaxInclusive.Equals(other.TaxInclusive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OnAccountAccount != null)
                    hashCode = hashCode * 59 + OnAccountAccount.GetHashCode();
                    if (AmountExempt != null)
                    hashCode = hashCode * 59 + AmountExempt.GetHashCode();
                    if (InvoiceItemId != null)
                    hashCode = hashCode * 59 + InvoiceItemId.GetHashCode();
                    if (Jurisdiction != null)
                    hashCode = hashCode * 59 + Jurisdiction.GetHashCode();
                    if (LocationCode != null)
                    hashCode = hashCode * 59 + LocationCode.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (TaxCode != null)
                    hashCode = hashCode * 59 + TaxCode.GetHashCode();
                    if (TaxCodeName != null)
                    hashCode = hashCode * 59 + TaxCodeName.GetHashCode();
                    if (TaxDate != null)
                    hashCode = hashCode * 59 + TaxDate.GetHashCode();
                    if (TaxRate != null)
                    hashCode = hashCode * 59 + TaxRate.GetHashCode();
                    if (TaxRateName != null)
                    hashCode = hashCode * 59 + TaxRateName.GetHashCode();
                    if (TaxRateType != null)
                    hashCode = hashCode * 59 + TaxRateType.GetHashCode();
                    if (SourceTaxItemId != null)
                    hashCode = hashCode * 59 + SourceTaxItemId.GetHashCode();
                    if (TaxInclusive != null)
                    hashCode = hashCode * 59 + TaxInclusive.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaxationItemCreateRequest left, TaxationItemCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaxationItemCreateRequest left, TaxationItemCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
