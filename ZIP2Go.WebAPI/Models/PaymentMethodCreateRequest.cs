/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ZIP2Go.WebAPI.Enums;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentMethodCreateRequest : IEquatable<PaymentMethodCreateRequest>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfpaymentMethodCreateRequestCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// The type of the payment method. An additional hash is included on the payment method with a name matching this value. It contains additional information specific to the payment method type.
        /// </summary>
        /// <value>The type of the payment method. An additional hash is included on the payment method with a name matching this value. It contains additional information specific to the payment method type.</value>
        [Required]

        [DataMember(Name="type")]
        public PaymentMethodTypeEnum? Type { get; set; }

        /// <summary>
        /// The custom type of the payment method from Universal Payment Connector.
        /// </summary>
        /// <value>The custom type of the payment method from Universal Payment Connector.</value>

        [DataMember(Name="custom_type")]
        public string CustomType { get; set; }

        /// <summary>
        /// A customer account identifier.
        /// </summary>
        /// <value>A customer account identifier.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// The customer account associated with this payment method.
        /// </summary>
        /// <value>The customer account associated with this payment method.</value>

        [DataMember(Name="account")]
        public AllOfpaymentMethodCreateRequestAccount Account { get; private set; }

        /// <summary>
        /// Gets or Sets BillingDetails
        /// </summary>

        [DataMember(Name="billing_details")]
        public BillingDetails BillingDetails { get; set; }

        /// <summary>
        /// Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped.
        /// </summary>
        /// <value>Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped.</value>

        [DataMember(Name="maximum_payment_attempts")]
        public decimal? MaximumPaymentAttempts { get; set; }

        /// <summary>
        /// The retry interval in hours.
        /// </summary>
        /// <value>The retry interval in hours.</value>

        [DataMember(Name="payment_retry_interval")]
        public int? PaymentRetryInterval { get; set; }

        /// <summary>
        /// Identifier of the device browser session.
        /// </summary>
        /// <value>Identifier of the device browser session.</value>

        [DataMember(Name="device_session_id")]
        public string DeviceSessionId { get; set; }

        /// <summary>
        /// The IP address from which the Mandate was accepted by the customer.
        /// </summary>
        /// <value>The IP address from which the Mandate was accepted by the customer.</value>

        [DataMember(Name="ip_address")]
        public string IpAddress { get; set; }

        /// <summary>
        /// The first six or eight digits of the payment method&#x27;s number, such as the credit card number or account number. Banks use this number to identify a payment method.
        /// </summary>
        /// <value>The first six or eight digits of the payment method&#x27;s number, such as the credit card number or account number. Banks use this number to identify a payment method.</value>

        [DataMember(Name="bank_identification_number")]
        public string BankIdentificationNumber { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>

        [DataMember(Name="card")]
        public Card Card { get; set; }

        /// <summary>
        /// Gets or Sets PaypalExpressNative
        /// </summary>

        [DataMember(Name="paypal_express_native")]
        public PaypalExpressNative PaypalExpressNative { get; set; }

        /// <summary>
        /// Gets or Sets PaypalExpress
        /// </summary>

        [DataMember(Name="paypal_express")]
        public PaypalExpress PaypalExpress { get; set; }

        /// <summary>
        /// Gets or Sets PaypalAdaptive
        /// </summary>

        [DataMember(Name="paypal_adaptive")]
        public PaypalAdaptive PaypalAdaptive { get; set; }

        /// <summary>
        /// Gets or Sets SepaDebit
        /// </summary>

        [DataMember(Name="sepa_debit")]
        public SepaDebit SepaDebit { get; set; }

        /// <summary>
        /// Gets or Sets CcRef
        /// </summary>

        [DataMember(Name="cc_ref")]
        public CcRef CcRef { get; set; }

        /// <summary>
        /// Gets or Sets ApplePay
        /// </summary>

        [DataMember(Name="apple_pay")]
        public ApplePayCreate ApplePay { get; set; }

        /// <summary>
        /// Gets or Sets GooglePay
        /// </summary>

        [DataMember(Name="google_pay")]
        public GooglePayCreate GooglePay { get; set; }

        /// <summary>
        /// Gets or Sets AchDebit
        /// </summary>

        [DataMember(Name="ach_debit")]
        public AchDebit AchDebit { get; set; }

        /// <summary>
        /// Gets or Sets BetalingsDebit
        /// </summary>

        [DataMember(Name="betalings_debit")]
        public BetalingsDebit BetalingsDebit { get; set; }

        /// <summary>
        /// Gets or Sets AutogiroDebit
        /// </summary>

        [DataMember(Name="autogiro_debit")]
        public AutogiroDebit AutogiroDebit { get; set; }

        /// <summary>
        /// Gets or Sets BacsDebit
        /// </summary>

        [DataMember(Name="bacs_debit")]
        public BacsDebit BacsDebit { get; set; }

        /// <summary>
        /// Gets or Sets AuBecsDebit
        /// </summary>

        [DataMember(Name="au_becs_debit")]
        public AuBecsDebit AuBecsDebit { get; set; }

        /// <summary>
        /// Gets or Sets NzBecsDebit
        /// </summary>

        [DataMember(Name="nz_becs_debit")]
        public NzBecsDebit NzBecsDebit { get; set; }

        /// <summary>
        /// Gets or Sets PadDebit
        /// </summary>

        [DataMember(Name="pad_debit")]
        public PadDebit PadDebit { get; set; }

        /// <summary>
        /// A human-readable customer account identifier. It can be user-supplied.
        /// </summary>
        /// <value>A human-readable customer account identifier. It can be user-supplied.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Indicates whether it is the default payment method on the associated account.
        /// </summary>
        /// <value>Indicates whether it is the default payment method on the associated account.</value>

        [DataMember(Name="is_default")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Identifier of the payment gateway Zuora will use to authorize the payments that are made with this payment method.
        /// </summary>
        /// <value>Identifier of the payment gateway Zuora will use to authorize the payments that are made with this payment method.</value>

        [DataMember(Name="gateway_id")]
        public string GatewayId { get; set; }

        /// <summary>
        /// Gets or Sets GatewayOptions
        /// </summary>

        [DataMember(Name="gateway_options")]
        public Dictionary<string, string> GatewayOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethodCreateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  BillingDetails: ").Append(BillingDetails).Append("\n");
            sb.Append("  MaximumPaymentAttempts: ").Append(MaximumPaymentAttempts).Append("\n");
            sb.Append("  PaymentRetryInterval: ").Append(PaymentRetryInterval).Append("\n");
            sb.Append("  DeviceSessionId: ").Append(DeviceSessionId).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  BankIdentificationNumber: ").Append(BankIdentificationNumber).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  PaypalExpressNative: ").Append(PaypalExpressNative).Append("\n");
            sb.Append("  PaypalExpress: ").Append(PaypalExpress).Append("\n");
            sb.Append("  PaypalAdaptive: ").Append(PaypalAdaptive).Append("\n");
            sb.Append("  SepaDebit: ").Append(SepaDebit).Append("\n");
            sb.Append("  CcRef: ").Append(CcRef).Append("\n");
            sb.Append("  ApplePay: ").Append(ApplePay).Append("\n");
            sb.Append("  GooglePay: ").Append(GooglePay).Append("\n");
            sb.Append("  AchDebit: ").Append(AchDebit).Append("\n");
            sb.Append("  BetalingsDebit: ").Append(BetalingsDebit).Append("\n");
            sb.Append("  AutogiroDebit: ").Append(AutogiroDebit).Append("\n");
            sb.Append("  BacsDebit: ").Append(BacsDebit).Append("\n");
            sb.Append("  AuBecsDebit: ").Append(AuBecsDebit).Append("\n");
            sb.Append("  NzBecsDebit: ").Append(NzBecsDebit).Append("\n");
            sb.Append("  PadDebit: ").Append(PadDebit).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("  GatewayOptions: ").Append(GatewayOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentMethodCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if PaymentMethodCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentMethodCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    CustomType == other.CustomType ||
                    CustomType != null &&
                    CustomType.Equals(other.CustomType)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    BillingDetails == other.BillingDetails ||
                    BillingDetails != null &&
                    BillingDetails.Equals(other.BillingDetails)
                ) && 
                (
                    MaximumPaymentAttempts == other.MaximumPaymentAttempts ||
                    MaximumPaymentAttempts != null &&
                    MaximumPaymentAttempts.Equals(other.MaximumPaymentAttempts)
                ) && 
                (
                    PaymentRetryInterval == other.PaymentRetryInterval ||
                    PaymentRetryInterval != null &&
                    PaymentRetryInterval.Equals(other.PaymentRetryInterval)
                ) && 
                (
                    DeviceSessionId == other.DeviceSessionId ||
                    DeviceSessionId != null &&
                    DeviceSessionId.Equals(other.DeviceSessionId)
                ) && 
                (
                    IpAddress == other.IpAddress ||
                    IpAddress != null &&
                    IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    BankIdentificationNumber == other.BankIdentificationNumber ||
                    BankIdentificationNumber != null &&
                    BankIdentificationNumber.Equals(other.BankIdentificationNumber)
                ) && 
                (
                    Card == other.Card ||
                    Card != null &&
                    Card.Equals(other.Card)
                ) && 
                (
                    PaypalExpressNative == other.PaypalExpressNative ||
                    PaypalExpressNative != null &&
                    PaypalExpressNative.Equals(other.PaypalExpressNative)
                ) && 
                (
                    PaypalExpress == other.PaypalExpress ||
                    PaypalExpress != null &&
                    PaypalExpress.Equals(other.PaypalExpress)
                ) && 
                (
                    PaypalAdaptive == other.PaypalAdaptive ||
                    PaypalAdaptive != null &&
                    PaypalAdaptive.Equals(other.PaypalAdaptive)
                ) && 
                (
                    SepaDebit == other.SepaDebit ||
                    SepaDebit != null &&
                    SepaDebit.Equals(other.SepaDebit)
                ) && 
                (
                    CcRef == other.CcRef ||
                    CcRef != null &&
                    CcRef.Equals(other.CcRef)
                ) && 
                (
                    ApplePay == other.ApplePay ||
                    ApplePay != null &&
                    ApplePay.Equals(other.ApplePay)
                ) && 
                (
                    GooglePay == other.GooglePay ||
                    GooglePay != null &&
                    GooglePay.Equals(other.GooglePay)
                ) && 
                (
                    AchDebit == other.AchDebit ||
                    AchDebit != null &&
                    AchDebit.Equals(other.AchDebit)
                ) && 
                (
                    BetalingsDebit == other.BetalingsDebit ||
                    BetalingsDebit != null &&
                    BetalingsDebit.Equals(other.BetalingsDebit)
                ) && 
                (
                    AutogiroDebit == other.AutogiroDebit ||
                    AutogiroDebit != null &&
                    AutogiroDebit.Equals(other.AutogiroDebit)
                ) && 
                (
                    BacsDebit == other.BacsDebit ||
                    BacsDebit != null &&
                    BacsDebit.Equals(other.BacsDebit)
                ) && 
                (
                    AuBecsDebit == other.AuBecsDebit ||
                    AuBecsDebit != null &&
                    AuBecsDebit.Equals(other.AuBecsDebit)
                ) && 
                (
                    NzBecsDebit == other.NzBecsDebit ||
                    NzBecsDebit != null &&
                    NzBecsDebit.Equals(other.NzBecsDebit)
                ) && 
                (
                    PadDebit == other.PadDebit ||
                    PadDebit != null &&
                    PadDebit.Equals(other.PadDebit)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    IsDefault == other.IsDefault ||
                    IsDefault != null &&
                    IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    GatewayId == other.GatewayId ||
                    GatewayId != null &&
                    GatewayId.Equals(other.GatewayId)
                ) && 
                (
                    GatewayOptions == other.GatewayOptions ||
                    GatewayOptions != null &&
                    GatewayOptions.SequenceEqual(other.GatewayOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (CustomType != null)
                    hashCode = hashCode * 59 + CustomType.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (BillingDetails != null)
                    hashCode = hashCode * 59 + BillingDetails.GetHashCode();
                    if (MaximumPaymentAttempts != null)
                    hashCode = hashCode * 59 + MaximumPaymentAttempts.GetHashCode();
                    if (PaymentRetryInterval != null)
                    hashCode = hashCode * 59 + PaymentRetryInterval.GetHashCode();
                    if (DeviceSessionId != null)
                    hashCode = hashCode * 59 + DeviceSessionId.GetHashCode();
                    if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                    if (BankIdentificationNumber != null)
                    hashCode = hashCode * 59 + BankIdentificationNumber.GetHashCode();
                    if (Card != null)
                    hashCode = hashCode * 59 + Card.GetHashCode();
                    if (PaypalExpressNative != null)
                    hashCode = hashCode * 59 + PaypalExpressNative.GetHashCode();
                    if (PaypalExpress != null)
                    hashCode = hashCode * 59 + PaypalExpress.GetHashCode();
                    if (PaypalAdaptive != null)
                    hashCode = hashCode * 59 + PaypalAdaptive.GetHashCode();
                    if (SepaDebit != null)
                    hashCode = hashCode * 59 + SepaDebit.GetHashCode();
                    if (CcRef != null)
                    hashCode = hashCode * 59 + CcRef.GetHashCode();
                    if (ApplePay != null)
                    hashCode = hashCode * 59 + ApplePay.GetHashCode();
                    if (GooglePay != null)
                    hashCode = hashCode * 59 + GooglePay.GetHashCode();
                    if (AchDebit != null)
                    hashCode = hashCode * 59 + AchDebit.GetHashCode();
                    if (BetalingsDebit != null)
                    hashCode = hashCode * 59 + BetalingsDebit.GetHashCode();
                    if (AutogiroDebit != null)
                    hashCode = hashCode * 59 + AutogiroDebit.GetHashCode();
                    if (BacsDebit != null)
                    hashCode = hashCode * 59 + BacsDebit.GetHashCode();
                    if (AuBecsDebit != null)
                    hashCode = hashCode * 59 + AuBecsDebit.GetHashCode();
                    if (NzBecsDebit != null)
                    hashCode = hashCode * 59 + NzBecsDebit.GetHashCode();
                    if (PadDebit != null)
                    hashCode = hashCode * 59 + PadDebit.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (IsDefault != null)
                    hashCode = hashCode * 59 + IsDefault.GetHashCode();
                    if (GatewayId != null)
                    hashCode = hashCode * 59 + GatewayId.GetHashCode();
                    if (GatewayOptions != null)
                    hashCode = hashCode * 59 + GatewayOptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentMethodCreateRequest left, PaymentMethodCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentMethodCreateRequest left, PaymentMethodCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
