/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionReplacePlanPatchRequest : IEquatable<SubscriptionReplacePlanPatchRequest>
    { 
        /// <summary>
        /// Identifier of the subscription plan. Only provide one of &#x60;previous_plan_id&#x60; or &#x60;subscription_plan_id&#x60; in your request, not both.
        /// </summary>
        /// <value>Identifier of the subscription plan. Only provide one of &#x60;previous_plan_id&#x60; or &#x60;subscription_plan_id&#x60; in your request, not both.</value>

        [DataMember(Name="subscription_plan_id")]
        public string SubscriptionPlanId { get; set; }

        /// <summary>
        /// Identifier of the plan to be removed. Only provide one of &#x60;previous_plan_id&#x60; or &#x60;subscription_plan_id&#x60; in your request, not both.
        /// </summary>
        /// <value>Identifier of the plan to be removed. Only provide one of &#x60;previous_plan_id&#x60; or &#x60;subscription_plan_id&#x60; in your request, not both.</value>

        [DataMember(Name="previous_plan_id")]
        public string PreviousPlanId { get; set; }

        /// <summary>
        /// The default value for the `replace_at` field is as follows:       <ul>         <li>If the subscription plan change (from old to new) is an `upgrade`, the `replace_at` is `now` by default. </li>         <li>If the subscription change (from old to new) is a `downgrade`, the `replace_at` is `end_of_billing_period` by default. </li>       </ul>       Otherwise, the `replace_at` is `specific_date` by default.            **Notes**:      <br />       When setting this field to `end_of_billing_period`, you cannot set the billing start dates for the subscription as the system will automatically set the start dates to the end of billing period, and you cannot set the following billing trigger date settings to `Yes`:      <ul>         <li> <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Configure_billing_settings/Subscription_and_order_settings/A_Define_Default_Subscription_and_Order_Settings#Require_Customer_Acceptance_of_Orders.3F\" target=\"_blank\">Require Customer Acceptance of Orders</a> </li>         <li> <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Require_Service_Activation_of_Orders.3F\" target=\"_blank\">Require Service Activation of Orders</a> </li>       </ul>       When setting this field to `specific_date`, you must also specify a date for the `contract_effective` date in the `start_on` field.     
        /// </summary>
        /// <value>The default value for the `replace_at` field is as follows:       <ul>         <li>If the subscription plan change (from old to new) is an `upgrade`, the `replace_at` is `now` by default. </li>         <li>If the subscription change (from old to new) is a `downgrade`, the `replace_at` is `end_of_billing_period` by default. </li>       </ul>       Otherwise, the `replace_at` is `specific_date` by default.            **Notes**:      <br />       When setting this field to `end_of_billing_period`, you cannot set the billing start dates for the subscription as the system will automatically set the start dates to the end of billing period, and you cannot set the following billing trigger date settings to `Yes`:      <ul>         <li> <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Configure_billing_settings/Subscription_and_order_settings/A_Define_Default_Subscription_and_Order_Settings#Require_Customer_Acceptance_of_Orders.3F\" target=\"_blank\">Require Customer Acceptance of Orders</a> </li>         <li> <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Require_Service_Activation_of_Orders.3F\" target=\"_blank\">Require Service Activation of Orders</a> </li>       </ul>       When setting this field to `specific_date`, you must also specify a date for the `contract_effective` date in the `start_on` field.     </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReplaceAtEnum
        {
            /// <summary>
            /// Enum NowEnum for now
            /// </summary>
            [EnumMember(Value = "now")]
            NowEnum = 0,
            /// <summary>
            /// Enum EndOfBillingPeriodEnum for end_of_billing_period
            /// </summary>
            [EnumMember(Value = "end_of_billing_period")]
            EndOfBillingPeriodEnum = 1,
            /// <summary>
            /// Enum SpecificDateEnum for specific_date
            /// </summary>
            [EnumMember(Value = "specific_date")]
            SpecificDateEnum = 2        }

        /// <summary>
        /// The default value for the &#x60;replace_at&#x60; field is as follows:       &lt;ul&gt;         &lt;li&gt;If the subscription plan change (from old to new) is an &#x60;upgrade&#x60;, the &#x60;replace_at&#x60; is &#x60;now&#x60; by default. &lt;/li&gt;         &lt;li&gt;If the subscription change (from old to new) is a &#x60;downgrade&#x60;, the &#x60;replace_at&#x60; is &#x60;end_of_billing_period&#x60; by default. &lt;/li&gt;       &lt;/ul&gt;       Otherwise, the &#x60;replace_at&#x60; is &#x60;specific_date&#x60; by default.            **Notes**:      &lt;br /&gt;       When setting this field to &#x60;end_of_billing_period&#x60;, you cannot set the billing start dates for the subscription as the system will automatically set the start dates to the end of billing period, and you cannot set the following billing trigger date settings to &#x60;Yes&#x60;:      &lt;ul&gt;         &lt;li&gt; &lt;a href&#x3D;\&quot;https://knowledgecenter.zuora.com/Zuora_Billing/Configure_billing_settings/Subscription_and_order_settings/A_Define_Default_Subscription_and_Order_Settings#Require_Customer_Acceptance_of_Orders.3F\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Require Customer Acceptance of Orders&lt;/a&gt; &lt;/li&gt;         &lt;li&gt; &lt;a href&#x3D;\&quot;https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Require_Service_Activation_of_Orders.3F\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Require Service Activation of Orders&lt;/a&gt; &lt;/li&gt;       &lt;/ul&gt;       When setting this field to &#x60;specific_date&#x60;, you must also specify a date for the &#x60;contract_effective&#x60; date in the &#x60;start_on&#x60; field.     
        /// </summary>
        /// <value>The default value for the &#x60;replace_at&#x60; field is as follows:       &lt;ul&gt;         &lt;li&gt;If the subscription plan change (from old to new) is an &#x60;upgrade&#x60;, the &#x60;replace_at&#x60; is &#x60;now&#x60; by default. &lt;/li&gt;         &lt;li&gt;If the subscription change (from old to new) is a &#x60;downgrade&#x60;, the &#x60;replace_at&#x60; is &#x60;end_of_billing_period&#x60; by default. &lt;/li&gt;       &lt;/ul&gt;       Otherwise, the &#x60;replace_at&#x60; is &#x60;specific_date&#x60; by default.            **Notes**:      &lt;br /&gt;       When setting this field to &#x60;end_of_billing_period&#x60;, you cannot set the billing start dates for the subscription as the system will automatically set the start dates to the end of billing period, and you cannot set the following billing trigger date settings to &#x60;Yes&#x60;:      &lt;ul&gt;         &lt;li&gt; &lt;a href&#x3D;\&quot;https://knowledgecenter.zuora.com/Zuora_Billing/Configure_billing_settings/Subscription_and_order_settings/A_Define_Default_Subscription_and_Order_Settings#Require_Customer_Acceptance_of_Orders.3F\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Require Customer Acceptance of Orders&lt;/a&gt; &lt;/li&gt;         &lt;li&gt; &lt;a href&#x3D;\&quot;https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Require_Service_Activation_of_Orders.3F\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Require Service Activation of Orders&lt;/a&gt; &lt;/li&gt;       &lt;/ul&gt;       When setting this field to &#x60;specific_date&#x60;, you must also specify a date for the &#x60;contract_effective&#x60; date in the &#x60;start_on&#x60; field.     </value>

        [DataMember(Name="replace_at")]
        public ReplaceAtEnum? ReplaceAt { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReplacementTypeEnum
        {
            /// <summary>
            /// Enum UpgradeEnum for upgrade
            /// </summary>
            [EnumMember(Value = "upgrade")]
            UpgradeEnum = 0,
            /// <summary>
            /// Enum DowngradeEnum for downgrade
            /// </summary>
            [EnumMember(Value = "downgrade")]
            DowngradeEnum = 1,
            /// <summary>
            /// Enum CrossgradeEnum for crossgrade
            /// </summary>
            [EnumMember(Value = "crossgrade")]
            CrossgradeEnum = 2,
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 3        }

        /// <summary>
        /// Gets or Sets ReplacementType
        /// </summary>

        [DataMember(Name="replacement_type")]
        public ReplacementTypeEnum? ReplacementType { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionPlan
        /// </summary>
        [Required]

        [DataMember(Name="subscription_plan")]
        public SubscriptionPlanCreateRequest SubscriptionPlan { get; set; }

        /// <summary>
        /// Gets or Sets StartOn
        /// </summary>

        [DataMember(Name="start_on")]
        public StartOn StartOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionReplacePlanPatchRequest {\n");
            sb.Append("  SubscriptionPlanId: ").Append(SubscriptionPlanId).Append("\n");
            sb.Append("  PreviousPlanId: ").Append(PreviousPlanId).Append("\n");
            sb.Append("  ReplaceAt: ").Append(ReplaceAt).Append("\n");
            sb.Append("  ReplacementType: ").Append(ReplacementType).Append("\n");
            sb.Append("  SubscriptionPlan: ").Append(SubscriptionPlan).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionReplacePlanPatchRequest)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionReplacePlanPatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionReplacePlanPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionReplacePlanPatchRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubscriptionPlanId == other.SubscriptionPlanId ||
                    SubscriptionPlanId != null &&
                    SubscriptionPlanId.Equals(other.SubscriptionPlanId)
                ) && 
                (
                    PreviousPlanId == other.PreviousPlanId ||
                    PreviousPlanId != null &&
                    PreviousPlanId.Equals(other.PreviousPlanId)
                ) && 
                (
                    ReplaceAt == other.ReplaceAt ||
                    ReplaceAt != null &&
                    ReplaceAt.Equals(other.ReplaceAt)
                ) && 
                (
                    ReplacementType == other.ReplacementType ||
                    ReplacementType != null &&
                    ReplacementType.Equals(other.ReplacementType)
                ) && 
                (
                    SubscriptionPlan == other.SubscriptionPlan ||
                    SubscriptionPlan != null &&
                    SubscriptionPlan.Equals(other.SubscriptionPlan)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubscriptionPlanId != null)
                    hashCode = hashCode * 59 + SubscriptionPlanId.GetHashCode();
                    if (PreviousPlanId != null)
                    hashCode = hashCode * 59 + PreviousPlanId.GetHashCode();
                    if (ReplaceAt != null)
                    hashCode = hashCode * 59 + ReplaceAt.GetHashCode();
                    if (ReplacementType != null)
                    hashCode = hashCode * 59 + ReplacementType.GetHashCode();
                    if (SubscriptionPlan != null)
                    hashCode = hashCode * 59 + SubscriptionPlan.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionReplacePlanPatchRequest left, SubscriptionReplacePlanPatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionReplacePlanPatchRequest left, SubscriptionReplacePlanPatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
