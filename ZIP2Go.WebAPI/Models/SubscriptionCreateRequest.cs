/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionCreateRequest : IEquatable<SubscriptionCreateRequest>
    { 
        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;.</value>

        [DataMember(Name="invoice_owner_account_id")]
        public string InvoiceOwnerAccountId { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;.</value>

        [DataMember(Name="invoice_owner_account_number")]
        public string InvoiceOwnerAccountNumber { get; set; }

        /// <summary>
        /// The information of the new account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_id&#x60;.
        /// </summary>
        /// <value>The information of the new account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_id&#x60;.</value>

        [DataMember(Name="invoice_owner_account_data")]
        public AllOfsubscriptionCreateRequestInvoiceOwnerAccountData InvoiceOwnerAccountData { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The information of the new account that owns the subscription. The subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_id&#x60;.
        /// </summary>
        /// <value>The information of the new account that owns the subscription. The subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_id&#x60;.</value>

        [DataMember(Name="account_data")]
        public AllOfsubscriptionCreateRequestAccountData AccountData { get; set; }

        /// <summary>
        /// If true, the subscription automatically renews at the end of the current term.
        /// </summary>
        /// <value>If true, the subscription automatically renews at the end of the current term.</value>

        [DataMember(Name="auto_renew")]
        public bool? AutoRenew { get; set; }

        /// <summary>
        /// Human-readable identifier of the subscription; maybe user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription; maybe user-supplied.</value>

        [DataMember(Name="subscription_number")]
        public string SubscriptionNumber { get; set; }

        /// <summary>
        /// Initial term information for the subscription.
        /// </summary>
        /// <value>Initial term information for the subscription.</value>

        [DataMember(Name="initial_term")]
        public AllOfsubscriptionCreateRequestInitialTerm InitialTerm { get; set; }

        /// <summary>
        /// Renewal term information for the subscription
        /// </summary>
        /// <value>Renewal term information for the subscription</value>

        [DataMember(Name="renewal_term")]
        public AllOfsubscriptionCreateRequestRenewalTerm RenewalTerm { get; set; }

        /// <summary>
        /// Gets or Sets StartOn
        /// </summary>

        [DataMember(Name="start_on")]
        public StartOn StartOn { get; set; }

        /// <summary>
        /// Description of the subscription. Often useful for displaying to users.
        /// </summary>
        /// <value>Description of the subscription. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice.
        /// </summary>
        /// <value>Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice.</value>

        [DataMember(Name="invoice_separately")]
        public bool? InvoiceSeparately { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingOptions
        /// </summary>

        [DataMember(Name="processing_options")]
        public ProcessingOptions ProcessingOptions { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// The plans associated with the new subscription.
        /// </summary>
        /// <value>The plans associated with the new subscription.</value>

        [DataMember(Name="subscription_plans")]
        public List<SubscriptionPlanCreateRequest> SubscriptionPlans { get; set; }

        /// <summary>
        /// ID of the bill-to contact.
        /// </summary>
        /// <value>ID of the bill-to contact.</value>

        [DataMember(Name="bill_to_id")]
        public string BillToId { get; set; }

        /// <summary>
        /// The name of payment term associated with the invoice.
        /// </summary>
        /// <value>The name of payment term associated with the invoice.</value>

        [DataMember(Name="payment_terms")]
        public string PaymentTerms { get; set; }

        /// <summary>
        /// The billing address for the customer.
        /// </summary>
        /// <value>The billing address for the customer.</value>

        [DataMember(Name="bill_to")]
        public AllOfsubscriptionCreateRequestBillTo BillTo { get; private set; }

        /// <summary>
        /// The billing document settings for the customer.
        /// </summary>
        /// <value>The billing document settings for the customer.</value>

        [DataMember(Name="billing_document_settings")]
        public AllOfsubscriptionCreateRequestBillingDocumentSettings BillingDocumentSettings { get; set; }

        /// <summary>
        /// ID of the sold-to contact.
        /// </summary>
        /// <value>ID of the sold-to contact.</value>

        [DataMember(Name="sold_to_id")]
        public string SoldToId { get; set; }

        /// <summary>
        /// The selling address for the customer.
        /// </summary>
        /// <value>The selling address for the customer.</value>

        [DataMember(Name="sold_to")]
        public AllOfsubscriptionCreateRequestSoldTo SoldTo { get; private set; }

        /// <summary>
        /// 3-letter ISO 4217 currency code. This field is available only if you have the [Multiple Currencies](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies) feature enabled.
        /// </summary>
        /// <value>3-letter ISO 4217 currency code. This field is available only if you have the [Multiple Currencies](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies) feature enabled.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionCreateRequest {\n");
            sb.Append("  InvoiceOwnerAccountId: ").Append(InvoiceOwnerAccountId).Append("\n");
            sb.Append("  InvoiceOwnerAccountNumber: ").Append(InvoiceOwnerAccountNumber).Append("\n");
            sb.Append("  InvoiceOwnerAccountData: ").Append(InvoiceOwnerAccountData).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountData: ").Append(AccountData).Append("\n");
            sb.Append("  AutoRenew: ").Append(AutoRenew).Append("\n");
            sb.Append("  SubscriptionNumber: ").Append(SubscriptionNumber).Append("\n");
            sb.Append("  InitialTerm: ").Append(InitialTerm).Append("\n");
            sb.Append("  RenewalTerm: ").Append(RenewalTerm).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InvoiceSeparately: ").Append(InvoiceSeparately).Append("\n");
            sb.Append("  ProcessingOptions: ").Append(ProcessingOptions).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  SubscriptionPlans: ").Append(SubscriptionPlans).Append("\n");
            sb.Append("  BillToId: ").Append(BillToId).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  BillingDocumentSettings: ").Append(BillingDocumentSettings).Append("\n");
            sb.Append("  SoldToId: ").Append(SoldToId).Append("\n");
            sb.Append("  SoldTo: ").Append(SoldTo).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InvoiceOwnerAccountId == other.InvoiceOwnerAccountId ||
                    InvoiceOwnerAccountId != null &&
                    InvoiceOwnerAccountId.Equals(other.InvoiceOwnerAccountId)
                ) && 
                (
                    InvoiceOwnerAccountNumber == other.InvoiceOwnerAccountNumber ||
                    InvoiceOwnerAccountNumber != null &&
                    InvoiceOwnerAccountNumber.Equals(other.InvoiceOwnerAccountNumber)
                ) && 
                (
                    InvoiceOwnerAccountData == other.InvoiceOwnerAccountData ||
                    InvoiceOwnerAccountData != null &&
                    InvoiceOwnerAccountData.Equals(other.InvoiceOwnerAccountData)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    AccountData == other.AccountData ||
                    AccountData != null &&
                    AccountData.Equals(other.AccountData)
                ) && 
                (
                    AutoRenew == other.AutoRenew ||
                    AutoRenew != null &&
                    AutoRenew.Equals(other.AutoRenew)
                ) && 
                (
                    SubscriptionNumber == other.SubscriptionNumber ||
                    SubscriptionNumber != null &&
                    SubscriptionNumber.Equals(other.SubscriptionNumber)
                ) && 
                (
                    InitialTerm == other.InitialTerm ||
                    InitialTerm != null &&
                    InitialTerm.Equals(other.InitialTerm)
                ) && 
                (
                    RenewalTerm == other.RenewalTerm ||
                    RenewalTerm != null &&
                    RenewalTerm.Equals(other.RenewalTerm)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    InvoiceSeparately == other.InvoiceSeparately ||
                    InvoiceSeparately != null &&
                    InvoiceSeparately.Equals(other.InvoiceSeparately)
                ) && 
                (
                    ProcessingOptions == other.ProcessingOptions ||
                    ProcessingOptions != null &&
                    ProcessingOptions.Equals(other.ProcessingOptions)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    SubscriptionPlans == other.SubscriptionPlans ||
                    SubscriptionPlans != null &&
                    SubscriptionPlans.SequenceEqual(other.SubscriptionPlans)
                ) && 
                (
                    BillToId == other.BillToId ||
                    BillToId != null &&
                    BillToId.Equals(other.BillToId)
                ) && 
                (
                    PaymentTerms == other.PaymentTerms ||
                    PaymentTerms != null &&
                    PaymentTerms.Equals(other.PaymentTerms)
                ) && 
                (
                    BillTo == other.BillTo ||
                    BillTo != null &&
                    BillTo.Equals(other.BillTo)
                ) && 
                (
                    BillingDocumentSettings == other.BillingDocumentSettings ||
                    BillingDocumentSettings != null &&
                    BillingDocumentSettings.Equals(other.BillingDocumentSettings)
                ) && 
                (
                    SoldToId == other.SoldToId ||
                    SoldToId != null &&
                    SoldToId.Equals(other.SoldToId)
                ) && 
                (
                    SoldTo == other.SoldTo ||
                    SoldTo != null &&
                    SoldTo.Equals(other.SoldTo)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InvoiceOwnerAccountId != null)
                    hashCode = hashCode * 59 + InvoiceOwnerAccountId.GetHashCode();
                    if (InvoiceOwnerAccountNumber != null)
                    hashCode = hashCode * 59 + InvoiceOwnerAccountNumber.GetHashCode();
                    if (InvoiceOwnerAccountData != null)
                    hashCode = hashCode * 59 + InvoiceOwnerAccountData.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (AccountData != null)
                    hashCode = hashCode * 59 + AccountData.GetHashCode();
                    if (AutoRenew != null)
                    hashCode = hashCode * 59 + AutoRenew.GetHashCode();
                    if (SubscriptionNumber != null)
                    hashCode = hashCode * 59 + SubscriptionNumber.GetHashCode();
                    if (InitialTerm != null)
                    hashCode = hashCode * 59 + InitialTerm.GetHashCode();
                    if (RenewalTerm != null)
                    hashCode = hashCode * 59 + RenewalTerm.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (InvoiceSeparately != null)
                    hashCode = hashCode * 59 + InvoiceSeparately.GetHashCode();
                    if (ProcessingOptions != null)
                    hashCode = hashCode * 59 + ProcessingOptions.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (SubscriptionPlans != null)
                    hashCode = hashCode * 59 + SubscriptionPlans.GetHashCode();
                    if (BillToId != null)
                    hashCode = hashCode * 59 + BillToId.GetHashCode();
                    if (PaymentTerms != null)
                    hashCode = hashCode * 59 + PaymentTerms.GetHashCode();
                    if (BillTo != null)
                    hashCode = hashCode * 59 + BillTo.GetHashCode();
                    if (BillingDocumentSettings != null)
                    hashCode = hashCode * 59 + BillingDocumentSettings.GetHashCode();
                    if (SoldToId != null)
                    hashCode = hashCode * 59 + SoldToId.GetHashCode();
                    if (SoldTo != null)
                    hashCode = hashCode * 59 + SoldTo.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionCreateRequest left, SubscriptionCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionCreateRequest left, SubscriptionCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
