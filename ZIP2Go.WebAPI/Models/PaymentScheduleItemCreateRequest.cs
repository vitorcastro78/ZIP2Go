/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentScheduleItemCreateRequest : IEquatable<PaymentScheduleItemCreateRequest>
    { 
        /// <summary>
        /// ID of a payment schedule.
        /// </summary>
        /// <value>ID of a payment schedule.</value>
        [Required]

        [DataMember(Name="payment_schedule_id")]
        public string PaymentScheduleId { get; set; }

        /// <summary>
        /// Number of the payment schedule.
        /// </summary>
        /// <value>Number of the payment schedule.</value>

        [DataMember(Name="payment_schedule_number")]
        public string PaymentScheduleNumber { get; set; }

        /// <summary>
        /// Unique identifier of the customer account the payment schedule belongs to.
        /// </summary>
        /// <value>Unique identifier of the customer account the payment schedule belongs to.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// The amount to be collected by this payment schedule item.
        /// </summary>
        /// <value>The amount to be collected by this payment schedule item.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Currency of the payment schedule. The default value is the account&#x27;s default currency. This field will be ignored when items is specified.
        /// </summary>
        /// <value>Currency of the payment schedule. The default value is the account&#x27;s default currency. This field will be ignored when items is specified.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// ID of the payment gateway used to collect payments. The default value is the account&#x27;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#x27;s default payment gateway ID. This field will be ignored when &#x60;items&#x60; is specified.
        /// </summary>
        /// <value>ID of the payment gateway used to collect payments. The default value is the account&#x27;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#x27;s default payment gateway ID. This field will be ignored when &#x60;items&#x60; is specified.</value>

        [DataMember(Name="payment_gateway_id")]
        public string PaymentGatewayId { get; set; }

        /// <summary>
        /// ID of the payment method. The default value is the account&#x27;s default payment method ID. This field will be ignored when &#x60;items&#x60; is specified.
        /// </summary>
        /// <value>ID of the payment method. The default value is the account&#x27;s default payment method ID. This field will be ignored when &#x60;items&#x60; is specified.</value>

        [DataMember(Name="payment_method_id")]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The scheduled date of collection.
        /// </summary>
        /// <value>The scheduled date of collection.</value>

        [DataMember(Name="scheduled_date")]
        public DateTime? ScheduledDate { get; set; }

        /// <summary>
        /// At which hour in the day in the tenant&#x27;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenant’s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time. The default value is 0. If the payment run_hour and scheduled_date are backdated, the system will collect the payment when the next run_hour occurs.
        /// </summary>
        /// <value>At which hour in the day in the tenant&#x27;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenant’s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time. The default value is 0. If the payment run_hour and scheduled_date are backdated, the system will collect the payment when the next run_hour occurs.</value>

        [Range(0, 23)]
        [DataMember(Name="run_hour")]
        public int? RunHour { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the &#x60;gateway_options&#x60; type is supported. Payment schedule &#x60;payment_options&#x60; take precedence over payment schedule item &#x60;payment_options&#x60;.
        /// </summary>
        /// <value>Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the &#x60;gateway_options&#x60; type is supported. Payment schedule &#x60;payment_options&#x60; take precedence over payment schedule item &#x60;payment_options&#x60;.</value>

        [DataMember(Name="payment_options")]
        public List<PaymentScheduleItemPaymentOption> PaymentOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentScheduleItemCreateRequest {\n");
            sb.Append("  PaymentScheduleId: ").Append(PaymentScheduleId).Append("\n");
            sb.Append("  PaymentScheduleNumber: ").Append(PaymentScheduleNumber).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PaymentGatewayId: ").Append(PaymentGatewayId).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  RunHour: ").Append(RunHour).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  PaymentOptions: ").Append(PaymentOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentScheduleItemCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if PaymentScheduleItemCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentScheduleItemCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentScheduleItemCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PaymentScheduleId == other.PaymentScheduleId ||
                    PaymentScheduleId != null &&
                    PaymentScheduleId.Equals(other.PaymentScheduleId)
                ) && 
                (
                    PaymentScheduleNumber == other.PaymentScheduleNumber ||
                    PaymentScheduleNumber != null &&
                    PaymentScheduleNumber.Equals(other.PaymentScheduleNumber)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    PaymentGatewayId == other.PaymentGatewayId ||
                    PaymentGatewayId != null &&
                    PaymentGatewayId.Equals(other.PaymentGatewayId)
                ) && 
                (
                    PaymentMethodId == other.PaymentMethodId ||
                    PaymentMethodId != null &&
                    PaymentMethodId.Equals(other.PaymentMethodId)
                ) && 
                (
                    ScheduledDate == other.ScheduledDate ||
                    ScheduledDate != null &&
                    ScheduledDate.Equals(other.ScheduledDate)
                ) && 
                (
                    RunHour == other.RunHour ||
                    RunHour != null &&
                    RunHour.Equals(other.RunHour)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    PaymentOptions == other.PaymentOptions ||
                    PaymentOptions != null &&
                    PaymentOptions.SequenceEqual(other.PaymentOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PaymentScheduleId != null)
                    hashCode = hashCode * 59 + PaymentScheduleId.GetHashCode();
                    if (PaymentScheduleNumber != null)
                    hashCode = hashCode * 59 + PaymentScheduleNumber.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (PaymentGatewayId != null)
                    hashCode = hashCode * 59 + PaymentGatewayId.GetHashCode();
                    if (PaymentMethodId != null)
                    hashCode = hashCode * 59 + PaymentMethodId.GetHashCode();
                    if (ScheduledDate != null)
                    hashCode = hashCode * 59 + ScheduledDate.GetHashCode();
                    if (RunHour != null)
                    hashCode = hashCode * 59 + RunHour.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (PaymentOptions != null)
                    hashCode = hashCode * 59 + PaymentOptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentScheduleItemCreateRequest left, PaymentScheduleItemCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentScheduleItemCreateRequest left, PaymentScheduleItemCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
