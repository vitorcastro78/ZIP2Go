/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentsAppliedToResponse : IEquatable<PaymentsAppliedToResponse>
    { 
        /// <summary>
        /// Identifier of an invoice or a debit memo.
        /// </summary>
        /// <value>Identifier of an invoice or a debit memo.</value>

        [DataMember(Name="billing_document_id")]
        public string BillingDocumentId { get; set; }

        /// <summary>
        /// Identifier of the payment application.
        /// </summary>
        /// <value>Identifier of the payment application.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The amount of the payment that is applied to the specific billing document item or taxation item.
        /// </summary>
        /// <value>The amount of the payment that is applied to the specific billing document item or taxation item.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The related billing document.
        /// </summary>
        /// <value>The related billing document.</value>

        [DataMember(Name="billing_document")]
        public AllOfpaymentsAppliedToResponseBillingDocument BillingDocument { get; set; }

        /// <summary>
        /// The type of billing document. Can be one of the debit memo or invoice.
        /// </summary>
        /// <value>The type of billing document. Can be one of the debit memo or invoice.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BillingDocumentTypeEnum
        {
            /// <summary>
            /// Enum DebitMemoEnum for debit_memo
            /// </summary>
            [EnumMember(Value = "debit_memo")]
            DebitMemoEnum = 0,
            /// <summary>
            /// Enum InvoiceEnum for invoice
            /// </summary>
            [EnumMember(Value = "invoice")]
            InvoiceEnum = 1        }

        /// <summary>
        /// The type of billing document. Can be one of the debit memo or invoice.
        /// </summary>
        /// <value>The type of billing document. Can be one of the debit memo or invoice.</value>

        [DataMember(Name="billing_document_type")]
        public BillingDocumentTypeEnum? BillingDocumentType { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum DraftEnum for draft
            /// </summary>
            [EnumMember(Value = "draft")]
            DraftEnum = 0,
            /// <summary>
            /// Enum PostedEnum for posted
            /// </summary>
            [EnumMember(Value = "posted")]
            PostedEnum = 1,
            /// <summary>
            /// Enum ProcessingEnum for processing
            /// </summary>
            [EnumMember(Value = "processing")]
            ProcessingEnum = 2,
            /// <summary>
            /// Enum ProcessedEnum for processed
            /// </summary>
            [EnumMember(Value = "processed")]
            ProcessedEnum = 3,
            /// <summary>
            /// Enum ErrorEnum for error
            /// </summary>
            [EnumMember(Value = "error")]
            ErrorEnum = 4,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 5        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// The related billing document item.
        /// </summary>
        /// <value>The related billing document item.</value>

        [DataMember(Name="items")]
        public List<PaymentAppliedToBillingItemResponse> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsAppliedToResponse {\n");
            sb.Append("  BillingDocumentId: ").Append(BillingDocumentId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BillingDocument: ").Append(BillingDocument).Append("\n");
            sb.Append("  BillingDocumentType: ").Append(BillingDocumentType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentsAppliedToResponse)obj);
        }

        /// <summary>
        /// Returns true if PaymentsAppliedToResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentsAppliedToResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsAppliedToResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BillingDocumentId == other.BillingDocumentId ||
                    BillingDocumentId != null &&
                    BillingDocumentId.Equals(other.BillingDocumentId)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    BillingDocument == other.BillingDocument ||
                    BillingDocument != null &&
                    BillingDocument.Equals(other.BillingDocument)
                ) && 
                (
                    BillingDocumentType == other.BillingDocumentType ||
                    BillingDocumentType != null &&
                    BillingDocumentType.Equals(other.BillingDocumentType)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BillingDocumentId != null)
                    hashCode = hashCode * 59 + BillingDocumentId.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (BillingDocument != null)
                    hashCode = hashCode * 59 + BillingDocument.GetHashCode();
                    if (BillingDocumentType != null)
                    hashCode = hashCode * 59 + BillingDocumentType.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentsAppliedToResponse left, PaymentsAppliedToResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentsAppliedToResponse left, PaymentsAppliedToResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
