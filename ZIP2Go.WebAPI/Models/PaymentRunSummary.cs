/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentRunSummary : IEquatable<PaymentRunSummary>
    { 
        /// <summary>
        /// The number of payments not processed.
        /// </summary>
        /// <value>The number of payments not processed.</value>

        [DataMember(Name="number_of_errors")]
        public int? NumberOfErrors { get; set; }

        /// <summary>
        /// The number of invoices processed.
        /// </summary>
        /// <value>The number of invoices processed.</value>

        [DataMember(Name="number_of_invoices")]
        public int? NumberOfInvoices { get; set; }

        /// <summary>
        /// The number of payments processed.
        /// </summary>
        /// <value>The number of payments processed.</value>

        [DataMember(Name="number_of_payments")]
        public int? NumberOfPayments { get; set; }

        /// <summary>
        /// The number of credit memos processed.
        /// </summary>
        /// <value>The number of credit memos processed.</value>

        [DataMember(Name="number_of_credit_memos")]
        public int? NumberOfCreditMemos { get; set; }

        /// <summary>
        /// The number of debit memos processed.
        /// </summary>
        /// <value>The number of debit memos processed.</value>

        [DataMember(Name="number_of_debit_memos")]
        public int? NumberOfDebitMemos { get; set; }

        /// <summary>
        /// The number of unprocessed debit memos.
        /// </summary>
        /// <value>The number of unprocessed debit memos.</value>

        [DataMember(Name="number_of_unprocessed_debit_memos")]
        public int? NumberOfUnprocessedDebitMemos { get; set; }

        /// <summary>
        /// The number of unapplied payments.
        /// </summary>
        /// <value>The number of unapplied payments.</value>

        [DataMember(Name="number_of_unapplied_payments")]
        public int? NumberOfUnappliedPayments { get; set; }

        /// <summary>
        /// The number of receivables with positive remamining balances.
        /// </summary>
        /// <value>The number of receivables with positive remamining balances.</value>

        [DataMember(Name="number_of_unprocessed_receivables")]
        public int? NumberOfUnprocessedReceivables { get; set; }

        /// <summary>
        /// The total number of all receivables with payments not processed.
        /// </summary>
        /// <value>The total number of all receivables with payments not processed.</value>

        [DataMember(Name="errors_total")]
        public int? ErrorsTotal { get; set; }

        /// <summary>
        /// The total number of all invoices.
        /// </summary>
        /// <value>The total number of all invoices.</value>

        [DataMember(Name="invoices_total")]
        public int? InvoicesTotal { get; set; }

        /// <summary>
        /// The total number of all processed and unapplied payments.
        /// </summary>
        /// <value>The total number of all processed and unapplied payments.</value>

        [DataMember(Name="payments_total")]
        public int? PaymentsTotal { get; set; }

        /// <summary>
        /// The total number of positive remaining balances of all receivables.
        /// </summary>
        /// <value>The total number of positive remaining balances of all receivables.</value>

        [DataMember(Name="unprocessed_receivables_total")]
        public int? UnprocessedReceivablesTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRunSummary {\n");
            sb.Append("  NumberOfErrors: ").Append(NumberOfErrors).Append("\n");
            sb.Append("  NumberOfInvoices: ").Append(NumberOfInvoices).Append("\n");
            sb.Append("  NumberOfPayments: ").Append(NumberOfPayments).Append("\n");
            sb.Append("  NumberOfCreditMemos: ").Append(NumberOfCreditMemos).Append("\n");
            sb.Append("  NumberOfDebitMemos: ").Append(NumberOfDebitMemos).Append("\n");
            sb.Append("  NumberOfUnprocessedDebitMemos: ").Append(NumberOfUnprocessedDebitMemos).Append("\n");
            sb.Append("  NumberOfUnappliedPayments: ").Append(NumberOfUnappliedPayments).Append("\n");
            sb.Append("  NumberOfUnprocessedReceivables: ").Append(NumberOfUnprocessedReceivables).Append("\n");
            sb.Append("  ErrorsTotal: ").Append(ErrorsTotal).Append("\n");
            sb.Append("  InvoicesTotal: ").Append(InvoicesTotal).Append("\n");
            sb.Append("  PaymentsTotal: ").Append(PaymentsTotal).Append("\n");
            sb.Append("  UnprocessedReceivablesTotal: ").Append(UnprocessedReceivablesTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentRunSummary)obj);
        }

        /// <summary>
        /// Returns true if PaymentRunSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentRunSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRunSummary other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NumberOfErrors == other.NumberOfErrors ||
                    NumberOfErrors != null &&
                    NumberOfErrors.Equals(other.NumberOfErrors)
                ) && 
                (
                    NumberOfInvoices == other.NumberOfInvoices ||
                    NumberOfInvoices != null &&
                    NumberOfInvoices.Equals(other.NumberOfInvoices)
                ) && 
                (
                    NumberOfPayments == other.NumberOfPayments ||
                    NumberOfPayments != null &&
                    NumberOfPayments.Equals(other.NumberOfPayments)
                ) && 
                (
                    NumberOfCreditMemos == other.NumberOfCreditMemos ||
                    NumberOfCreditMemos != null &&
                    NumberOfCreditMemos.Equals(other.NumberOfCreditMemos)
                ) && 
                (
                    NumberOfDebitMemos == other.NumberOfDebitMemos ||
                    NumberOfDebitMemos != null &&
                    NumberOfDebitMemos.Equals(other.NumberOfDebitMemos)
                ) && 
                (
                    NumberOfUnprocessedDebitMemos == other.NumberOfUnprocessedDebitMemos ||
                    NumberOfUnprocessedDebitMemos != null &&
                    NumberOfUnprocessedDebitMemos.Equals(other.NumberOfUnprocessedDebitMemos)
                ) && 
                (
                    NumberOfUnappliedPayments == other.NumberOfUnappliedPayments ||
                    NumberOfUnappliedPayments != null &&
                    NumberOfUnappliedPayments.Equals(other.NumberOfUnappliedPayments)
                ) && 
                (
                    NumberOfUnprocessedReceivables == other.NumberOfUnprocessedReceivables ||
                    NumberOfUnprocessedReceivables != null &&
                    NumberOfUnprocessedReceivables.Equals(other.NumberOfUnprocessedReceivables)
                ) && 
                (
                    ErrorsTotal == other.ErrorsTotal ||
                    ErrorsTotal != null &&
                    ErrorsTotal.Equals(other.ErrorsTotal)
                ) && 
                (
                    InvoicesTotal == other.InvoicesTotal ||
                    InvoicesTotal != null &&
                    InvoicesTotal.Equals(other.InvoicesTotal)
                ) && 
                (
                    PaymentsTotal == other.PaymentsTotal ||
                    PaymentsTotal != null &&
                    PaymentsTotal.Equals(other.PaymentsTotal)
                ) && 
                (
                    UnprocessedReceivablesTotal == other.UnprocessedReceivablesTotal ||
                    UnprocessedReceivablesTotal != null &&
                    UnprocessedReceivablesTotal.Equals(other.UnprocessedReceivablesTotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NumberOfErrors != null)
                    hashCode = hashCode * 59 + NumberOfErrors.GetHashCode();
                    if (NumberOfInvoices != null)
                    hashCode = hashCode * 59 + NumberOfInvoices.GetHashCode();
                    if (NumberOfPayments != null)
                    hashCode = hashCode * 59 + NumberOfPayments.GetHashCode();
                    if (NumberOfCreditMemos != null)
                    hashCode = hashCode * 59 + NumberOfCreditMemos.GetHashCode();
                    if (NumberOfDebitMemos != null)
                    hashCode = hashCode * 59 + NumberOfDebitMemos.GetHashCode();
                    if (NumberOfUnprocessedDebitMemos != null)
                    hashCode = hashCode * 59 + NumberOfUnprocessedDebitMemos.GetHashCode();
                    if (NumberOfUnappliedPayments != null)
                    hashCode = hashCode * 59 + NumberOfUnappliedPayments.GetHashCode();
                    if (NumberOfUnprocessedReceivables != null)
                    hashCode = hashCode * 59 + NumberOfUnprocessedReceivables.GetHashCode();
                    if (ErrorsTotal != null)
                    hashCode = hashCode * 59 + ErrorsTotal.GetHashCode();
                    if (InvoicesTotal != null)
                    hashCode = hashCode * 59 + InvoicesTotal.GetHashCode();
                    if (PaymentsTotal != null)
                    hashCode = hashCode * 59 + PaymentsTotal.GetHashCode();
                    if (UnprocessedReceivablesTotal != null)
                    hashCode = hashCode * 59 + UnprocessedReceivablesTotal.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentRunSummary left, PaymentRunSummary right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentRunSummary left, PaymentRunSummary right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
