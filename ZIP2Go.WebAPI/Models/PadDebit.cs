/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// If the &#x60;type&#x60; of the payment method is &#x60;pad_debit&#x60;, this hash contains details about the PAD bank account.
    /// </summary>
    [DataContract]
    public partial class PadDebit : IEquatable<PadDebit>
    { 
        /// <summary>
        /// The bank account number of the account holder.
        /// </summary>
        /// <value>The bank account number of the account holder.</value>
        [Required]

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Identifier of the bank branch associated with this bank account.
        /// </summary>
        /// <value>Identifier of the bank branch associated with this bank account.</value>
        [Required]

        [DataMember(Name="branch_code")]
        public string BranchCode { get; set; }

        /// <summary>
        /// Identifier of the bank associated with this bank account.
        /// </summary>
        /// <value>Identifier of the bank associated with this bank account.</value>
        [Required]

        [DataMember(Name="bank_code")]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets Mandate
        /// </summary>

        [DataMember(Name="mandate")]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PadDebit {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  Mandate: ").Append(Mandate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PadDebit)obj);
        }

        /// <summary>
        /// Returns true if PadDebit instances are equal
        /// </summary>
        /// <param name="other">Instance of PadDebit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PadDebit other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    BranchCode == other.BranchCode ||
                    BranchCode != null &&
                    BranchCode.Equals(other.BranchCode)
                ) && 
                (
                    BankCode == other.BankCode ||
                    BankCode != null &&
                    BankCode.Equals(other.BankCode)
                ) && 
                (
                    Mandate == other.Mandate ||
                    Mandate != null &&
                    Mandate.Equals(other.Mandate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (BranchCode != null)
                    hashCode = hashCode * 59 + BranchCode.GetHashCode();
                    if (BankCode != null)
                    hashCode = hashCode * 59 + BankCode.GetHashCode();
                    if (Mandate != null)
                    hashCode = hashCode * 59 + Mandate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PadDebit left, PadDebit right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PadDebit left, PadDebit right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
