/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ZIP2Go.WebAPI.Enums;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderPreviewCreateRequest : IEquatable<OrderPreviewCreateRequest>
    { 
      
        /// <summary>
        /// Category of the order to indicate a product sale or return. Default value is &#x60;sale&#x60;.
        /// </summary>
        /// <value>Category of the order to indicate a product sale or return. Default value is &#x60;sale&#x60;.</value>

        [DataMember(Name="category")]
        public OrderCategoryEnum? Category { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Human-readable identifier of the account. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the account. It can be user-supplied.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Identifier of the account.
        /// </summary>
        /// <value>Identifier of the account.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if the contract effective date field is skipped or its value is left as null.
        /// </summary>
        /// <value>The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if the contract effective date field is skipped or its value is left as null.</value>

        [DataMember(Name="order_date")]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// The order number of the new order. If not provided, system will auto-generate a number for this order.     Note: Ensure that the order number does not contain a slash.
        /// </summary>
        /// <value>The order number of the new order. If not provided, system will auto-generate a number for this order.     Note: Ensure that the order number does not contain a slash.</value>

        [DataMember(Name="order_number")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Order line items are non-subscription-based items created by an order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.    By specifying this field, you can launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.
        /// </summary>
        /// <value>Order line items are non-subscription-based items created by an order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.    By specifying this field, you can launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.</value>

        [DataMember(Name="line_items")]
        public List<LineItemCreateRequest> LineItems { get; set; }

        /// <summary>
        /// Based on the intended order action, each item should include specific fields.     For example, to preview a new subscription for a new account, you must specify the &#x60;account_data&#x60; and &#x60;subscription_plans&#x60; fields at a minimum.
        /// </summary>
        /// <value>Based on the intended order action, each item should include specific fields.     For example, to preview a new subscription for a new account, you must specify the &#x60;account_data&#x60; and &#x60;subscription_plans&#x60; fields at a minimum.</value>

        [DataMember(Name="subscriptions")]
        public List<PostSubscriptionOrderRequest> Subscriptions { get; set; }

        /// <summary>
        /// Gets or Sets AccountData
        /// </summary>

        [DataMember(Name="account_data")]
        public SubscriptionPreviewAccountRequest AccountData { get; set; }

        /// <summary>
        /// Specifies how many billing periods you want to preview.
        /// </summary>
        /// <value>Specifies how many billing periods you want to preview.</value>

        [DataMember(Name="number_of_periods")]
        public int? NumberOfPeriods { get; set; }

        /// <summary>
        /// Indicates whether to preview the subscription till the end of the current term.
        /// </summary>
        /// <value>Indicates whether to preview the subscription till the end of the current term.</value>

        [DataMember(Name="term_end")]
        public bool? TermEnd { get; set; }


        /// <summary>
        /// Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both.
        /// </summary>
        /// <value>Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both.</value>
        [Required]

        [DataMember(Name="metrics")]
        public List<MetricsEnum> Metrics { get; set; }

        /// <summary>
        /// End date of the period for which you want to preview the subscription
        /// </summary>
        /// <value>End date of the period for which you want to preview the subscription</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderPreviewCreateRequest {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  AccountData: ").Append(AccountData).Append("\n");
            sb.Append("  NumberOfPeriods: ").Append(NumberOfPeriods).Append("\n");
            sb.Append("  TermEnd: ").Append(TermEnd).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderPreviewCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if OrderPreviewCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderPreviewCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPreviewCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    OrderDate == other.OrderDate ||
                    OrderDate != null &&
                    OrderDate.Equals(other.OrderDate)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    LineItems == other.LineItems ||
                    LineItems != null &&
                    LineItems.SequenceEqual(other.LineItems)
                ) && 
                (
                    Subscriptions == other.Subscriptions ||
                    Subscriptions != null &&
                    Subscriptions.SequenceEqual(other.Subscriptions)
                ) && 
                (
                    AccountData == other.AccountData ||
                    AccountData != null &&
                    AccountData.Equals(other.AccountData)
                ) && 
                (
                    NumberOfPeriods == other.NumberOfPeriods ||
                    NumberOfPeriods != null &&
                    NumberOfPeriods.Equals(other.NumberOfPeriods)
                ) && 
                (
                    TermEnd == other.TermEnd ||
                    TermEnd != null &&
                    TermEnd.Equals(other.TermEnd)
                ) && 
                (
                    Metrics == other.Metrics ||
                    Metrics != null &&
                    Metrics.SequenceEqual(other.Metrics)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (OrderDate != null)
                    hashCode = hashCode * 59 + OrderDate.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (LineItems != null)
                    hashCode = hashCode * 59 + LineItems.GetHashCode();
                    if (Subscriptions != null)
                    hashCode = hashCode * 59 + Subscriptions.GetHashCode();
                    if (AccountData != null)
                    hashCode = hashCode * 59 + AccountData.GetHashCode();
                    if (NumberOfPeriods != null)
                    hashCode = hashCode * 59 + NumberOfPeriods.GetHashCode();
                    if (TermEnd != null)
                    hashCode = hashCode * 59 + TermEnd.GetHashCode();
                    if (Metrics != null)
                    hashCode = hashCode * 59 + Metrics.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderPreviewCreateRequest left, OrderPreviewCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderPreviewCreateRequest left, OrderPreviewCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
