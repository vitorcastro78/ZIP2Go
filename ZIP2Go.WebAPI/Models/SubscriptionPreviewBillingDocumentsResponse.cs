/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewBillingDocumentsResponse : IEquatable<SubscriptionPreviewBillingDocumentsResponse>
    { 
        /// <summary>
        /// The total amount exclusive of tax.
        /// </summary>
        /// <value>The total amount exclusive of tax.</value>

        [DataMember(Name="subtotal")]
        public decimal? Subtotal { get; private set; }

        /// <summary>
        /// The total tax amount.
        /// </summary>
        /// <value>The total tax amount.</value>

        [DataMember(Name="tax")]
        public decimal? Tax { get; private set; }

        /// <summary>
        /// The total amount.
        /// </summary>
        /// <value>The total amount.</value>

        [DataMember(Name="total")]
        public decimal? Total { get; private set; }

        /// <summary>
        /// The type of billing document. Can be one of the credit memo, debit memo, or invoice.
        /// </summary>
        /// <value>The type of billing document. Can be one of the credit memo, debit memo, or invoice.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CreditMemoEnum for credit_memo
            /// </summary>
            [EnumMember(Value = "credit_memo")]
            CreditMemoEnum = 0,
            /// <summary>
            /// Enum DebitMemoEnum for debit_memo
            /// </summary>
            [EnumMember(Value = "debit_memo")]
            DebitMemoEnum = 1,
            /// <summary>
            /// Enum InvoiceEnum for invoice
            /// </summary>
            [EnumMember(Value = "invoice")]
            InvoiceEnum = 2        }

        /// <summary>
        /// The type of billing document. Can be one of the credit memo, debit memo, or invoice.
        /// </summary>
        /// <value>The type of billing document. Can be one of the credit memo, debit memo, or invoice.</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets TargetDate
        /// </summary>

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// Gets or Sets BillingDocumentItems
        /// </summary>

        [DataMember(Name="billing_document_items")]
        public List<AllOfsubscriptionPreviewBillingDocumentsResponseBillingDocumentItemsItems> BillingDocumentItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewBillingDocumentsResponse {\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  BillingDocumentItems: ").Append(BillingDocumentItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionPreviewBillingDocumentsResponse)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewBillingDocumentsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPreviewBillingDocumentsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewBillingDocumentsResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Subtotal == other.Subtotal ||
                    Subtotal != null &&
                    Subtotal.Equals(other.Subtotal)
                ) && 
                (
                    Tax == other.Tax ||
                    Tax != null &&
                    Tax.Equals(other.Tax)
                ) && 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                ) && 
                (
                    BillingDocumentItems == other.BillingDocumentItems ||
                    BillingDocumentItems != null &&
                    BillingDocumentItems.SequenceEqual(other.BillingDocumentItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Subtotal != null)
                    hashCode = hashCode * 59 + Subtotal.GetHashCode();
                    if (Tax != null)
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                    if (BillingDocumentItems != null)
                    hashCode = hashCode * 59 + BillingDocumentItems.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionPreviewBillingDocumentsResponse left, SubscriptionPreviewBillingDocumentsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionPreviewBillingDocumentsResponse left, SubscriptionPreviewBillingDocumentsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
