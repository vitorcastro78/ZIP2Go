/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// Term information of the subscription.
    /// </summary>
    [DataContract]
    public partial class Term : IEquatable<Term>
    { 
        /// <summary>
        /// The number of intervals in a term. For example, interval&#x3D;year and interval_count&#x3D;1 represents a 1 year term.
        /// </summary>
        /// <value>The number of intervals in a term. For example, interval&#x3D;year and interval_count&#x3D;1 represents a 1 year term.</value>

        [DataMember(Name="interval_count")]
        public int? IntervalCount { get; set; }

        /// <summary>
        /// Unit in which term duration is defined. One of day, week, month or year.
        /// </summary>
        /// <value>Unit in which term duration is defined. One of day, week, month or year.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IntervalEnum
        {
            /// <summary>
            /// Enum DayEnum for day
            /// </summary>
            [EnumMember(Value = "day")]
            DayEnum = 0,
            /// <summary>
            /// Enum WeekEnum for week
            /// </summary>
            [EnumMember(Value = "week")]
            WeekEnum = 1,
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 2,
            /// <summary>
            /// Enum YearEnum for year
            /// </summary>
            [EnumMember(Value = "year")]
            YearEnum = 3        }

        /// <summary>
        /// Unit in which term duration is defined. One of day, week, month or year.
        /// </summary>
        /// <value>Unit in which term duration is defined. One of day, week, month or year.</value>

        [DataMember(Name="interval")]
        public IntervalEnum? Interval { get; set; }

        /// <summary>
        /// Date when the subscription term starts.
        /// </summary>
        /// <value>Date when the subscription term starts.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Type of the subscription. Can be either `termed` or `evergreen`.
        /// </summary>
        /// <value>Type of the subscription. Can be either `termed` or `evergreen`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum EvergreenEnum for evergreen
            /// </summary>
            [EnumMember(Value = "evergreen")]
            EvergreenEnum = 0,
            /// <summary>
            /// Enum TermedEnum for termed
            /// </summary>
            [EnumMember(Value = "termed")]
            TermedEnum = 1        }

        /// <summary>
        /// Type of the subscription. Can be either &#x60;termed&#x60; or &#x60;evergreen&#x60;.
        /// </summary>
        /// <value>Type of the subscription. Can be either &#x60;termed&#x60; or &#x60;evergreen&#x60;.</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Date when the subscription term ends.
        /// </summary>
        /// <value>Date when the subscription term ends.</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Term {\n");
            sb.Append("  IntervalCount: ").Append(IntervalCount).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Term)obj);
        }

        /// <summary>
        /// Returns true if Term instances are equal
        /// </summary>
        /// <param name="other">Instance of Term to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Term other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IntervalCount == other.IntervalCount ||
                    IntervalCount != null &&
                    IntervalCount.Equals(other.IntervalCount)
                ) && 
                (
                    Interval == other.Interval ||
                    Interval != null &&
                    Interval.Equals(other.Interval)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IntervalCount != null)
                    hashCode = hashCode * 59 + IntervalCount.GetHashCode();
                    if (Interval != null)
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Term left, Term right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Term left, Term right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
