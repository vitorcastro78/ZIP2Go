/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WriteOff : IEquatable<WriteOff>
    { 
        /// <summary>
        /// The total billing document amount that is written off.
        /// </summary>
        /// <value>The total billing document amount that is written off.</value>

        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Reasons for failure.
        /// </summary>
        /// <value>Reasons for failure.</value>

        [DataMember(Name="failed_reason")]
        public string FailedReason { get; set; }

        /// <summary>
        /// The invoice number.
        /// </summary>
        /// <value>The invoice number.</value>

        [DataMember(Name="invoice_number")]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The related invoice.
        /// </summary>
        /// <value>The related invoice.</value>

        [DataMember(Name="invoice")]
        public AllOfwriteOffInvoice Invoice { get; set; }

        /// <summary>
        /// The states of the transactions.
        /// </summary>
        /// <value>The states of the transactions.</value>

        [DataMember(Name="state")]
        public AllOfwriteOffState State { get; set; }

        /// <summary>
        /// The credit memo number.
        /// </summary>
        /// <value>The credit memo number.</value>

        [DataMember(Name="credit_memo_number")]
        public string CreditMemoNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WriteOff {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  FailedReason: ").Append(FailedReason).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CreditMemoNumber: ").Append(CreditMemoNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WriteOff)obj);
        }

        /// <summary>
        /// Returns true if WriteOff instances are equal
        /// </summary>
        /// <param name="other">Instance of WriteOff to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WriteOff other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    FailedReason == other.FailedReason ||
                    FailedReason != null &&
                    FailedReason.Equals(other.FailedReason)
                ) && 
                (
                    InvoiceNumber == other.InvoiceNumber ||
                    InvoiceNumber != null &&
                    InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    Invoice == other.Invoice ||
                    Invoice != null &&
                    Invoice.Equals(other.Invoice)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    CreditMemoNumber == other.CreditMemoNumber ||
                    CreditMemoNumber != null &&
                    CreditMemoNumber.Equals(other.CreditMemoNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (FailedReason != null)
                    hashCode = hashCode * 59 + FailedReason.GetHashCode();
                    if (InvoiceNumber != null)
                    hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                    if (Invoice != null)
                    hashCode = hashCode * 59 + Invoice.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (CreditMemoNumber != null)
                    hashCode = hashCode * 59 + CreditMemoNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WriteOff left, WriteOff right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WriteOff left, WriteOff right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
