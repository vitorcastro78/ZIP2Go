/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionVersion : IEquatable<SubscriptionVersion>
    { 
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfsubscriptionVersionCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// Human-readable identifier of the subscription. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription. It can be user-supplied.</value>

        [DataMember(Name="subscription_number")]
        public string SubscriptionNumber { get; set; }

        /// <summary>
        /// Status of the subscription.
        /// </summary>
        /// <value>Status of the subscription.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum DraftEnum for draft
            /// </summary>
            [EnumMember(Value = "draft")]
            DraftEnum = 0,
            /// <summary>
            /// Enum PendingActivationEnum for pending_activation
            /// </summary>
            [EnumMember(Value = "pending_activation")]
            PendingActivationEnum = 1,
            /// <summary>
            /// Enum PendingAcceptanceEnum for pending_acceptance
            /// </summary>
            [EnumMember(Value = "pending_acceptance")]
            PendingAcceptanceEnum = 2,
            /// <summary>
            /// Enum ActiveEnum for active
            /// </summary>
            [EnumMember(Value = "active")]
            ActiveEnum = 3,
            /// <summary>
            /// Enum ExpiredEnum for expired
            /// </summary>
            [EnumMember(Value = "expired")]
            ExpiredEnum = 4,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 5,
            /// <summary>
            /// Enum PausedEnum for paused
            /// </summary>
            [EnumMember(Value = "paused")]
            PausedEnum = 6        }

        /// <summary>
        /// Status of the subscription.
        /// </summary>
        /// <value>Status of the subscription.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// The version of the subscription. This version can be used in the &#x60;filter[]&#x60; query parameter to filter subscriptions.
        /// </summary>
        /// <value>The version of the subscription. This version can be used in the &#x60;filter[]&#x60; query parameter to filter subscriptions.</value>

        [DataMember(Name="version")]
        public int? Version { get; set; }

        /// <summary>
        /// Identifier of the account associated with this subscription.
        /// </summary>
        /// <value>Identifier of the account associated with this subscription.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Information of the new account associated with the subscription.
        /// </summary>
        /// <value>Information of the new account associated with the subscription.</value>

        [DataMember(Name="account")]
        public AllOfsubscriptionVersionAccount Account { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription.</value>

        [DataMember(Name="invoice_owner_account_id")]
        public string InvoiceOwnerAccountId { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription.</value>

        [DataMember(Name="invoice_owner_account")]
        public AllOfsubscriptionVersionInvoiceOwnerAccount InvoiceOwnerAccount { get; set; }

        /// <summary>
        /// If this field is set to &#x60;true&#x60;, the subscription automatically renews at the end of the current term.
        /// </summary>
        /// <value>If this field is set to &#x60;true&#x60;, the subscription automatically renews at the end of the current term.</value>

        [DataMember(Name="auto_renew")]
        public bool? AutoRenew { get; set; }

        /// <summary>
        /// If true, this is the latest version of the subscription
        /// </summary>
        /// <value>If true, this is the latest version of the subscription</value>

        [DataMember(Name="latest_version")]
        public bool? LatestVersion { get; set; }

        /// <summary>
        /// Initial term information for the subscription.
        /// </summary>
        /// <value>Initial term information for the subscription.</value>

        [DataMember(Name="initial_term")]
        public AllOfsubscriptionVersionInitialTerm InitialTerm { get; set; }

        /// <summary>
        /// Current term information for the subscription
        /// </summary>
        /// <value>Current term information for the subscription</value>

        [DataMember(Name="current_term")]
        public AllOfsubscriptionVersionCurrentTerm CurrentTerm { get; set; }

        /// <summary>
        /// Renewal term information for the subscription.
        /// </summary>
        /// <value>Renewal term information for the subscription.</value>

        [DataMember(Name="renewal_term")]
        public AllOfsubscriptionVersionRenewalTerm RenewalTerm { get; set; }

        /// <summary>
        /// Date when the subscription starts.
        /// </summary>
        /// <value>Date when the subscription starts.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Date when the subscription ends.
        /// </summary>
        /// <value>Date when the subscription ends.</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Description of the subscription. Often useful for displaying to users.
        /// </summary>
        /// <value>Description of the subscription. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Date when the subscriber contract is effective.
        /// </summary>
        /// <value>Date when the subscriber contract is effective.</value>

        [DataMember(Name="contract_effective")]
        public DateTime? ContractEffective { get; set; }

        /// <summary>
        /// Date when the subscribed-to service is activated.
        /// </summary>
        /// <value>Date when the subscribed-to service is activated.</value>

        [DataMember(Name="service_activation")]
        public DateTime? ServiceActivation { get; set; }

        /// <summary>
        /// Date when all the services or products in the subscription are accepted by the subscriber.
        /// </summary>
        /// <value>Date when all the services or products in the subscription are accepted by the subscriber.</value>

        [DataMember(Name="customer_acceptance")]
        public DateTime? CustomerAcceptance { get; set; }

        /// <summary>
        /// If true, the subscription is billed separately from other subscriptions. If false, the subscription is included with other subscriptions in the account invoice. The default is false.
        /// </summary>
        /// <value>If true, the subscription is billed separately from other subscriptions. If false, the subscription is included with other subscriptions in the account invoice. The default is false.</value>

        [DataMember(Name="invoice_separately")]
        public bool? InvoiceSeparately { get; set; }

        /// <summary>
        /// The order number of the order created by Zuora.
        /// </summary>
        /// <value>The order number of the order created by Zuora.</value>

        [DataMember(Name="order_number")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// List of subscription plans.
        /// </summary>
        /// <value>List of subscription plans.</value>

        [DataMember(Name="subscription_plans")]
        public AllOfsubscriptionVersionSubscriptionPlans SubscriptionPlans { get; private set; }

        /// <summary>
        /// List of invoice items.
        /// </summary>
        /// <value>List of invoice items.</value>

        [DataMember(Name="invoice_items")]
        public AllOfsubscriptionVersionInvoiceItems InvoiceItems { get; private set; }

        /// <summary>
        /// Total prepaid units available during a subscription. It is an aggregate of all funds under a subscription. **Deprecated, please use &#x60;prepaid_balances&#x60; instead.**
        /// </summary>
        /// <value>Total prepaid units available during a subscription. It is an aggregate of all funds under a subscription. **Deprecated, please use &#x60;prepaid_balances&#x60; instead.**</value>

        [DataMember(Name="prepaid_balance")]
        public List<PrepaidBalance> PrepaidBalance { get; private set; }

        /// <summary>
        /// Total prepaid units available during a subscription. It is an aggregate of all funds under a subscription.
        /// </summary>
        /// <value>Total prepaid units available during a subscription. It is an aggregate of all funds under a subscription.</value>

        [DataMember(Name="prepaid_balances")]
        public List<PrepaidBalances> PrepaidBalances { get; private set; }

        /// <summary>
        /// Monthly recurring revenue of the subscription.
        /// </summary>
        /// <value>Monthly recurring revenue of the subscription.</value>

        [DataMember(Name="contracted_mrr")]
        public string ContractedMrr { get; set; }

        /// <summary>
        /// 3-letter ISO 4217 currency code. This field is available only if you have the [Multiple Currencies](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies) feature enabled.
        /// </summary>
        /// <value>3-letter ISO 4217 currency code. This field is available only if you have the [Multiple Currencies](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies) feature enabled.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The reason for cancelling the subscription.
        /// </summary>
        /// <value>The reason for cancelling the subscription.</value>

        [DataMember(Name="cancel_reason")]
        public string CancelReason { get; set; }

        /// <summary>
        /// The last booking date of the Subscription object. You can override the date value when creating a subscription through the \&quot;Subscribe and Amend\&quot; API. The default value &#x60;today&#x60; is set per the user&#x27;s timezone. The value of this field is as follows:    &lt;ul&gt;     &lt;li&gt;For a new subscription created by the [Subscribe and Amend](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate) APIs, this field has the value of the subscription creation date. &lt;/li&gt;     &lt;li&gt;For a subscription changed by an amendment, this field has the value of the amendment booking date.&lt;/li&gt;     &lt;li&gt;For a subscription created or changed by an order, this field has the value of the order date.&lt;/li&gt;     &lt;/ul&gt;  
        /// </summary>
        /// <value>The last booking date of the Subscription object. You can override the date value when creating a subscription through the \&quot;Subscribe and Amend\&quot; API. The default value &#x60;today&#x60; is set per the user&#x27;s timezone. The value of this field is as follows:    &lt;ul&gt;     &lt;li&gt;For a new subscription created by the [Subscribe and Amend](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate) APIs, this field has the value of the subscription creation date. &lt;/li&gt;     &lt;li&gt;For a subscription changed by an amendment, this field has the value of the amendment booking date.&lt;/li&gt;     &lt;li&gt;For a subscription created or changed by an order, this field has the value of the order date.&lt;/li&gt;     &lt;/ul&gt;  </value>

        [DataMember(Name="last_booking_date")]
        public DateTime? LastBookingDate { get; set; }

        /// <summary>
        /// ID of the bill-to contact.
        /// </summary>
        /// <value>ID of the bill-to contact.</value>

        [DataMember(Name="bill_to_id")]
        public string BillToId { get; set; }

        /// <summary>
        /// The name of payment term associated with the invoice.
        /// </summary>
        /// <value>The name of payment term associated with the invoice.</value>

        [DataMember(Name="payment_terms")]
        public string PaymentTerms { get; set; }

        /// <summary>
        /// The billing address for the customer.
        /// </summary>
        /// <value>The billing address for the customer.</value>

        [DataMember(Name="bill_to")]
        public AllOfsubscriptionVersionBillTo BillTo { get; private set; }

        /// <summary>
        /// The billing document settings for the customer.
        /// </summary>
        /// <value>The billing document settings for the customer.</value>

        [DataMember(Name="billing_document_settings")]
        public AllOfsubscriptionVersionBillingDocumentSettings BillingDocumentSettings { get; set; }

        /// <summary>
        /// ID of the sold-to contact.
        /// </summary>
        /// <value>ID of the sold-to contact.</value>

        [DataMember(Name="sold_to_id")]
        public string SoldToId { get; set; }

        /// <summary>
        /// The selling address for the customer.
        /// </summary>
        /// <value>The selling address for the customer.</value>

        [DataMember(Name="sold_to")]
        public AllOfsubscriptionVersionSoldTo SoldTo { get; private set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>

        [DataMember(Name="actions")]
        public AllOfsubscriptionVersionActions Actions { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>

        [DataMember(Name="order")]
        public AllOfsubscriptionVersionOrder Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionVersion {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  SubscriptionNumber: ").Append(SubscriptionNumber).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  InvoiceOwnerAccountId: ").Append(InvoiceOwnerAccountId).Append("\n");
            sb.Append("  InvoiceOwnerAccount: ").Append(InvoiceOwnerAccount).Append("\n");
            sb.Append("  AutoRenew: ").Append(AutoRenew).Append("\n");
            sb.Append("  LatestVersion: ").Append(LatestVersion).Append("\n");
            sb.Append("  InitialTerm: ").Append(InitialTerm).Append("\n");
            sb.Append("  CurrentTerm: ").Append(CurrentTerm).Append("\n");
            sb.Append("  RenewalTerm: ").Append(RenewalTerm).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ContractEffective: ").Append(ContractEffective).Append("\n");
            sb.Append("  ServiceActivation: ").Append(ServiceActivation).Append("\n");
            sb.Append("  CustomerAcceptance: ").Append(CustomerAcceptance).Append("\n");
            sb.Append("  InvoiceSeparately: ").Append(InvoiceSeparately).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  SubscriptionPlans: ").Append(SubscriptionPlans).Append("\n");
            sb.Append("  InvoiceItems: ").Append(InvoiceItems).Append("\n");
            sb.Append("  PrepaidBalance: ").Append(PrepaidBalance).Append("\n");
            sb.Append("  PrepaidBalances: ").Append(PrepaidBalances).Append("\n");
            sb.Append("  ContractedMrr: ").Append(ContractedMrr).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CancelReason: ").Append(CancelReason).Append("\n");
            sb.Append("  LastBookingDate: ").Append(LastBookingDate).Append("\n");
            sb.Append("  BillToId: ").Append(BillToId).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  BillingDocumentSettings: ").Append(BillingDocumentSettings).Append("\n");
            sb.Append("  SoldToId: ").Append(SoldToId).Append("\n");
            sb.Append("  SoldTo: ").Append(SoldTo).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionVersion)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionVersion instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionVersion other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    SubscriptionNumber == other.SubscriptionNumber ||
                    SubscriptionNumber != null &&
                    SubscriptionNumber.Equals(other.SubscriptionNumber)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    InvoiceOwnerAccountId == other.InvoiceOwnerAccountId ||
                    InvoiceOwnerAccountId != null &&
                    InvoiceOwnerAccountId.Equals(other.InvoiceOwnerAccountId)
                ) && 
                (
                    InvoiceOwnerAccount == other.InvoiceOwnerAccount ||
                    InvoiceOwnerAccount != null &&
                    InvoiceOwnerAccount.Equals(other.InvoiceOwnerAccount)
                ) && 
                (
                    AutoRenew == other.AutoRenew ||
                    AutoRenew != null &&
                    AutoRenew.Equals(other.AutoRenew)
                ) && 
                (
                    LatestVersion == other.LatestVersion ||
                    LatestVersion != null &&
                    LatestVersion.Equals(other.LatestVersion)
                ) && 
                (
                    InitialTerm == other.InitialTerm ||
                    InitialTerm != null &&
                    InitialTerm.Equals(other.InitialTerm)
                ) && 
                (
                    CurrentTerm == other.CurrentTerm ||
                    CurrentTerm != null &&
                    CurrentTerm.Equals(other.CurrentTerm)
                ) && 
                (
                    RenewalTerm == other.RenewalTerm ||
                    RenewalTerm != null &&
                    RenewalTerm.Equals(other.RenewalTerm)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ContractEffective == other.ContractEffective ||
                    ContractEffective != null &&
                    ContractEffective.Equals(other.ContractEffective)
                ) && 
                (
                    ServiceActivation == other.ServiceActivation ||
                    ServiceActivation != null &&
                    ServiceActivation.Equals(other.ServiceActivation)
                ) && 
                (
                    CustomerAcceptance == other.CustomerAcceptance ||
                    CustomerAcceptance != null &&
                    CustomerAcceptance.Equals(other.CustomerAcceptance)
                ) && 
                (
                    InvoiceSeparately == other.InvoiceSeparately ||
                    InvoiceSeparately != null &&
                    InvoiceSeparately.Equals(other.InvoiceSeparately)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    SubscriptionPlans == other.SubscriptionPlans ||
                    SubscriptionPlans != null &&
                    SubscriptionPlans.Equals(other.SubscriptionPlans)
                ) && 
                (
                    InvoiceItems == other.InvoiceItems ||
                    InvoiceItems != null &&
                    InvoiceItems.Equals(other.InvoiceItems)
                ) && 
                (
                    PrepaidBalance == other.PrepaidBalance ||
                    PrepaidBalance != null &&
                    PrepaidBalance.SequenceEqual(other.PrepaidBalance)
                ) && 
                (
                    PrepaidBalances == other.PrepaidBalances ||
                    PrepaidBalances != null &&
                    PrepaidBalances.SequenceEqual(other.PrepaidBalances)
                ) && 
                (
                    ContractedMrr == other.ContractedMrr ||
                    ContractedMrr != null &&
                    ContractedMrr.Equals(other.ContractedMrr)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    CancelReason == other.CancelReason ||
                    CancelReason != null &&
                    CancelReason.Equals(other.CancelReason)
                ) && 
                (
                    LastBookingDate == other.LastBookingDate ||
                    LastBookingDate != null &&
                    LastBookingDate.Equals(other.LastBookingDate)
                ) && 
                (
                    BillToId == other.BillToId ||
                    BillToId != null &&
                    BillToId.Equals(other.BillToId)
                ) && 
                (
                    PaymentTerms == other.PaymentTerms ||
                    PaymentTerms != null &&
                    PaymentTerms.Equals(other.PaymentTerms)
                ) && 
                (
                    BillTo == other.BillTo ||
                    BillTo != null &&
                    BillTo.Equals(other.BillTo)
                ) && 
                (
                    BillingDocumentSettings == other.BillingDocumentSettings ||
                    BillingDocumentSettings != null &&
                    BillingDocumentSettings.Equals(other.BillingDocumentSettings)
                ) && 
                (
                    SoldToId == other.SoldToId ||
                    SoldToId != null &&
                    SoldToId.Equals(other.SoldToId)
                ) && 
                (
                    SoldTo == other.SoldTo ||
                    SoldTo != null &&
                    SoldTo.Equals(other.SoldTo)
                ) && 
                (
                    Actions == other.Actions ||
                    Actions != null &&
                    Actions.Equals(other.Actions)
                ) && 
                (
                    Order == other.Order ||
                    Order != null &&
                    Order.Equals(other.Order)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (SubscriptionNumber != null)
                    hashCode = hashCode * 59 + SubscriptionNumber.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (InvoiceOwnerAccountId != null)
                    hashCode = hashCode * 59 + InvoiceOwnerAccountId.GetHashCode();
                    if (InvoiceOwnerAccount != null)
                    hashCode = hashCode * 59 + InvoiceOwnerAccount.GetHashCode();
                    if (AutoRenew != null)
                    hashCode = hashCode * 59 + AutoRenew.GetHashCode();
                    if (LatestVersion != null)
                    hashCode = hashCode * 59 + LatestVersion.GetHashCode();
                    if (InitialTerm != null)
                    hashCode = hashCode * 59 + InitialTerm.GetHashCode();
                    if (CurrentTerm != null)
                    hashCode = hashCode * 59 + CurrentTerm.GetHashCode();
                    if (RenewalTerm != null)
                    hashCode = hashCode * 59 + RenewalTerm.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ContractEffective != null)
                    hashCode = hashCode * 59 + ContractEffective.GetHashCode();
                    if (ServiceActivation != null)
                    hashCode = hashCode * 59 + ServiceActivation.GetHashCode();
                    if (CustomerAcceptance != null)
                    hashCode = hashCode * 59 + CustomerAcceptance.GetHashCode();
                    if (InvoiceSeparately != null)
                    hashCode = hashCode * 59 + InvoiceSeparately.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (SubscriptionPlans != null)
                    hashCode = hashCode * 59 + SubscriptionPlans.GetHashCode();
                    if (InvoiceItems != null)
                    hashCode = hashCode * 59 + InvoiceItems.GetHashCode();
                    if (PrepaidBalance != null)
                    hashCode = hashCode * 59 + PrepaidBalance.GetHashCode();
                    if (PrepaidBalances != null)
                    hashCode = hashCode * 59 + PrepaidBalances.GetHashCode();
                    if (ContractedMrr != null)
                    hashCode = hashCode * 59 + ContractedMrr.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (CancelReason != null)
                    hashCode = hashCode * 59 + CancelReason.GetHashCode();
                    if (LastBookingDate != null)
                    hashCode = hashCode * 59 + LastBookingDate.GetHashCode();
                    if (BillToId != null)
                    hashCode = hashCode * 59 + BillToId.GetHashCode();
                    if (PaymentTerms != null)
                    hashCode = hashCode * 59 + PaymentTerms.GetHashCode();
                    if (BillTo != null)
                    hashCode = hashCode * 59 + BillTo.GetHashCode();
                    if (BillingDocumentSettings != null)
                    hashCode = hashCode * 59 + BillingDocumentSettings.GetHashCode();
                    if (SoldToId != null)
                    hashCode = hashCode * 59 + SoldToId.GetHashCode();
                    if (SoldTo != null)
                    hashCode = hashCode * 59 + SoldTo.GetHashCode();
                    if (Actions != null)
                    hashCode = hashCode * 59 + Actions.GetHashCode();
                    if (Order != null)
                    hashCode = hashCode * 59 + Order.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionVersion left, SubscriptionVersion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionVersion left, SubscriptionVersion right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
