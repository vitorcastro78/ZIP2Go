/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ZIP2Go.WebAPI.Enums;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InvoiceItemPreviewResponse : IEquatable<InvoiceItemPreviewResponse>
    { 
        /// <summary>
        /// The total amount of this invoice item.
        /// </summary>
        /// <value>The total amount of this invoice item.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Identifier of an invoice item or a debit memo item that this discount item or credit memo item is applied to.
        /// </summary>
        /// <value>Identifier of an invoice item or a debit memo item that this discount item or credit memo item is applied to.</value>

        [DataMember(Name="applied_to_item_id")]
        public string AppliedToItemId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDate
        /// </summary>

        [DataMember(Name="document_date")]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionItemDescription
        /// </summary>

        [DataMember(Name="subscription_item_description")]
        public string SubscriptionItemDescription { get; set; }

        /// <summary>
        /// The identifier the subscription item associated with this invoice item.
        /// </summary>
        /// <value>The identifier the subscription item associated with this invoice item.</value>

        [DataMember(Name="subscription_item_id")]
        public string SubscriptionItemId { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionItemName
        /// </summary>

        [DataMember(Name="subscription_item_name")]
        public string SubscriptionItemName { get; set; }

        /// <summary>
        /// Human-readable identifier of the subscription item. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription item. It can be user-supplied.</value>

        [DataMember(Name="subscription_item_number")]
        public string SubscriptionItemNumber { get; set; }

        /// <summary>
        /// Type of the charge. It can be one of the following types: one-time, recurring, or usage.
        /// </summary>
        /// <value>Type of the charge. It can be one of the following types: one-time, recurring, or usage.</value>

        [DataMember(Name="charge_type")]
        public string ChargeType { get; set; }

        /// <summary>
        /// Unique identifier of the object
        /// </summary>
        /// <value>Unique identifier of the object</value>

        [DataMember(Name="id")]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets ProcessingType
        /// </summary>

        [DataMember(Name="processing_type")]
        public ProcessingTypeEnum? ProcessingType { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>

        [DataMember(Name="product_name")]
        public string ProductName { get; set; }

        /// <summary>
        /// The number of units of this item.
        /// </summary>
        /// <value>The number of units of this item.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.
        /// </summary>
        /// <value>The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.</value>

        [DataMember(Name="service_start_date")]
        public string ServiceStartDate { get; set; }

        /// <summary>
        /// The end date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.
        /// </summary>
        /// <value>The end date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.</value>

        [DataMember(Name="service_end_date")]
        public string ServiceEndDate { get; set; }

        /// <summary>
        /// The identifier of the subscription associated with the invoice item.
        /// </summary>
        /// <value>The identifier of the subscription associated with the invoice item.</value>

        [DataMember(Name="subscription_id")]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The subscription number of the subscription associated with this item.
        /// </summary>
        /// <value>The subscription number of the subscription associated with this item.</value>

        [DataMember(Name="subscription_number")]
        public string SubscriptionNumber { get; set; }

        /// <summary>
        /// The name of the subscription associated with this item.
        /// </summary>
        /// <value>The name of the subscription associated with this item.</value>

        [DataMember(Name="subscription_name")]
        public string SubscriptionName { get; set; }

        /// <summary>
        /// The amount of tax applied to the invoice item.
        /// </summary>
        /// <value>The amount of tax applied to the invoice item.</value>

        [DataMember(Name="tax")]
        public decimal? Tax { get; set; }

        /// <summary>
        /// Specifies the units used to measure usage.
        /// </summary>
        /// <value>Specifies the units used to measure usage.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceItemPreviewResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AppliedToItemId: ").Append(AppliedToItemId).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  SubscriptionItemDescription: ").Append(SubscriptionItemDescription).Append("\n");
            sb.Append("  SubscriptionItemId: ").Append(SubscriptionItemId).Append("\n");
            sb.Append("  SubscriptionItemName: ").Append(SubscriptionItemName).Append("\n");
            sb.Append("  SubscriptionItemNumber: ").Append(SubscriptionItemNumber).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessingType: ").Append(ProcessingType).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ServiceStartDate: ").Append(ServiceStartDate).Append("\n");
            sb.Append("  ServiceEndDate: ").Append(ServiceEndDate).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionNumber: ").Append(SubscriptionNumber).Append("\n");
            sb.Append("  SubscriptionName: ").Append(SubscriptionName).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InvoiceItemPreviewResponse)obj);
        }

        /// <summary>
        /// Returns true if InvoiceItemPreviewResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of InvoiceItemPreviewResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceItemPreviewResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    AppliedToItemId == other.AppliedToItemId ||
                    AppliedToItemId != null &&
                    AppliedToItemId.Equals(other.AppliedToItemId)
                ) && 
                (
                    DocumentDate == other.DocumentDate ||
                    DocumentDate != null &&
                    DocumentDate.Equals(other.DocumentDate)
                ) && 
                (
                    SubscriptionItemDescription == other.SubscriptionItemDescription ||
                    SubscriptionItemDescription != null &&
                    SubscriptionItemDescription.Equals(other.SubscriptionItemDescription)
                ) && 
                (
                    SubscriptionItemId == other.SubscriptionItemId ||
                    SubscriptionItemId != null &&
                    SubscriptionItemId.Equals(other.SubscriptionItemId)
                ) && 
                (
                    SubscriptionItemName == other.SubscriptionItemName ||
                    SubscriptionItemName != null &&
                    SubscriptionItemName.Equals(other.SubscriptionItemName)
                ) && 
                (
                    SubscriptionItemNumber == other.SubscriptionItemNumber ||
                    SubscriptionItemNumber != null &&
                    SubscriptionItemNumber.Equals(other.SubscriptionItemNumber)
                ) && 
                (
                    ChargeType == other.ChargeType ||
                    ChargeType != null &&
                    ChargeType.Equals(other.ChargeType)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ProcessingType == other.ProcessingType ||
                    ProcessingType != null &&
                    ProcessingType.Equals(other.ProcessingType)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ServiceStartDate == other.ServiceStartDate ||
                    ServiceStartDate != null &&
                    ServiceStartDate.Equals(other.ServiceStartDate)
                ) && 
                (
                    ServiceEndDate == other.ServiceEndDate ||
                    ServiceEndDate != null &&
                    ServiceEndDate.Equals(other.ServiceEndDate)
                ) && 
                (
                    SubscriptionId == other.SubscriptionId ||
                    SubscriptionId != null &&
                    SubscriptionId.Equals(other.SubscriptionId)
                ) && 
                (
                    SubscriptionNumber == other.SubscriptionNumber ||
                    SubscriptionNumber != null &&
                    SubscriptionNumber.Equals(other.SubscriptionNumber)
                ) && 
                (
                    SubscriptionName == other.SubscriptionName ||
                    SubscriptionName != null &&
                    SubscriptionName.Equals(other.SubscriptionName)
                ) && 
                (
                    Tax == other.Tax ||
                    Tax != null &&
                    Tax.Equals(other.Tax)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (AppliedToItemId != null)
                    hashCode = hashCode * 59 + AppliedToItemId.GetHashCode();
                    if (DocumentDate != null)
                    hashCode = hashCode * 59 + DocumentDate.GetHashCode();
                    if (SubscriptionItemDescription != null)
                    hashCode = hashCode * 59 + SubscriptionItemDescription.GetHashCode();
                    if (SubscriptionItemId != null)
                    hashCode = hashCode * 59 + SubscriptionItemId.GetHashCode();
                    if (SubscriptionItemName != null)
                    hashCode = hashCode * 59 + SubscriptionItemName.GetHashCode();
                    if (SubscriptionItemNumber != null)
                    hashCode = hashCode * 59 + SubscriptionItemNumber.GetHashCode();
                    if (ChargeType != null)
                    hashCode = hashCode * 59 + ChargeType.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ProcessingType != null)
                    hashCode = hashCode * 59 + ProcessingType.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ServiceStartDate != null)
                    hashCode = hashCode * 59 + ServiceStartDate.GetHashCode();
                    if (ServiceEndDate != null)
                    hashCode = hashCode * 59 + ServiceEndDate.GetHashCode();
                    if (SubscriptionId != null)
                    hashCode = hashCode * 59 + SubscriptionId.GetHashCode();
                    if (SubscriptionNumber != null)
                    hashCode = hashCode * 59 + SubscriptionNumber.GetHashCode();
                    if (SubscriptionName != null)
                    hashCode = hashCode * 59 + SubscriptionName.GetHashCode();
                    if (Tax != null)
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InvoiceItemPreviewResponse left, InvoiceItemPreviewResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InvoiceItemPreviewResponse left, InvoiceItemPreviewResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
