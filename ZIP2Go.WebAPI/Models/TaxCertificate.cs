/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// The tax certificate information.
    /// </summary>
    [DataContract]
    public partial class TaxCertificate : IEquatable<TaxCertificate>
    { 
        /// <summary>
        /// Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on country of origin and sold-to addresses in Avalara.
        /// </summary>
        /// <value>Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on country of origin and sold-to addresses in Avalara.</value>

        [DataMember(Name="company_code")]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Identifier of the tax exemption certificate.
        /// </summary>
        /// <value>Identifier of the tax exemption certificate.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The tax certificate start date.
        /// </summary>
        /// <value>The tax certificate start date.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Description of the tax exemption certificate.
        /// </summary>
        /// <value>Description of the tax exemption certificate.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// A unique entity use code used by Avalara to apply exemptions. This field is required only when you choose Avalara as your tax engine. See [Exempt Transactions](https://developer.avalara.com/avatax/handling-tax-exempt-customers/) for more information.
        /// </summary>
        /// <value>A unique entity use code used by Avalara to apply exemptions. This field is required only when you choose Avalara as your tax engine. See [Exempt Transactions](https://developer.avalara.com/avatax/handling-tax-exempt-customers/) for more information.</value>

        [DataMember(Name="entity_use_code")]
        public string EntityUseCode { get; set; }

        /// <summary>
        /// The tax certificate end date.
        /// </summary>
        /// <value>The tax certificate end date.</value>

        [DataMember(Name="end_date")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Typically, this is a state or government agency
        /// </summary>
        /// <value>Typically, this is a state or government agency</value>

        [DataMember(Name="issuing_jurisdiction")]
        public string IssuingJurisdiction { get; set; }

        /// <summary>
        /// Status of the tax exemption certificate, indication whether the certificate has been verified.
        /// </summary>
        /// <value>Status of the tax exemption certificate, indication whether the certificate has been verified.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = "pending")]
            PendingEnum = 0,
            /// <summary>
            /// Enum VerifiedEnum for verified
            /// </summary>
            [EnumMember(Value = "verified")]
            VerifiedEnum = 1,
            /// <summary>
            /// Enum NotValidEnum for not_valid
            /// </summary>
            [EnumMember(Value = "not_valid")]
            NotValidEnum = 2        }

        /// <summary>
        /// Status of the tax exemption certificate, indication whether the certificate has been verified.
        /// </summary>
        /// <value>Status of the tax exemption certificate, indication whether the certificate has been verified.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Value Added Tax (VAT) ID. Each VAT ID must begin with the code of the country code and followed by a block of digits or characters.
        /// </summary>
        /// <value>Value Added Tax (VAT) ID. Each VAT ID must begin with the code of the country code and followed by a block of digits or characters.</value>

        [DataMember(Name="tax_identifier")]
        public string TaxIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxCertificate {\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EntityUseCode: ").Append(EntityUseCode).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IssuingJurisdiction: ").Append(IssuingJurisdiction).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TaxIdentifier: ").Append(TaxIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaxCertificate)obj);
        }

        /// <summary>
        /// Returns true if TaxCertificate instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxCertificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxCertificate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CompanyCode == other.CompanyCode ||
                    CompanyCode != null &&
                    CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    EntityUseCode == other.EntityUseCode ||
                    EntityUseCode != null &&
                    EntityUseCode.Equals(other.EntityUseCode)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    IssuingJurisdiction == other.IssuingJurisdiction ||
                    IssuingJurisdiction != null &&
                    IssuingJurisdiction.Equals(other.IssuingJurisdiction)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    TaxIdentifier == other.TaxIdentifier ||
                    TaxIdentifier != null &&
                    TaxIdentifier.Equals(other.TaxIdentifier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CompanyCode != null)
                    hashCode = hashCode * 59 + CompanyCode.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (EntityUseCode != null)
                    hashCode = hashCode * 59 + EntityUseCode.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (IssuingJurisdiction != null)
                    hashCode = hashCode * 59 + IssuingJurisdiction.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (TaxIdentifier != null)
                    hashCode = hashCode * 59 + TaxIdentifier.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaxCertificate left, TaxCertificate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaxCertificate left, TaxCertificate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
