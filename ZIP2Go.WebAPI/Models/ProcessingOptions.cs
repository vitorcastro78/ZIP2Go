/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// Processing options for the invoice or payment.
    /// </summary>
    [DataContract]
    public partial class ProcessingOptions : IEquatable<ProcessingOptions>
    { 
        /// <summary>
        /// The date printed on billing documents.
        /// </summary>
        /// <value>The date printed on billing documents.</value>

        [DataMember(Name="document_date")]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// The target date for the order to be picked up by bill run for billing.
        /// </summary>
        /// <value>The target date for the order to be picked up by bill run for billing.</value>

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// Specifies whether to just create an invoice, or to create an invoice and collect payment.
        /// </summary>
        /// <value>Specifies whether to just create an invoice, or to create an invoice and collect payment.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CollectionMethodEnum
        {
            /// <summary>
            /// Enum CollectPaymentEnum for collect_payment
            /// </summary>
            [EnumMember(Value = "collect_payment")]
            CollectPaymentEnum = 0,
            /// <summary>
            /// Enum CreateInvoiceEnum for create_invoice
            /// </summary>
            [EnumMember(Value = "create_invoice")]
            CreateInvoiceEnum = 1,
            /// <summary>
            /// Enum ProcessRefundEnum for process_refund
            /// </summary>
            [EnumMember(Value = "process_refund")]
            ProcessRefundEnum = 2,
            /// <summary>
            /// Enum RunBillingEnum for run_billing
            /// </summary>
            [EnumMember(Value = "run_billing")]
            RunBillingEnum = 3        }

        /// <summary>
        /// Specifies whether to just create an invoice, or to create an invoice and collect payment.
        /// </summary>
        /// <value>Specifies whether to just create an invoice, or to create an invoice and collect payment.</value>

        [DataMember(Name="collection_method")]
        public CollectionMethodEnum? CollectionMethod { get; set; }

        /// <summary>
        /// Payment method Id used to pay billing documents.
        /// </summary>
        /// <value>Payment method Id used to pay billing documents.</value>

        [DataMember(Name="payment_method_id")]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Gets or Sets DraftInvoice
        /// </summary>

        [DataMember(Name="draft_invoice")]
        public bool? DraftInvoice { get; set; }

        /// <summary>
        /// Gets or Sets PaymentGatewayId
        /// </summary>

        [DataMember(Name="payment_gateway_id")]
        public string PaymentGatewayId { get; set; }

        /// <summary>
        /// Gets or Sets RefundReasonCode
        /// </summary>

        [DataMember(Name="refund_reason_code")]
        public string RefundReasonCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessingOptions {\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  CollectionMethod: ").Append(CollectionMethod).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  DraftInvoice: ").Append(DraftInvoice).Append("\n");
            sb.Append("  PaymentGatewayId: ").Append(PaymentGatewayId).Append("\n");
            sb.Append("  RefundReasonCode: ").Append(RefundReasonCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProcessingOptions)obj);
        }

        /// <summary>
        /// Returns true if ProcessingOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessingOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessingOptions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DocumentDate == other.DocumentDate ||
                    DocumentDate != null &&
                    DocumentDate.Equals(other.DocumentDate)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                ) && 
                (
                    CollectionMethod == other.CollectionMethod ||
                    CollectionMethod != null &&
                    CollectionMethod.Equals(other.CollectionMethod)
                ) && 
                (
                    PaymentMethodId == other.PaymentMethodId ||
                    PaymentMethodId != null &&
                    PaymentMethodId.Equals(other.PaymentMethodId)
                ) && 
                (
                    DraftInvoice == other.DraftInvoice ||
                    DraftInvoice != null &&
                    DraftInvoice.Equals(other.DraftInvoice)
                ) && 
                (
                    PaymentGatewayId == other.PaymentGatewayId ||
                    PaymentGatewayId != null &&
                    PaymentGatewayId.Equals(other.PaymentGatewayId)
                ) && 
                (
                    RefundReasonCode == other.RefundReasonCode ||
                    RefundReasonCode != null &&
                    RefundReasonCode.Equals(other.RefundReasonCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DocumentDate != null)
                    hashCode = hashCode * 59 + DocumentDate.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                    if (CollectionMethod != null)
                    hashCode = hashCode * 59 + CollectionMethod.GetHashCode();
                    if (PaymentMethodId != null)
                    hashCode = hashCode * 59 + PaymentMethodId.GetHashCode();
                    if (DraftInvoice != null)
                    hashCode = hashCode * 59 + DraftInvoice.GetHashCode();
                    if (PaymentGatewayId != null)
                    hashCode = hashCode * 59 + PaymentGatewayId.GetHashCode();
                    if (RefundReasonCode != null)
                    hashCode = hashCode * 59 + RefundReasonCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProcessingOptions left, ProcessingOptions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProcessingOptions left, ProcessingOptions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
