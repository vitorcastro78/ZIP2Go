/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ZIP2Go.WebAPI.Enums;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreditMemoItemPreviewResponse : IEquatable<CreditMemoItemPreviewResponse>
    { 
        /// <summary>
        /// The total amount of this credit memo item.
        /// </summary>
        /// <value>The total amount of this credit memo item.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The total amount of this credit memo item exclusive of tax.
        /// </summary>
        /// <value>The total amount of this credit memo item exclusive of tax.</value>

        [DataMember(Name="subtotal")]
        public decimal? Subtotal { get; set; }

        /// <summary>
        /// Identifier of an invoice item that this credit memo item is applied to.
        /// </summary>
        /// <value>Identifier of an invoice item that this credit memo item is applied to.</value>

        [DataMember(Name="applied_to_item_id")]
        public string AppliedToItemId { get; set; }

        /// <summary>
        /// The date when the credit memo item takes effect.
        /// </summary>
        /// <value>The date when the credit memo item takes effect.</value>

        [DataMember(Name="document_item_date")]
        public DateTime? DocumentItemDate { get; set; }

        /// <summary>
        /// Gets or Sets DocumentItemNumber
        /// </summary>

        [DataMember(Name="document_item_number")]
        public string DocumentItemNumber { get; set; }

        /// <summary>
        /// Type of the charge. It can be one of the following types: one-time, recurring, or usage.
        /// </summary>
        /// <value>Type of the charge. It can be one of the following types: one-time, recurring, or usage.</value>

        [DataMember(Name="charge_type")]
        public string ChargeType { get; set; }

        /// <summary>
        /// An arbitrary string associated with the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string associated with the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifier of the object
        /// </summary>
        /// <value>Unique identifier of the object</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingType
        /// </summary>

        [DataMember(Name="processing_type")]
        public ProcessingTypeEnum? ProcessingType { get; set; }

        /// <summary>
        /// The number of units of this item.
        /// </summary>
        /// <value>The number of units of this item.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// The identifier the subscription item associated with this credit memo item.
        /// </summary>
        /// <value>The identifier the subscription item associated with this credit memo item.</value>

        [DataMember(Name="subscription_item_id")]
        public string SubscriptionItemId { get; set; }

        /// <summary>
        /// The start date of the service period associated with this credit memo item. If the associated charge is a one-time fee, then this date is the date of that charge.
        /// </summary>
        /// <value>The start date of the service period associated with this credit memo item. If the associated charge is a one-time fee, then this date is the date of that charge.</value>

        [DataMember(Name="service_start_date")]
        public string ServiceStartDate { get; set; }

        /// <summary>
        /// The end date of the service period associated with this credit memo item. If the associated charge is a one-time fee, then this date is the date of that charge.
        /// </summary>
        /// <value>The end date of the service period associated with this credit memo item. If the associated charge is a one-time fee, then this date is the date of that charge.</value>

        [DataMember(Name="service_end_date")]
        public string ServiceEndDate { get; set; }

        /// <summary>
        /// The unique SKU (stock keeping unit) of the product associated with this item.
        /// </summary>
        /// <value>The unique SKU (stock keeping unit) of the product associated with this item.</value>

        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// The name of the SKU associated with this item
        /// </summary>
        /// <value>The name of the SKU associated with this item</value>

        [DataMember(Name="sku_name")]
        public string SkuName { get; set; }

        /// <summary>
        /// The identifier of the subscription associated with the credit memo item.
        /// </summary>
        /// <value>The identifier of the subscription associated with the credit memo item.</value>

        [DataMember(Name="subscription_id")]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Human-readable identifier of the subscription. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription. It can be user-supplied.</value>

        [DataMember(Name="subscription_number")]
        public string SubscriptionNumber { get; set; }

        /// <summary>
        /// Specifies the units used to measure usage.
        /// </summary>
        /// <value>Specifies the units used to measure usage.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditMemoItemPreviewResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  AppliedToItemId: ").Append(AppliedToItemId).Append("\n");
            sb.Append("  DocumentItemDate: ").Append(DocumentItemDate).Append("\n");
            sb.Append("  DocumentItemNumber: ").Append(DocumentItemNumber).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessingType: ").Append(ProcessingType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SubscriptionItemId: ").Append(SubscriptionItemId).Append("\n");
            sb.Append("  ServiceStartDate: ").Append(ServiceStartDate).Append("\n");
            sb.Append("  ServiceEndDate: ").Append(ServiceEndDate).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  SkuName: ").Append(SkuName).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionNumber: ").Append(SubscriptionNumber).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditMemoItemPreviewResponse)obj);
        }

        /// <summary>
        /// Returns true if CreditMemoItemPreviewResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditMemoItemPreviewResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditMemoItemPreviewResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Subtotal == other.Subtotal ||
                    Subtotal != null &&
                    Subtotal.Equals(other.Subtotal)
                ) && 
                (
                    AppliedToItemId == other.AppliedToItemId ||
                    AppliedToItemId != null &&
                    AppliedToItemId.Equals(other.AppliedToItemId)
                ) && 
                (
                    DocumentItemDate == other.DocumentItemDate ||
                    DocumentItemDate != null &&
                    DocumentItemDate.Equals(other.DocumentItemDate)
                ) && 
                (
                    DocumentItemNumber == other.DocumentItemNumber ||
                    DocumentItemNumber != null &&
                    DocumentItemNumber.Equals(other.DocumentItemNumber)
                ) && 
                (
                    ChargeType == other.ChargeType ||
                    ChargeType != null &&
                    ChargeType.Equals(other.ChargeType)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ProcessingType == other.ProcessingType ||
                    ProcessingType != null &&
                    ProcessingType.Equals(other.ProcessingType)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    SubscriptionItemId == other.SubscriptionItemId ||
                    SubscriptionItemId != null &&
                    SubscriptionItemId.Equals(other.SubscriptionItemId)
                ) && 
                (
                    ServiceStartDate == other.ServiceStartDate ||
                    ServiceStartDate != null &&
                    ServiceStartDate.Equals(other.ServiceStartDate)
                ) && 
                (
                    ServiceEndDate == other.ServiceEndDate ||
                    ServiceEndDate != null &&
                    ServiceEndDate.Equals(other.ServiceEndDate)
                ) && 
                (
                    Sku == other.Sku ||
                    Sku != null &&
                    Sku.Equals(other.Sku)
                ) && 
                (
                    SkuName == other.SkuName ||
                    SkuName != null &&
                    SkuName.Equals(other.SkuName)
                ) && 
                (
                    SubscriptionId == other.SubscriptionId ||
                    SubscriptionId != null &&
                    SubscriptionId.Equals(other.SubscriptionId)
                ) && 
                (
                    SubscriptionNumber == other.SubscriptionNumber ||
                    SubscriptionNumber != null &&
                    SubscriptionNumber.Equals(other.SubscriptionNumber)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Subtotal != null)
                    hashCode = hashCode * 59 + Subtotal.GetHashCode();
                    if (AppliedToItemId != null)
                    hashCode = hashCode * 59 + AppliedToItemId.GetHashCode();
                    if (DocumentItemDate != null)
                    hashCode = hashCode * 59 + DocumentItemDate.GetHashCode();
                    if (DocumentItemNumber != null)
                    hashCode = hashCode * 59 + DocumentItemNumber.GetHashCode();
                    if (ChargeType != null)
                    hashCode = hashCode * 59 + ChargeType.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ProcessingType != null)
                    hashCode = hashCode * 59 + ProcessingType.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (SubscriptionItemId != null)
                    hashCode = hashCode * 59 + SubscriptionItemId.GetHashCode();
                    if (ServiceStartDate != null)
                    hashCode = hashCode * 59 + ServiceStartDate.GetHashCode();
                    if (ServiceEndDate != null)
                    hashCode = hashCode * 59 + ServiceEndDate.GetHashCode();
                    if (Sku != null)
                    hashCode = hashCode * 59 + Sku.GetHashCode();
                    if (SkuName != null)
                    hashCode = hashCode * 59 + SkuName.GetHashCode();
                    if (SubscriptionId != null)
                    hashCode = hashCode * 59 + SubscriptionId.GetHashCode();
                    if (SubscriptionNumber != null)
                    hashCode = hashCode * 59 + SubscriptionNumber.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreditMemoItemPreviewResponse left, CreditMemoItemPreviewResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditMemoItemPreviewResponse left, CreditMemoItemPreviewResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
