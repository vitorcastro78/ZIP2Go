/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionPatchRequest : IEquatable<SubscriptionPatchRequest>
    { 
        /// <summary>
        /// Description of the subscription.
        /// </summary>
        /// <value>Description of the subscription.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>

        [DataMember(Name="terms")]
        public SubscriptionTermPatchRequest Terms { get; set; }

        /// <summary>
        /// Gets or Sets StartOn
        /// </summary>

        [DataMember(Name="start_on")]
        public StartOn StartOn { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription.</value>

        [DataMember(Name="invoice_owner_account_id")]
        public string InvoiceOwnerAccountId { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription.</value>

        [DataMember(Name="invoice_owner_account_number")]
        public string InvoiceOwnerAccountNumber { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Specify this field if you want to add one or multiple subscription plans to this subscription.
        /// </summary>
        /// <value>Specify this field if you want to add one or multiple subscription plans to this subscription.</value>

        [DataMember(Name="add_subscription_plans")]
        public List<SubscriptionAddPlanPatchRequest> AddSubscriptionPlans { get; set; }

        /// <summary>
        /// Specify this field if you want to remove one or multiple subscription plans from this subscription.
        /// </summary>
        /// <value>Specify this field if you want to remove one or multiple subscription plans from this subscription.</value>

        [DataMember(Name="remove_subscription_plans")]
        public List<SubscriptionRemovePlanPatchRequest> RemoveSubscriptionPlans { get; set; }

        /// <summary>
        /// Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. 
        /// </summary>
        /// <value>Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. </value>

        [DataMember(Name="replace_subscription_plans")]
        public List<SubscriptionReplacePlanPatchRequest> ReplaceSubscriptionPlans { get; set; }

        /// <summary>
        /// Gets or Sets UpdateSubscriptionPlans
        /// </summary>

        [DataMember(Name="update_subscription_plans")]
        public List<SubscriptionUpdatePlanPatchRequest> UpdateSubscriptionPlans { get; set; }

        /// <summary>
        /// Gets or Sets Renew
        /// </summary>

        [DataMember(Name="renew")]
        public SubscriptionRenewPatchRequest Renew { get; set; }

        /// <summary>
        /// Specify this field when renewing a subscription.
        /// </summary>
        /// <value>Specify this field when renewing a subscription.</value>

        [DataMember(Name="renewals")]
        public List<SubscriptionRenewPatchRequest> Renewals { get; set; }

        /// <summary>
        /// Gets or Sets Cancel
        /// </summary>

        [DataMember(Name="cancel")]
        public CancelSubscriptionRequest Cancel { get; set; }

        /// <summary>
        /// Gets or Sets Pause
        /// </summary>

        [DataMember(Name="pause")]
        public PauseSubscriptionRequest Pause { get; set; }

        /// <summary>
        /// Gets or Sets Resume
        /// </summary>

        [DataMember(Name="resume")]
        public ResumeSubscriptionRequest Resume { get; set; }

        /// <summary>
        /// ID of the bill-to contact.
        /// </summary>
        /// <value>ID of the bill-to contact.</value>

        [DataMember(Name="bill_to_id")]
        public string BillToId { get; set; }

        /// <summary>
        /// The name of payment term associated with the invoice.
        /// </summary>
        /// <value>The name of payment term associated with the invoice.</value>

        [DataMember(Name="payment_terms")]
        public string PaymentTerms { get; set; }

        /// <summary>
        /// The billing document settings for the customer.
        /// </summary>
        /// <value>The billing document settings for the customer.</value>

        [DataMember(Name="billing_document_settings")]
        public AllOfsubscriptionPatchRequestBillingDocumentSettings BillingDocumentSettings { get; set; }

        /// <summary>
        /// ID of the sold-to contact.
        /// </summary>
        /// <value>ID of the sold-to contact.</value>

        [DataMember(Name="sold_to_id")]
        public string SoldToId { get; set; }

        /// <summary>
        /// Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice.
        /// </summary>
        /// <value>Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice.</value>

        [DataMember(Name="invoice_separately")]
        public bool? InvoiceSeparately { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPatchRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  InvoiceOwnerAccountId: ").Append(InvoiceOwnerAccountId).Append("\n");
            sb.Append("  InvoiceOwnerAccountNumber: ").Append(InvoiceOwnerAccountNumber).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AddSubscriptionPlans: ").Append(AddSubscriptionPlans).Append("\n");
            sb.Append("  RemoveSubscriptionPlans: ").Append(RemoveSubscriptionPlans).Append("\n");
            sb.Append("  ReplaceSubscriptionPlans: ").Append(ReplaceSubscriptionPlans).Append("\n");
            sb.Append("  UpdateSubscriptionPlans: ").Append(UpdateSubscriptionPlans).Append("\n");
            sb.Append("  Renew: ").Append(Renew).Append("\n");
            sb.Append("  Renewals: ").Append(Renewals).Append("\n");
            sb.Append("  Cancel: ").Append(Cancel).Append("\n");
            sb.Append("  Pause: ").Append(Pause).Append("\n");
            sb.Append("  Resume: ").Append(Resume).Append("\n");
            sb.Append("  BillToId: ").Append(BillToId).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  BillingDocumentSettings: ").Append(BillingDocumentSettings).Append("\n");
            sb.Append("  SoldToId: ").Append(SoldToId).Append("\n");
            sb.Append("  InvoiceSeparately: ").Append(InvoiceSeparately).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubscriptionPatchRequest)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionPatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPatchRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    Terms == other.Terms ||
                    Terms != null &&
                    Terms.Equals(other.Terms)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                ) && 
                (
                    InvoiceOwnerAccountId == other.InvoiceOwnerAccountId ||
                    InvoiceOwnerAccountId != null &&
                    InvoiceOwnerAccountId.Equals(other.InvoiceOwnerAccountId)
                ) && 
                (
                    InvoiceOwnerAccountNumber == other.InvoiceOwnerAccountNumber ||
                    InvoiceOwnerAccountNumber != null &&
                    InvoiceOwnerAccountNumber.Equals(other.InvoiceOwnerAccountNumber)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    AddSubscriptionPlans == other.AddSubscriptionPlans ||
                    AddSubscriptionPlans != null &&
                    AddSubscriptionPlans.SequenceEqual(other.AddSubscriptionPlans)
                ) && 
                (
                    RemoveSubscriptionPlans == other.RemoveSubscriptionPlans ||
                    RemoveSubscriptionPlans != null &&
                    RemoveSubscriptionPlans.SequenceEqual(other.RemoveSubscriptionPlans)
                ) && 
                (
                    ReplaceSubscriptionPlans == other.ReplaceSubscriptionPlans ||
                    ReplaceSubscriptionPlans != null &&
                    ReplaceSubscriptionPlans.SequenceEqual(other.ReplaceSubscriptionPlans)
                ) && 
                (
                    UpdateSubscriptionPlans == other.UpdateSubscriptionPlans ||
                    UpdateSubscriptionPlans != null &&
                    UpdateSubscriptionPlans.SequenceEqual(other.UpdateSubscriptionPlans)
                ) && 
                (
                    Renew == other.Renew ||
                    Renew != null &&
                    Renew.Equals(other.Renew)
                ) && 
                (
                    Renewals == other.Renewals ||
                    Renewals != null &&
                    Renewals.SequenceEqual(other.Renewals)
                ) && 
                (
                    Cancel == other.Cancel ||
                    Cancel != null &&
                    Cancel.Equals(other.Cancel)
                ) && 
                (
                    Pause == other.Pause ||
                    Pause != null &&
                    Pause.Equals(other.Pause)
                ) && 
                (
                    Resume == other.Resume ||
                    Resume != null &&
                    Resume.Equals(other.Resume)
                ) && 
                (
                    BillToId == other.BillToId ||
                    BillToId != null &&
                    BillToId.Equals(other.BillToId)
                ) && 
                (
                    PaymentTerms == other.PaymentTerms ||
                    PaymentTerms != null &&
                    PaymentTerms.Equals(other.PaymentTerms)
                ) && 
                (
                    BillingDocumentSettings == other.BillingDocumentSettings ||
                    BillingDocumentSettings != null &&
                    BillingDocumentSettings.Equals(other.BillingDocumentSettings)
                ) && 
                (
                    SoldToId == other.SoldToId ||
                    SoldToId != null &&
                    SoldToId.Equals(other.SoldToId)
                ) && 
                (
                    InvoiceSeparately == other.InvoiceSeparately ||
                    InvoiceSeparately != null &&
                    InvoiceSeparately.Equals(other.InvoiceSeparately)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (Terms != null)
                    hashCode = hashCode * 59 + Terms.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                    if (InvoiceOwnerAccountId != null)
                    hashCode = hashCode * 59 + InvoiceOwnerAccountId.GetHashCode();
                    if (InvoiceOwnerAccountNumber != null)
                    hashCode = hashCode * 59 + InvoiceOwnerAccountNumber.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (AddSubscriptionPlans != null)
                    hashCode = hashCode * 59 + AddSubscriptionPlans.GetHashCode();
                    if (RemoveSubscriptionPlans != null)
                    hashCode = hashCode * 59 + RemoveSubscriptionPlans.GetHashCode();
                    if (ReplaceSubscriptionPlans != null)
                    hashCode = hashCode * 59 + ReplaceSubscriptionPlans.GetHashCode();
                    if (UpdateSubscriptionPlans != null)
                    hashCode = hashCode * 59 + UpdateSubscriptionPlans.GetHashCode();
                    if (Renew != null)
                    hashCode = hashCode * 59 + Renew.GetHashCode();
                    if (Renewals != null)
                    hashCode = hashCode * 59 + Renewals.GetHashCode();
                    if (Cancel != null)
                    hashCode = hashCode * 59 + Cancel.GetHashCode();
                    if (Pause != null)
                    hashCode = hashCode * 59 + Pause.GetHashCode();
                    if (Resume != null)
                    hashCode = hashCode * 59 + Resume.GetHashCode();
                    if (BillToId != null)
                    hashCode = hashCode * 59 + BillToId.GetHashCode();
                    if (PaymentTerms != null)
                    hashCode = hashCode * 59 + PaymentTerms.GetHashCode();
                    if (BillingDocumentSettings != null)
                    hashCode = hashCode * 59 + BillingDocumentSettings.GetHashCode();
                    if (SoldToId != null)
                    hashCode = hashCode * 59 + SoldToId.GetHashCode();
                    if (InvoiceSeparately != null)
                    hashCode = hashCode * 59 + InvoiceSeparately.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubscriptionPatchRequest left, SubscriptionPatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionPatchRequest left, SubscriptionPatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
