/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentMethodPatchRequest : IEquatable<PaymentMethodPatchRequest>
    { 
        /// <summary>
        /// Gets or Sets BillingDetails
        /// </summary>

        [DataMember(Name="billing_details")]
        public BillingDetails BillingDetails { get; set; }

        /// <summary>
        /// A customer account identifier.
        /// </summary>
        /// <value>A customer account identifier.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// A human-readable customer account identifier. It can be user-supplied.
        /// </summary>
        /// <value>A human-readable customer account identifier. It can be user-supplied.</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Credit card information. When providing a card number, you must meet the requirements for PCI compliance. We strongly recommend using Zuora.js instead of interacting with this API directly.
        /// </summary>
        /// <value>Credit card information. When providing a card number, you must meet the requirements for PCI compliance. We strongly recommend using Zuora.js instead of interacting with this API directly.</value>

        [DataMember(Name="card")]
        public AllOfpaymentMethodPatchRequestCard Card { get; set; }

        /// <summary>
        /// Credit Card Reference Transaction. See Supported payment methods for payment gateways that support this type of payment method.
        /// </summary>
        /// <value>Credit Card Reference Transaction. See Supported payment methods for payment gateways that support this type of payment method.</value>

        [DataMember(Name="cc_ref")]
        public AllOfpaymentMethodPatchRequestCcRef CcRef { get; set; }

        /// <summary>
        /// Gets or Sets Mandate
        /// </summary>

        [DataMember(Name="mandate")]
        public AllOfpaymentMethodPatchRequestMandate Mandate { get; set; }

        /// <summary>
        /// If this is an ach_debit payment method, this hash contains details about the ACH debit bank account.
        /// </summary>
        /// <value>If this is an ach_debit payment method, this hash contains details about the ACH debit bank account.</value>

        [DataMember(Name="ach_debit")]
        public AllOfpaymentMethodPatchRequestAchDebit AchDebit { get; set; }

        /// <summary>
        /// Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped.
        /// </summary>
        /// <value>Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped.</value>

        [DataMember(Name="maximum_payment_attempts")]
        public decimal? MaximumPaymentAttempts { get; set; }

        /// <summary>
        /// The retry interval in hours.
        /// </summary>
        /// <value>The retry interval in hours.</value>

        [DataMember(Name="payment_retry_interval")]
        public int? PaymentRetryInterval { get; set; }

        /// <summary>
        /// Identifier of the device browser session.
        /// </summary>
        /// <value>Identifier of the device browser session.</value>

        [DataMember(Name="device_session_id")]
        public string DeviceSessionId { get; set; }

        /// <summary>
        /// Gets or Sets GatewayOptions
        /// </summary>

        [DataMember(Name="gateway_options")]
        public Dictionary<string, string> GatewayOptions { get; set; }

        /// <summary>
        /// 3-letter ISO 4217 currency code.
        /// </summary>
        /// <value>3-letter ISO 4217 currency code.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Identifier of the payment gateway Zuora will use to authorize the payments that are made with this payment method.
        /// </summary>
        /// <value>Identifier of the payment gateway Zuora will use to authorize the payments that are made with this payment method.</value>

        [DataMember(Name="gateway_id")]
        public string GatewayId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethodPatchRequest {\n");
            sb.Append("  BillingDetails: ").Append(BillingDetails).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  CcRef: ").Append(CcRef).Append("\n");
            sb.Append("  Mandate: ").Append(Mandate).Append("\n");
            sb.Append("  AchDebit: ").Append(AchDebit).Append("\n");
            sb.Append("  MaximumPaymentAttempts: ").Append(MaximumPaymentAttempts).Append("\n");
            sb.Append("  PaymentRetryInterval: ").Append(PaymentRetryInterval).Append("\n");
            sb.Append("  DeviceSessionId: ").Append(DeviceSessionId).Append("\n");
            sb.Append("  GatewayOptions: ").Append(GatewayOptions).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentMethodPatchRequest)obj);
        }

        /// <summary>
        /// Returns true if PaymentMethodPatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentMethodPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodPatchRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BillingDetails == other.BillingDetails ||
                    BillingDetails != null &&
                    BillingDetails.Equals(other.BillingDetails)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    Card == other.Card ||
                    Card != null &&
                    Card.Equals(other.Card)
                ) && 
                (
                    CcRef == other.CcRef ||
                    CcRef != null &&
                    CcRef.Equals(other.CcRef)
                ) && 
                (
                    Mandate == other.Mandate ||
                    Mandate != null &&
                    Mandate.Equals(other.Mandate)
                ) && 
                (
                    AchDebit == other.AchDebit ||
                    AchDebit != null &&
                    AchDebit.Equals(other.AchDebit)
                ) && 
                (
                    MaximumPaymentAttempts == other.MaximumPaymentAttempts ||
                    MaximumPaymentAttempts != null &&
                    MaximumPaymentAttempts.Equals(other.MaximumPaymentAttempts)
                ) && 
                (
                    PaymentRetryInterval == other.PaymentRetryInterval ||
                    PaymentRetryInterval != null &&
                    PaymentRetryInterval.Equals(other.PaymentRetryInterval)
                ) && 
                (
                    DeviceSessionId == other.DeviceSessionId ||
                    DeviceSessionId != null &&
                    DeviceSessionId.Equals(other.DeviceSessionId)
                ) && 
                (
                    GatewayOptions == other.GatewayOptions ||
                    GatewayOptions != null &&
                    GatewayOptions.SequenceEqual(other.GatewayOptions)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    GatewayId == other.GatewayId ||
                    GatewayId != null &&
                    GatewayId.Equals(other.GatewayId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BillingDetails != null)
                    hashCode = hashCode * 59 + BillingDetails.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (Card != null)
                    hashCode = hashCode * 59 + Card.GetHashCode();
                    if (CcRef != null)
                    hashCode = hashCode * 59 + CcRef.GetHashCode();
                    if (Mandate != null)
                    hashCode = hashCode * 59 + Mandate.GetHashCode();
                    if (AchDebit != null)
                    hashCode = hashCode * 59 + AchDebit.GetHashCode();
                    if (MaximumPaymentAttempts != null)
                    hashCode = hashCode * 59 + MaximumPaymentAttempts.GetHashCode();
                    if (PaymentRetryInterval != null)
                    hashCode = hashCode * 59 + PaymentRetryInterval.GetHashCode();
                    if (DeviceSessionId != null)
                    hashCode = hashCode * 59 + DeviceSessionId.GetHashCode();
                    if (GatewayOptions != null)
                    hashCode = hashCode * 59 + GatewayOptions.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (GatewayId != null)
                    hashCode = hashCode * 59 + GatewayId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentMethodPatchRequest left, PaymentMethodPatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentMethodPatchRequest left, PaymentMethodPatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
