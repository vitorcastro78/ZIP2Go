/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentRunCreateRequest : IEquatable<PaymentRunCreateRequest>
    { 
        /// <summary>
        /// If true, any posted credit memos are applied first.
        /// </summary>
        /// <value>If true, any posted credit memos are applied first.</value>

        [DataMember(Name="apply_credit_memos")]
        public bool? ApplyCreditMemos { get; set; }

        /// <summary>
        /// If true, any unapplied payments are applied first.
        /// </summary>
        /// <value>If true, any unapplied payments are applied first.</value>

        [DataMember(Name="apply_unapplied_payments")]
        public bool? ApplyUnappliedPayments { get; set; }

        /// <summary>
        /// Identifier of the customer account batch to be included in this payment run.
        /// </summary>
        /// <value>Identifier of the customer account batch to be included in this payment run.</value>

        [DataMember(Name="batch")]
        public string Batch { get; set; }

        /// <summary>
        /// The day of the month to bill multiple customer accounts.
        /// </summary>
        /// <value>The day of the month to bill multiple customer accounts.</value>

        [DataMember(Name="bill_cycle_day")]
        public string BillCycleDay { get; set; }

        /// <summary>
        /// The unique identifier of a bill run.
        /// </summary>
        /// <value>The unique identifier of a bill run.</value>

        [DataMember(Name="bill_run_id")]
        public string BillRunId { get; set; }

        /// <summary>
        /// Indicates whether to process electronic payments during the execution of payment runs.       If the Payment user permission \&quot;Process Electronic Payment\&quot; is disabled, this field will be ignored.
        /// </summary>
        /// <value>Indicates whether to process electronic payments during the execution of payment runs.       If the Payment user permission \&quot;Process Electronic Payment\&quot; is disabled, this field will be ignored.</value>

        [DataMember(Name="collect_payment")]
        public bool? CollectPayment { get; set; }

        /// <summary>
        /// Three-letter ISO currency code.
        /// </summary>
        /// <value>Three-letter ISO currency code.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// If true, a single payment will be collected for all receivables due on an account.
        /// </summary>
        /// <value>If true, a single payment will be collected for all receivables due on an account.</value>

        [DataMember(Name="consolidated_payment")]
        public bool? ConsolidatedPayment { get; set; }

        /// <summary>
        /// Unique identifier for the payment gateway.
        /// </summary>
        /// <value>Unique identifier for the payment gateway.</value>

        [DataMember(Name="gateway_id")]
        public string GatewayId { get; set; }

        /// <summary>
        /// The date and time when the scheduled payment run is to be executed, in &#x60;yyyy-mm-dd hh:mm:ss&#x60; format. The backend will ignore minutes and seconds in the field value. For example, if you specify &#x60;2017-03-01 11:30:37&#x60; for this value, this payment run will be run at 2017-03-01 11:00:00.      &lt;br /&gt;       You must specify either the &#x60;payment_run_date&#x60; field or the &#x60;target_date&#x60; field in the request body.      If you specify the &#x60;payment_run_date&#x60; field, the scheduced payment run is to be executed on the specified payment run date. If you specify the &#x60;target_date&#x60; field, the payment run is executed immediately after it is created.
        /// </summary>
        /// <value>The date and time when the scheduled payment run is to be executed, in &#x60;yyyy-mm-dd hh:mm:ss&#x60; format. The backend will ignore minutes and seconds in the field value. For example, if you specify &#x60;2017-03-01 11:30:37&#x60; for this value, this payment run will be run at 2017-03-01 11:00:00.      &lt;br /&gt;       You must specify either the &#x60;payment_run_date&#x60; field or the &#x60;target_date&#x60; field in the request body.      If you specify the &#x60;payment_run_date&#x60; field, the scheduced payment run is to be executed on the specified payment run date. If you specify the &#x60;target_date&#x60; field, the payment run is executed immediately after it is created.</value>

        [DataMember(Name="payment_run_date")]
        public DateTime? PaymentRunDate { get; set; }

        /// <summary>
        /// The target date used to determine which receivables to be paid in the payment run.       The payments are collected for all receivables with the due date no later than the target date.
        /// </summary>
        /// <value>The target date used to determine which receivables to be paid in the payment run.       The payments are collected for all receivables with the due date no later than the target date.</value>

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRunCreateRequest {\n");
            sb.Append("  ApplyCreditMemos: ").Append(ApplyCreditMemos).Append("\n");
            sb.Append("  ApplyUnappliedPayments: ").Append(ApplyUnappliedPayments).Append("\n");
            sb.Append("  Batch: ").Append(Batch).Append("\n");
            sb.Append("  BillCycleDay: ").Append(BillCycleDay).Append("\n");
            sb.Append("  BillRunId: ").Append(BillRunId).Append("\n");
            sb.Append("  CollectPayment: ").Append(CollectPayment).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ConsolidatedPayment: ").Append(ConsolidatedPayment).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("  PaymentRunDate: ").Append(PaymentRunDate).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentRunCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if PaymentRunCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentRunCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRunCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplyCreditMemos == other.ApplyCreditMemos ||
                    ApplyCreditMemos != null &&
                    ApplyCreditMemos.Equals(other.ApplyCreditMemos)
                ) && 
                (
                    ApplyUnappliedPayments == other.ApplyUnappliedPayments ||
                    ApplyUnappliedPayments != null &&
                    ApplyUnappliedPayments.Equals(other.ApplyUnappliedPayments)
                ) && 
                (
                    Batch == other.Batch ||
                    Batch != null &&
                    Batch.Equals(other.Batch)
                ) && 
                (
                    BillCycleDay == other.BillCycleDay ||
                    BillCycleDay != null &&
                    BillCycleDay.Equals(other.BillCycleDay)
                ) && 
                (
                    BillRunId == other.BillRunId ||
                    BillRunId != null &&
                    BillRunId.Equals(other.BillRunId)
                ) && 
                (
                    CollectPayment == other.CollectPayment ||
                    CollectPayment != null &&
                    CollectPayment.Equals(other.CollectPayment)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    ConsolidatedPayment == other.ConsolidatedPayment ||
                    ConsolidatedPayment != null &&
                    ConsolidatedPayment.Equals(other.ConsolidatedPayment)
                ) && 
                (
                    GatewayId == other.GatewayId ||
                    GatewayId != null &&
                    GatewayId.Equals(other.GatewayId)
                ) && 
                (
                    PaymentRunDate == other.PaymentRunDate ||
                    PaymentRunDate != null &&
                    PaymentRunDate.Equals(other.PaymentRunDate)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplyCreditMemos != null)
                    hashCode = hashCode * 59 + ApplyCreditMemos.GetHashCode();
                    if (ApplyUnappliedPayments != null)
                    hashCode = hashCode * 59 + ApplyUnappliedPayments.GetHashCode();
                    if (Batch != null)
                    hashCode = hashCode * 59 + Batch.GetHashCode();
                    if (BillCycleDay != null)
                    hashCode = hashCode * 59 + BillCycleDay.GetHashCode();
                    if (BillRunId != null)
                    hashCode = hashCode * 59 + BillRunId.GetHashCode();
                    if (CollectPayment != null)
                    hashCode = hashCode * 59 + CollectPayment.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (ConsolidatedPayment != null)
                    hashCode = hashCode * 59 + ConsolidatedPayment.GetHashCode();
                    if (GatewayId != null)
                    hashCode = hashCode * 59 + GatewayId.GetHashCode();
                    if (PaymentRunDate != null)
                    hashCode = hashCode * 59 + PaymentRunDate.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentRunCreateRequest left, PaymentRunCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentRunCreateRequest left, PaymentRunCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
