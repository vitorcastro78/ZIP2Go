/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Headers : IEquatable<Headers>
    { 
        /// <summary>
        /// A custom identifier for tracking API requests. If you set a value for this header, Zuora returns the same value in the response header. This header enables you to track your API calls to assist with troubleshooting in the event of an issue. The value of this field must use the US-ASCII character set and must not include any of the following characters: colon (:), semicolon (;), double quote (\&quot;), or quote (&#x27;).
        /// </summary>
        /// <value>A custom identifier for tracking API requests. If you set a value for this header, Zuora returns the same value in the response header. This header enables you to track your API calls to assist with troubleshooting in the event of an issue. The value of this field must use the US-ASCII character set and must not include any of the following characters: colon (:), semicolon (;), double quote (\&quot;), or quote (&#x27;).</value>

        [DataMember(Name="zuora-track-id")]
        public string ZuoraTrackId { get; set; }

        /// <summary>
        /// Making asynchronous requests allows you to scale your applications more efficiently by leveraging Zuora&#x27;s infrastructure to enqueue and execute requests for you without blocking. These requests also use built-in retry semantics, which makes them much less likely to fail for non-deterministic reasons, even in extreme high-throughput scenarios. Meanwhile, when you send a request to one of these endpoints, you can expect to receive a response in less than 150 milliseconds and these calls are unlikely to trigger rate limit errors. If set to true, Zuora returns a 202 Accepted response, and the response body contains only a request ID.
        /// </summary>
        /// <value>Making asynchronous requests allows you to scale your applications more efficiently by leveraging Zuora&#x27;s infrastructure to enqueue and execute requests for you without blocking. These requests also use built-in retry semantics, which makes them much less likely to fail for non-deterministic reasons, even in extreme high-throughput scenarios. Meanwhile, when you send a request to one of these endpoints, you can expect to receive a response in less than 150 milliseconds and these calls are unlikely to trigger rate limit errors. If set to true, Zuora returns a 202 Accepted response, and the response body contains only a request ID.</value>

        [DataMember(Name="async")]
        public bool? _Async { get; set; }

        /// <summary>
        /// An entity ID. If you have multi-entity enabled and the authorization token is valid for more than one entity, you must use this header to specify which entity to perform the operation on. If the authorization token is only valid for a single entity, or you do not have multi-entity enabled, you do not need to set this header.
        /// </summary>
        /// <value>An entity ID. If you have multi-entity enabled and the authorization token is valid for more than one entity, you must use this header to specify which entity to perform the operation on. If the authorization token is only valid for a single entity, or you do not have multi-entity enabled, you do not need to set this header.</value>

        [DataMember(Name="zuora-entity-id")]
        public string ZuoraEntityId { get; set; }

        /// <summary>
        /// Specify a unique idempotency key if you want to perform an idempotent POST or PATCH request. Do not use this header in other request types. This idempotency key should be a unique value, and the Zuora server identifies subsequent retries of the same request using this value. For more information, see [Idempotent Requests](https://developer.zuora.com/api-references/quickstart-api/tag/Idempotent-Requests/).
        /// </summary>
        /// <value>Specify a unique idempotency key if you want to perform an idempotent POST or PATCH request. Do not use this header in other request types. This idempotency key should be a unique value, and the Zuora server identifies subsequent retries of the same request using this value. For more information, see [Idempotent Requests](https://developer.zuora.com/api-references/quickstart-api/tag/Idempotent-Requests/).</value>

        [DataMember(Name="idempotency-key")]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Include a &#x60;accept-encoding: gzip&#x60; header to compress responses, which can reduce the bandwidth required for a response. If specified, Zuora automatically compresses responses that contain over 1000 bytes. For more information about this header, see [Request and Response Compression](https://developer.zuora.com/api-references/quickstart-api/tag/Request-and-Response-Compression/).
        /// </summary>
        /// <value>Include a &#x60;accept-encoding: gzip&#x60; header to compress responses, which can reduce the bandwidth required for a response. If specified, Zuora automatically compresses responses that contain over 1000 bytes. For more information about this header, see [Request and Response Compression](https://developer.zuora.com/api-references/quickstart-api/tag/Request-and-Response-Compression/).</value>

        [DataMember(Name="accept-encoding")]
        public string AcceptEncoding { get; set; }

        /// <summary>
        /// Include a &#x60;content-encoding: gzip&#x60; header to compress a request. Upload a gzipped file for the payload if you specify this header. For more information, see [Request and Response Compression](https://developer.zuora.com/api-references/quickstart-api/tag/Request-and-Response-Compression/).
        /// </summary>
        /// <value>Include a &#x60;content-encoding: gzip&#x60; header to compress a request. Upload a gzipped file for the payload if you specify this header. For more information, see [Request and Response Compression](https://developer.zuora.com/api-references/quickstart-api/tag/Request-and-Response-Compression/).</value>

        [DataMember(Name="content-encoding")]
        public string ContentEncoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Headers {\n");
            sb.Append("  ZuoraTrackId: ").Append(ZuoraTrackId).Append("\n");
            sb.Append("  _Async: ").Append(_Async).Append("\n");
            sb.Append("  ZuoraEntityId: ").Append(ZuoraEntityId).Append("\n");
            sb.Append("  IdempotencyKey: ").Append(IdempotencyKey).Append("\n");
            sb.Append("  AcceptEncoding: ").Append(AcceptEncoding).Append("\n");
            sb.Append("  ContentEncoding: ").Append(ContentEncoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Headers)obj);
        }

        /// <summary>
        /// Returns true if Headers instances are equal
        /// </summary>
        /// <param name="other">Instance of Headers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Headers other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ZuoraTrackId == other.ZuoraTrackId ||
                    ZuoraTrackId != null &&
                    ZuoraTrackId.Equals(other.ZuoraTrackId)
                ) && 
                (
                    _Async == other._Async ||
                    _Async != null &&
                    _Async.Equals(other._Async)
                ) && 
                (
                    ZuoraEntityId == other.ZuoraEntityId ||
                    ZuoraEntityId != null &&
                    ZuoraEntityId.Equals(other.ZuoraEntityId)
                ) && 
                (
                    IdempotencyKey == other.IdempotencyKey ||
                    IdempotencyKey != null &&
                    IdempotencyKey.Equals(other.IdempotencyKey)
                ) && 
                (
                    AcceptEncoding == other.AcceptEncoding ||
                    AcceptEncoding != null &&
                    AcceptEncoding.Equals(other.AcceptEncoding)
                ) && 
                (
                    ContentEncoding == other.ContentEncoding ||
                    ContentEncoding != null &&
                    ContentEncoding.Equals(other.ContentEncoding)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ZuoraTrackId != null)
                    hashCode = hashCode * 59 + ZuoraTrackId.GetHashCode();
                    if (_Async != null)
                    hashCode = hashCode * 59 + _Async.GetHashCode();
                    if (ZuoraEntityId != null)
                    hashCode = hashCode * 59 + ZuoraEntityId.GetHashCode();
                    if (IdempotencyKey != null)
                    hashCode = hashCode * 59 + IdempotencyKey.GetHashCode();
                    if (AcceptEncoding != null)
                    hashCode = hashCode * 59 + AcceptEncoding.GetHashCode();
                    if (ContentEncoding != null)
                    hashCode = hashCode * 59 + ContentEncoding.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Headers left, Headers right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Headers left, Headers right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
