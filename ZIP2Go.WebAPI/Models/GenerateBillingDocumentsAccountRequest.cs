/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GenerateBillingDocumentsAccountRequest : IEquatable<GenerateBillingDocumentsAccountRequest>
    { 
        /// <summary>
        /// If true, invoices will be automatically posted.
        /// </summary>
        /// <value>If true, invoices will be automatically posted.</value>

        [DataMember(Name="post")]
        public bool? Post { get; set; }

        /// <summary>
        /// If true, subscriptions will be automatically renewed.
        /// </summary>
        /// <value>If true, subscriptions will be automatically renewed.</value>

        [DataMember(Name="renew")]
        public bool? Renew { get; set; }

        /// <summary>
        /// Charge type or types to be excluded. Can be &#x60;one_time&#x60;,&#x60;recurring&#x60;, or &#x60;usage&#x60;.
        /// </summary>
        /// <value>Charge type or types to be excluded. Can be &#x60;one_time&#x60;,&#x60;recurring&#x60;, or &#x60;usage&#x60;.</value>

        [DataMember(Name="charges_excluded")]
        public string ChargesExcluded { get; set; }

        /// <summary>
        /// A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
        /// </summary>
        /// <value>A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.</value>

        [DataMember(Name="credit_memo_reason_code")]
        public string CreditMemoReasonCode { get; set; }

        /// <summary>
        /// The date when the credit memo is applied
        /// </summary>
        /// <value>The date when the credit memo is applied</value>

        [DataMember(Name="document_date")]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// The IDs of the subscriptions that you want to create the billing documents for. Each value must be the unique identifier of the latest version of an active subscription.
        /// </summary>
        /// <value>The IDs of the subscriptions that you want to create the billing documents for. Each value must be the unique identifier of the latest version of an active subscription.</value>

        [DataMember(Name="subscription_ids")]
        public List<string> SubscriptionIds { get; set; }

        /// <summary>
        /// All unbilled items on or before this date are included.
        /// </summary>
        /// <value>All unbilled items on or before this date are included.</value>

        [DataMember(Name="target_date")]
        public DateTime? TargetDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateBillingDocumentsAccountRequest {\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  Renew: ").Append(Renew).Append("\n");
            sb.Append("  ChargesExcluded: ").Append(ChargesExcluded).Append("\n");
            sb.Append("  CreditMemoReasonCode: ").Append(CreditMemoReasonCode).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  SubscriptionIds: ").Append(SubscriptionIds).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GenerateBillingDocumentsAccountRequest)obj);
        }

        /// <summary>
        /// Returns true if GenerateBillingDocumentsAccountRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GenerateBillingDocumentsAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateBillingDocumentsAccountRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Post == other.Post ||
                    Post != null &&
                    Post.Equals(other.Post)
                ) && 
                (
                    Renew == other.Renew ||
                    Renew != null &&
                    Renew.Equals(other.Renew)
                ) && 
                (
                    ChargesExcluded == other.ChargesExcluded ||
                    ChargesExcluded != null &&
                    ChargesExcluded.Equals(other.ChargesExcluded)
                ) && 
                (
                    CreditMemoReasonCode == other.CreditMemoReasonCode ||
                    CreditMemoReasonCode != null &&
                    CreditMemoReasonCode.Equals(other.CreditMemoReasonCode)
                ) && 
                (
                    DocumentDate == other.DocumentDate ||
                    DocumentDate != null &&
                    DocumentDate.Equals(other.DocumentDate)
                ) && 
                (
                    SubscriptionIds == other.SubscriptionIds ||
                    SubscriptionIds != null &&
                    SubscriptionIds.SequenceEqual(other.SubscriptionIds)
                ) && 
                (
                    TargetDate == other.TargetDate ||
                    TargetDate != null &&
                    TargetDate.Equals(other.TargetDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Post != null)
                    hashCode = hashCode * 59 + Post.GetHashCode();
                    if (Renew != null)
                    hashCode = hashCode * 59 + Renew.GetHashCode();
                    if (ChargesExcluded != null)
                    hashCode = hashCode * 59 + ChargesExcluded.GetHashCode();
                    if (CreditMemoReasonCode != null)
                    hashCode = hashCode * 59 + CreditMemoReasonCode.GetHashCode();
                    if (DocumentDate != null)
                    hashCode = hashCode * 59 + DocumentDate.GetHashCode();
                    if (SubscriptionIds != null)
                    hashCode = hashCode * 59 + SubscriptionIds.GetHashCode();
                    if (TargetDate != null)
                    hashCode = hashCode * 59 + TargetDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GenerateBillingDocumentsAccountRequest left, GenerateBillingDocumentsAccountRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GenerateBillingDocumentsAccountRequest left, GenerateBillingDocumentsAccountRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
