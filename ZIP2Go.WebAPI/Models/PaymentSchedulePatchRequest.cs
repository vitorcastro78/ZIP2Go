/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentSchedulePatchRequest : IEquatable<PaymentSchedulePatchRequest>
    { 
        /// <summary>
        /// Currency of the payment schedule. Note: This field is optional. The default value is the account&#x27;s default currency. This field will be ignored when items is specified.
        /// </summary>
        /// <value>Currency of the payment schedule. Note: This field is optional. The default value is the account&#x27;s default currency. This field will be ignored when items is specified.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The number of payment schedule items to be created for this payment schedule.
        /// </summary>
        /// <value>The number of payment schedule items to be created for this payment schedule.</value>

        [DataMember(Name="number_of_payments")]
        public int? NumberOfPayments { get; set; }

        /// <summary>
        /// ID of the payment gateway used to collect payments. Note: This field is optional. The default value is the account&#x27;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#x27;s default payment gateway ID. This field will be ignored when items is specified.
        /// </summary>
        /// <value>ID of the payment gateway used to collect payments. Note: This field is optional. The default value is the account&#x27;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#x27;s default payment gateway ID. This field will be ignored when items is specified.</value>

        [DataMember(Name="payment_gateway_id")]
        public string PaymentGatewayId { get; set; }

        /// <summary>
        /// ID of the payment method. Note: This field is optional. The default value is the account&#x27;s default payment method ID. This field will be ignored when items is specified.
        /// </summary>
        /// <value>ID of the payment method. Note: This field is optional. The default value is the account&#x27;s default payment method ID. This field will be ignored when items is specified.</value>

        [DataMember(Name="payment_method_id")]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The payment method number of the payment method to be used to collect payments.
        /// </summary>
        /// <value>The payment method number of the payment method to be used to collect payments.</value>

        [DataMember(Name="payment_method_number")]
        public string PaymentMethodNumber { get; set; }

        /// <summary>
        /// At which hour in the day in the tenant&#x27;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenant’s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time.       The default value is &#x60;0&#x60;. If the payment &#x60;run_hour&#x60; and &#x60;scheduled_date&#x60; are backdated, the system will collect the payment when the next &#x60;run_hour&#x60; occurs.
        /// </summary>
        /// <value>At which hour in the day in the tenant&#x27;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenant’s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time.       The default value is &#x60;0&#x60;. If the payment &#x60;run_hour&#x60; and &#x60;scheduled_date&#x60; are backdated, the system will collect the payment when the next &#x60;run_hour&#x60; occurs.</value>

        [Range(0, 23)]
        [DataMember(Name="run_hour")]
        public int? RunHour { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the gateway_options type is supported. Payment schedule payment_options take precedence over payment schedule item payment_options.
        /// </summary>
        /// <value>Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the gateway_options type is supported. Payment schedule payment_options take precedence over payment schedule item payment_options.</value>

        [DataMember(Name="payment_options")]
        public List<PaymentSchedulePaymentOptionRequest> PaymentOptions { get; set; }

        /// <summary>
        /// The date of the first scheduled payment collection. Note: This parameter is required when &#x60;items&#x60; is not specified. This parameter will be ignored when &#x60;items&#x60; is specified.
        /// </summary>
        /// <value>The date of the first scheduled payment collection. Note: This parameter is required when &#x60;items&#x60; is not specified. This parameter will be ignored when &#x60;items&#x60; is specified.</value>

        [DataMember(Name="start_date")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The amount of each payment schedule item in the payment schedule.
        /// </summary>
        /// <value>The amount of each payment schedule item in the payment schedule.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Unit in which term duration is defined. One of week or month.
        /// </summary>
        /// <value>Unit in which term duration is defined. One of week or month.</value>

        [DataMember(Name="period")]
        public string Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentSchedulePatchRequest {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  NumberOfPayments: ").Append(NumberOfPayments).Append("\n");
            sb.Append("  PaymentGatewayId: ").Append(PaymentGatewayId).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PaymentMethodNumber: ").Append(PaymentMethodNumber).Append("\n");
            sb.Append("  RunHour: ").Append(RunHour).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  PaymentOptions: ").Append(PaymentOptions).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentSchedulePatchRequest)obj);
        }

        /// <summary>
        /// Returns true if PaymentSchedulePatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentSchedulePatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentSchedulePatchRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    NumberOfPayments == other.NumberOfPayments ||
                    NumberOfPayments != null &&
                    NumberOfPayments.Equals(other.NumberOfPayments)
                ) && 
                (
                    PaymentGatewayId == other.PaymentGatewayId ||
                    PaymentGatewayId != null &&
                    PaymentGatewayId.Equals(other.PaymentGatewayId)
                ) && 
                (
                    PaymentMethodId == other.PaymentMethodId ||
                    PaymentMethodId != null &&
                    PaymentMethodId.Equals(other.PaymentMethodId)
                ) && 
                (
                    PaymentMethodNumber == other.PaymentMethodNumber ||
                    PaymentMethodNumber != null &&
                    PaymentMethodNumber.Equals(other.PaymentMethodNumber)
                ) && 
                (
                    RunHour == other.RunHour ||
                    RunHour != null &&
                    RunHour.Equals(other.RunHour)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    PaymentOptions == other.PaymentOptions ||
                    PaymentOptions != null &&
                    PaymentOptions.SequenceEqual(other.PaymentOptions)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (NumberOfPayments != null)
                    hashCode = hashCode * 59 + NumberOfPayments.GetHashCode();
                    if (PaymentGatewayId != null)
                    hashCode = hashCode * 59 + PaymentGatewayId.GetHashCode();
                    if (PaymentMethodId != null)
                    hashCode = hashCode * 59 + PaymentMethodId.GetHashCode();
                    if (PaymentMethodNumber != null)
                    hashCode = hashCode * 59 + PaymentMethodNumber.GetHashCode();
                    if (RunHour != null)
                    hashCode = hashCode * 59 + RunHour.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (PaymentOptions != null)
                    hashCode = hashCode * 59 + PaymentOptions.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentSchedulePatchRequest left, PaymentSchedulePatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentSchedulePatchRequest left, PaymentSchedulePatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
