/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Refund : IEquatable<Refund>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>

        [DataMember(Name="updated_by_id")]
        public string UpdatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>

        [DataMember(Name="updated_time")]
        public DateTime? UpdatedTime { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>

        [DataMember(Name="created_by_id")]
        public string CreatedById { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>

        [DataMember(Name="created_time")]
        public DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>

        [DataMember(Name="custom_fields")]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// The custom objects associated with a Zuora standard object.
        /// </summary>
        /// <value>The custom objects associated with a Zuora standard object.</value>

        [DataMember(Name="custom_objects")]
        public OneOfrefundCustomObjects CustomObjects { get; private set; }

        /// <summary>
        /// Refund amount.
        /// </summary>
        /// <value>Refund amount.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets GatewayOptions
        /// </summary>

        [DataMember(Name="gateway_options")]
        public Dictionary<string, string> GatewayOptions { get; set; }

        /// <summary>
        /// The date when the refund takes effect.
        /// </summary>
        /// <value>The date when the refund takes effect.</value>

        [DataMember(Name="refund_date")]
        public DateTime? RefundDate { get; set; }

        /// <summary>
        /// Gets or Sets RefundMethodType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RefundMethodTypeEnum
        {
            /// <summary>
            /// Enum CashEnum for cash
            /// </summary>
            [EnumMember(Value = "cash")]
            CashEnum = 0,
            /// <summary>
            /// Enum CheckEnum for check
            /// </summary>
            [EnumMember(Value = "check")]
            CheckEnum = 1,
            /// <summary>
            /// Enum WireTransferEnum for wire_transfer
            /// </summary>
            [EnumMember(Value = "wire_transfer")]
            WireTransferEnum = 2,
            /// <summary>
            /// Enum PayPalEnum for pay_pal
            /// </summary>
            [EnumMember(Value = "pay_pal")]
            PayPalEnum = 3,
            /// <summary>
            /// Enum CreditCardEnum for credit_card
            /// </summary>
            [EnumMember(Value = "credit_card")]
            CreditCardEnum = 4,
            /// <summary>
            /// Enum CcRefEnum for cc_ref
            /// </summary>
            [EnumMember(Value = "cc_ref")]
            CcRefEnum = 5,
            /// <summary>
            /// Enum AchDebitEnum for ach_debit
            /// </summary>
            [EnumMember(Value = "ach_debit")]
            AchDebitEnum = 6,
            /// <summary>
            /// Enum DebitCardEnum for debit_card
            /// </summary>
            [EnumMember(Value = "debit_card")]
            DebitCardEnum = 7,
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 8        }

        /// <summary>
        /// Gets or Sets RefundMethodType
        /// </summary>

        [DataMember(Name="refund_method_type")]
        public RefundMethodTypeEnum? RefundMethodType { get; set; }

        /// <summary>
        /// Identifier for the payment, either &#x60;payment_number&#x60; or &#x60;payment_id.
        /// </summary>
        /// <value>Identifier for the payment, either &#x60;payment_number&#x60; or &#x60;payment_id.</value>

        [DataMember(Name="payment_id")]
        public string PaymentId { get; private set; }

        /// <summary>
        /// User-provided reason for the refund.
        /// </summary>
        /// <value>User-provided reason for the refund.</value>

        [DataMember(Name="reason_code")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>

        [DataMember(Name="statement_descriptor")]
        public string StatementDescriptor { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>

        [DataMember(Name="statement_descriptor_phone")]
        public string StatementDescriptorPhone { get; set; }

        /// <summary>
        /// If true, indicates that this refund is not handled by Zuora.
        /// </summary>
        /// <value>If true, indicates that this refund is not handled by Zuora.</value>

        [DataMember(Name="external")]
        public bool? External { get; set; }

        /// <summary>
        /// Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments.</value>

        [DataMember(Name="reference_id")]
        public string ReferenceId { get; set; }

        /// <summary>
        /// A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>

        [DataMember(Name="second_reference_id")]
        public string SecondReferenceId { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="bank_account_account")]
        public string BankAccountAccount { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="on_account_account")]
        public string OnAccountAccount { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="unapplied_payment_account")]
        public string UnappliedPaymentAccount { get; set; }

        /// <summary>
        /// Identifier of the payment method used to create this refund.
        /// </summary>
        /// <value>Identifier of the payment method used to create this refund.</value>

        [DataMember(Name="payment_method_id")]
        public string PaymentMethodId { get; private set; }

        /// <summary>
        /// The related credit memo.
        /// </summary>
        /// <value>The related credit memo.</value>

        [DataMember(Name="credit_memo")]
        public AllOfrefundCreditMemo CreditMemo { get; set; }

        /// <summary>
        /// Identifier of the customer this refund is for, if one exists.
        /// </summary>
        /// <value>Identifier of the customer this refund is for, if one exists.</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// The account that owns the refund
        /// </summary>
        /// <value>The account that owns the refund</value>

        [DataMember(Name="account")]
        public AllOfrefundAccount Account { get; set; }

        /// <summary>
        /// Identifier of the payment gateway that Zuora will use to authorize the payments that are made with this payment method. If you do not set this field, Zuora will use one of the following payment gateways instead: The default payment gateway of the customer account that owns the payment method, if the payment method is associated with a customer account or the default payment gateway of your Zuora tenant.
        /// </summary>
        /// <value>Identifier of the payment gateway that Zuora will use to authorize the payments that are made with this payment method. If you do not set this field, Zuora will use one of the following payment gateways instead: The default payment gateway of the customer account that owns the payment method, if the payment method is associated with a customer account or the default payment gateway of your Zuora tenant.</value>

        [DataMember(Name="gateway_id")]
        public string GatewayId { get; set; }

        /// <summary>
        /// Comments about the refund.
        /// </summary>
        /// <value>Comments about the refund.</value>

        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Message returned by the payment gateway for this refund.
        /// </summary>
        /// <value>Message returned by the payment gateway for this refund.</value>

        [DataMember(Name="gateway_response")]
        public string GatewayResponse { get; private set; }

        /// <summary>
        /// Code returned by the payment gateway for this refund.
        /// </summary>
        /// <value>Code returned by the payment gateway for this refund.</value>

        [DataMember(Name="gateway_response_code")]
        public string GatewayResponseCode { get; private set; }

        /// <summary>
        /// The payment gateway state of the refund.
        /// </summary>
        /// <value>The payment gateway state of the refund.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GatewayStateEnum
        {
            /// <summary>
            /// Enum MarkedForSubmissionEnum for marked_for_submission
            /// </summary>
            [EnumMember(Value = "marked_for_submission")]
            MarkedForSubmissionEnum = 0,
            /// <summary>
            /// Enum SubmittedEnum for submitted
            /// </summary>
            [EnumMember(Value = "submitted")]
            SubmittedEnum = 1,
            /// <summary>
            /// Enum SettledEnum for settled
            /// </summary>
            [EnumMember(Value = "settled")]
            SettledEnum = 2,
            /// <summary>
            /// Enum NotSubmittedEnum for not_submitted
            /// </summary>
            [EnumMember(Value = "not_submitted")]
            NotSubmittedEnum = 3,
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 4        }

        /// <summary>
        /// The payment gateway state of the refund.
        /// </summary>
        /// <value>The payment gateway state of the refund.</value>

        [DataMember(Name="gateway_state")]
        public GatewayStateEnum? GatewayState { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>

        [DataMember(Name="payment_method")]
        public PaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Human-readable identifier for this object; may be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier for this object; may be user-supplied.</value>

        [DataMember(Name="refund_number")]
        public string RefundNumber { get; set; }

        /// <summary>
        /// Gets or Sets StateTransitions
        /// </summary>

        [DataMember(Name="state_transitions")]
        public RefundStateTransitions StateTransitions { get; set; }

        /// <summary>
        /// The state of the refund.
        /// </summary>
        /// <value>The state of the refund.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum DraftEnum for draft
            /// </summary>
            [EnumMember(Value = "draft")]
            DraftEnum = 0,
            /// <summary>
            /// Enum PostedEnum for posted
            /// </summary>
            [EnumMember(Value = "posted")]
            PostedEnum = 1,
            /// <summary>
            /// Enum ProcessingEnum for processing
            /// </summary>
            [EnumMember(Value = "processing")]
            ProcessingEnum = 2,
            /// <summary>
            /// Enum ProcessedEnum for processed
            /// </summary>
            [EnumMember(Value = "processed")]
            ProcessedEnum = 3,
            /// <summary>
            /// Enum ErrorEnum for error
            /// </summary>
            [EnumMember(Value = "error")]
            ErrorEnum = 4,
            /// <summary>
            /// Enum CanceledEnum for canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            CanceledEnum = 5        }

        /// <summary>
        /// The state of the refund.
        /// </summary>
        /// <value>The state of the refund.</value>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Gateway reconciliation reason.
        /// </summary>
        /// <value>Gateway reconciliation reason.</value>

        [DataMember(Name="gateway_reconciliation_reason")]
        public string GatewayReconciliationReason { get; private set; }

        /// <summary>
        /// Gateway reconciliation state.
        /// </summary>
        /// <value>Gateway reconciliation state.</value>

        [DataMember(Name="gateway_reconciliation_status")]
        public string GatewayReconciliationStatus { get; private set; }

        /// <summary>
        /// Identifier of the payout from the payment gateway.
        /// </summary>
        /// <value>Identifier of the payout from the payment gateway.</value>

        [DataMember(Name="payout_id")]
        public string PayoutId { get; private set; }

        /// <summary>
        /// Gets or Sets AppliedTo
        /// </summary>

        [DataMember(Name="applied_to")]
        public List<RefundsAppliedToResponse> AppliedTo { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Refund {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomObjects: ").Append(CustomObjects).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GatewayOptions: ").Append(GatewayOptions).Append("\n");
            sb.Append("  RefundDate: ").Append(RefundDate).Append("\n");
            sb.Append("  RefundMethodType: ").Append(RefundMethodType).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  StatementDescriptor: ").Append(StatementDescriptor).Append("\n");
            sb.Append("  StatementDescriptorPhone: ").Append(StatementDescriptorPhone).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  SecondReferenceId: ").Append(SecondReferenceId).Append("\n");
            sb.Append("  BankAccountAccount: ").Append(BankAccountAccount).Append("\n");
            sb.Append("  OnAccountAccount: ").Append(OnAccountAccount).Append("\n");
            sb.Append("  UnappliedPaymentAccount: ").Append(UnappliedPaymentAccount).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  CreditMemo: ").Append(CreditMemo).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  GatewayResponse: ").Append(GatewayResponse).Append("\n");
            sb.Append("  GatewayResponseCode: ").Append(GatewayResponseCode).Append("\n");
            sb.Append("  GatewayState: ").Append(GatewayState).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  RefundNumber: ").Append(RefundNumber).Append("\n");
            sb.Append("  StateTransitions: ").Append(StateTransitions).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  GatewayReconciliationReason: ").Append(GatewayReconciliationReason).Append("\n");
            sb.Append("  GatewayReconciliationStatus: ").Append(GatewayReconciliationStatus).Append("\n");
            sb.Append("  PayoutId: ").Append(PayoutId).Append("\n");
            sb.Append("  AppliedTo: ").Append(AppliedTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Refund)obj);
        }

        /// <summary>
        /// Returns true if Refund instances are equal
        /// </summary>
        /// <param name="other">Instance of Refund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Refund other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedById == other.UpdatedById ||
                    UpdatedById != null &&
                    UpdatedById.Equals(other.UpdatedById)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    UpdatedTime != null &&
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    CreatedById == other.CreatedById ||
                    CreatedById != null &&
                    CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    CreatedTime != null &&
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    CustomObjects == other.CustomObjects ||
                    CustomObjects != null &&
                    CustomObjects.Equals(other.CustomObjects)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    GatewayOptions == other.GatewayOptions ||
                    GatewayOptions != null &&
                    GatewayOptions.SequenceEqual(other.GatewayOptions)
                ) && 
                (
                    RefundDate == other.RefundDate ||
                    RefundDate != null &&
                    RefundDate.Equals(other.RefundDate)
                ) && 
                (
                    RefundMethodType == other.RefundMethodType ||
                    RefundMethodType != null &&
                    RefundMethodType.Equals(other.RefundMethodType)
                ) && 
                (
                    PaymentId == other.PaymentId ||
                    PaymentId != null &&
                    PaymentId.Equals(other.PaymentId)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    StatementDescriptor == other.StatementDescriptor ||
                    StatementDescriptor != null &&
                    StatementDescriptor.Equals(other.StatementDescriptor)
                ) && 
                (
                    StatementDescriptorPhone == other.StatementDescriptorPhone ||
                    StatementDescriptorPhone != null &&
                    StatementDescriptorPhone.Equals(other.StatementDescriptorPhone)
                ) && 
                (
                    External == other.External ||
                    External != null &&
                    External.Equals(other.External)
                ) && 
                (
                    ReferenceId == other.ReferenceId ||
                    ReferenceId != null &&
                    ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    SecondReferenceId == other.SecondReferenceId ||
                    SecondReferenceId != null &&
                    SecondReferenceId.Equals(other.SecondReferenceId)
                ) && 
                (
                    BankAccountAccount == other.BankAccountAccount ||
                    BankAccountAccount != null &&
                    BankAccountAccount.Equals(other.BankAccountAccount)
                ) && 
                (
                    OnAccountAccount == other.OnAccountAccount ||
                    OnAccountAccount != null &&
                    OnAccountAccount.Equals(other.OnAccountAccount)
                ) && 
                (
                    UnappliedPaymentAccount == other.UnappliedPaymentAccount ||
                    UnappliedPaymentAccount != null &&
                    UnappliedPaymentAccount.Equals(other.UnappliedPaymentAccount)
                ) && 
                (
                    PaymentMethodId == other.PaymentMethodId ||
                    PaymentMethodId != null &&
                    PaymentMethodId.Equals(other.PaymentMethodId)
                ) && 
                (
                    CreditMemo == other.CreditMemo ||
                    CreditMemo != null &&
                    CreditMemo.Equals(other.CreditMemo)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    GatewayId == other.GatewayId ||
                    GatewayId != null &&
                    GatewayId.Equals(other.GatewayId)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    GatewayResponse == other.GatewayResponse ||
                    GatewayResponse != null &&
                    GatewayResponse.Equals(other.GatewayResponse)
                ) && 
                (
                    GatewayResponseCode == other.GatewayResponseCode ||
                    GatewayResponseCode != null &&
                    GatewayResponseCode.Equals(other.GatewayResponseCode)
                ) && 
                (
                    GatewayState == other.GatewayState ||
                    GatewayState != null &&
                    GatewayState.Equals(other.GatewayState)
                ) && 
                (
                    PaymentMethod == other.PaymentMethod ||
                    PaymentMethod != null &&
                    PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    RefundNumber == other.RefundNumber ||
                    RefundNumber != null &&
                    RefundNumber.Equals(other.RefundNumber)
                ) && 
                (
                    StateTransitions == other.StateTransitions ||
                    StateTransitions != null &&
                    StateTransitions.Equals(other.StateTransitions)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    GatewayReconciliationReason == other.GatewayReconciliationReason ||
                    GatewayReconciliationReason != null &&
                    GatewayReconciliationReason.Equals(other.GatewayReconciliationReason)
                ) && 
                (
                    GatewayReconciliationStatus == other.GatewayReconciliationStatus ||
                    GatewayReconciliationStatus != null &&
                    GatewayReconciliationStatus.Equals(other.GatewayReconciliationStatus)
                ) && 
                (
                    PayoutId == other.PayoutId ||
                    PayoutId != null &&
                    PayoutId.Equals(other.PayoutId)
                ) && 
                (
                    AppliedTo == other.AppliedTo ||
                    AppliedTo != null &&
                    AppliedTo.SequenceEqual(other.AppliedTo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UpdatedById != null)
                    hashCode = hashCode * 59 + UpdatedById.GetHashCode();
                    if (UpdatedTime != null)
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (CreatedById != null)
                    hashCode = hashCode * 59 + CreatedById.GetHashCode();
                    if (CreatedTime != null)
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (CustomObjects != null)
                    hashCode = hashCode * 59 + CustomObjects.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (GatewayOptions != null)
                    hashCode = hashCode * 59 + GatewayOptions.GetHashCode();
                    if (RefundDate != null)
                    hashCode = hashCode * 59 + RefundDate.GetHashCode();
                    if (RefundMethodType != null)
                    hashCode = hashCode * 59 + RefundMethodType.GetHashCode();
                    if (PaymentId != null)
                    hashCode = hashCode * 59 + PaymentId.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (StatementDescriptor != null)
                    hashCode = hashCode * 59 + StatementDescriptor.GetHashCode();
                    if (StatementDescriptorPhone != null)
                    hashCode = hashCode * 59 + StatementDescriptorPhone.GetHashCode();
                    if (External != null)
                    hashCode = hashCode * 59 + External.GetHashCode();
                    if (ReferenceId != null)
                    hashCode = hashCode * 59 + ReferenceId.GetHashCode();
                    if (SecondReferenceId != null)
                    hashCode = hashCode * 59 + SecondReferenceId.GetHashCode();
                    if (BankAccountAccount != null)
                    hashCode = hashCode * 59 + BankAccountAccount.GetHashCode();
                    if (OnAccountAccount != null)
                    hashCode = hashCode * 59 + OnAccountAccount.GetHashCode();
                    if (UnappliedPaymentAccount != null)
                    hashCode = hashCode * 59 + UnappliedPaymentAccount.GetHashCode();
                    if (PaymentMethodId != null)
                    hashCode = hashCode * 59 + PaymentMethodId.GetHashCode();
                    if (CreditMemo != null)
                    hashCode = hashCode * 59 + CreditMemo.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (GatewayId != null)
                    hashCode = hashCode * 59 + GatewayId.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (GatewayResponse != null)
                    hashCode = hashCode * 59 + GatewayResponse.GetHashCode();
                    if (GatewayResponseCode != null)
                    hashCode = hashCode * 59 + GatewayResponseCode.GetHashCode();
                    if (GatewayState != null)
                    hashCode = hashCode * 59 + GatewayState.GetHashCode();
                    if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                    if (RefundNumber != null)
                    hashCode = hashCode * 59 + RefundNumber.GetHashCode();
                    if (StateTransitions != null)
                    hashCode = hashCode * 59 + StateTransitions.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (GatewayReconciliationReason != null)
                    hashCode = hashCode * 59 + GatewayReconciliationReason.GetHashCode();
                    if (GatewayReconciliationStatus != null)
                    hashCode = hashCode * 59 + GatewayReconciliationStatus.GetHashCode();
                    if (PayoutId != null)
                    hashCode = hashCode * 59 + PayoutId.GetHashCode();
                    if (AppliedTo != null)
                    hashCode = hashCode * 59 + AppliedTo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Refund left, Refund right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Refund left, Refund right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
