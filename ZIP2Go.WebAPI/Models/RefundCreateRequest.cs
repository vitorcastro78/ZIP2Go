/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RefundCreateRequest : IEquatable<RefundCreateRequest>
    { 
        /// <summary>
        /// Refund amount.
        /// </summary>
        /// <value>Refund amount.</value>
        [Required]

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets GatewayOptions
        /// </summary>

        [DataMember(Name="gateway_options")]
        public Dictionary<string, string> GatewayOptions { get; set; }

        /// <summary>
        /// The date when the refund takes effect.
        /// </summary>
        /// <value>The date when the refund takes effect.</value>

        [DataMember(Name="refund_date")]
        public DateTime? RefundDate { get; set; }

        /// <summary>
        /// Gets or Sets RefundMethodType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RefundMethodTypeEnum
        {
            /// <summary>
            /// Enum CashEnum for cash
            /// </summary>
            [EnumMember(Value = "cash")]
            CashEnum = 0,
            /// <summary>
            /// Enum CheckEnum for check
            /// </summary>
            [EnumMember(Value = "check")]
            CheckEnum = 1,
            /// <summary>
            /// Enum WireTransferEnum for wire_transfer
            /// </summary>
            [EnumMember(Value = "wire_transfer")]
            WireTransferEnum = 2,
            /// <summary>
            /// Enum PayPalEnum for pay_pal
            /// </summary>
            [EnumMember(Value = "pay_pal")]
            PayPalEnum = 3,
            /// <summary>
            /// Enum CreditCardEnum for credit_card
            /// </summary>
            [EnumMember(Value = "credit_card")]
            CreditCardEnum = 4,
            /// <summary>
            /// Enum CcRefEnum for cc_ref
            /// </summary>
            [EnumMember(Value = "cc_ref")]
            CcRefEnum = 5,
            /// <summary>
            /// Enum AchDebitEnum for ach_debit
            /// </summary>
            [EnumMember(Value = "ach_debit")]
            AchDebitEnum = 6,
            /// <summary>
            /// Enum DebitCardEnum for debit_card
            /// </summary>
            [EnumMember(Value = "debit_card")]
            DebitCardEnum = 7,
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 8        }

        /// <summary>
        /// Gets or Sets RefundMethodType
        /// </summary>

        [DataMember(Name="refund_method_type")]
        public RefundMethodTypeEnum? RefundMethodType { get; set; }

        /// <summary>
        /// Identifier for the payment, either &#x60;payment_number&#x60; or &#x60;payment_id.
        /// </summary>
        /// <value>Identifier for the payment, either &#x60;payment_number&#x60; or &#x60;payment_id.</value>

        [DataMember(Name="payment_id")]
        public string PaymentId { get; private set; }

        /// <summary>
        /// User-provided reason for the refund.
        /// </summary>
        /// <value>User-provided reason for the refund.</value>

        [DataMember(Name="reason_code")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>

        [MaxLength(35)]
        [DataMember(Name="statement_descriptor")]
        public string StatementDescriptor { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>

        [MaxLength(20)]
        [DataMember(Name="statement_descriptor_phone")]
        public string StatementDescriptorPhone { get; set; }

        /// <summary>
        /// If true, indicates that this refund is not handled by Zuora.
        /// </summary>
        /// <value>If true, indicates that this refund is not handled by Zuora.</value>

        [DataMember(Name="external")]
        public bool? External { get; set; }

        /// <summary>
        /// Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments.</value>

        [DataMember(Name="reference_id")]
        public string ReferenceId { get; set; }

        /// <summary>
        /// A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>

        [DataMember(Name="second_reference_id")]
        public string SecondReferenceId { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="bank_account_account")]
        public string BankAccountAccount { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="on_account_account")]
        public string OnAccountAccount { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="unapplied_payment_account")]
        public string UnappliedPaymentAccount { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Identifier of the payment method used to create this refund.
        /// </summary>
        /// <value>Identifier of the payment method used to create this refund.</value>

        [DataMember(Name="payment_method_id")]
        public string PaymentMethodId { get; private set; }

        /// <summary>
        /// The related credit memo.
        /// </summary>
        /// <value>The related credit memo.</value>

        [DataMember(Name="credit_memo")]
        public AllOfrefundCreateRequestCreditMemo CreditMemo { get; set; }

        /// <summary>
        /// Indicates to which billing documents (invoices or debit memos) is the refund applied.
        /// </summary>
        /// <value>Indicates to which billing documents (invoices or debit memos) is the refund applied.</value>

        [DataMember(Name="billing_documents")]
        public List<BillingDocumentPaymentApplicationRequest> BillingDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RefundCreateRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GatewayOptions: ").Append(GatewayOptions).Append("\n");
            sb.Append("  RefundDate: ").Append(RefundDate).Append("\n");
            sb.Append("  RefundMethodType: ").Append(RefundMethodType).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  StatementDescriptor: ").Append(StatementDescriptor).Append("\n");
            sb.Append("  StatementDescriptorPhone: ").Append(StatementDescriptorPhone).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  SecondReferenceId: ").Append(SecondReferenceId).Append("\n");
            sb.Append("  BankAccountAccount: ").Append(BankAccountAccount).Append("\n");
            sb.Append("  OnAccountAccount: ").Append(OnAccountAccount).Append("\n");
            sb.Append("  UnappliedPaymentAccount: ").Append(UnappliedPaymentAccount).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  CreditMemo: ").Append(CreditMemo).Append("\n");
            sb.Append("  BillingDocuments: ").Append(BillingDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RefundCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if RefundCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RefundCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    GatewayOptions == other.GatewayOptions ||
                    GatewayOptions != null &&
                    GatewayOptions.SequenceEqual(other.GatewayOptions)
                ) && 
                (
                    RefundDate == other.RefundDate ||
                    RefundDate != null &&
                    RefundDate.Equals(other.RefundDate)
                ) && 
                (
                    RefundMethodType == other.RefundMethodType ||
                    RefundMethodType != null &&
                    RefundMethodType.Equals(other.RefundMethodType)
                ) && 
                (
                    PaymentId == other.PaymentId ||
                    PaymentId != null &&
                    PaymentId.Equals(other.PaymentId)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    StatementDescriptor == other.StatementDescriptor ||
                    StatementDescriptor != null &&
                    StatementDescriptor.Equals(other.StatementDescriptor)
                ) && 
                (
                    StatementDescriptorPhone == other.StatementDescriptorPhone ||
                    StatementDescriptorPhone != null &&
                    StatementDescriptorPhone.Equals(other.StatementDescriptorPhone)
                ) && 
                (
                    External == other.External ||
                    External != null &&
                    External.Equals(other.External)
                ) && 
                (
                    ReferenceId == other.ReferenceId ||
                    ReferenceId != null &&
                    ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    SecondReferenceId == other.SecondReferenceId ||
                    SecondReferenceId != null &&
                    SecondReferenceId.Equals(other.SecondReferenceId)
                ) && 
                (
                    BankAccountAccount == other.BankAccountAccount ||
                    BankAccountAccount != null &&
                    BankAccountAccount.Equals(other.BankAccountAccount)
                ) && 
                (
                    OnAccountAccount == other.OnAccountAccount ||
                    OnAccountAccount != null &&
                    OnAccountAccount.Equals(other.OnAccountAccount)
                ) && 
                (
                    UnappliedPaymentAccount == other.UnappliedPaymentAccount ||
                    UnappliedPaymentAccount != null &&
                    UnappliedPaymentAccount.Equals(other.UnappliedPaymentAccount)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    PaymentMethodId == other.PaymentMethodId ||
                    PaymentMethodId != null &&
                    PaymentMethodId.Equals(other.PaymentMethodId)
                ) && 
                (
                    CreditMemo == other.CreditMemo ||
                    CreditMemo != null &&
                    CreditMemo.Equals(other.CreditMemo)
                ) && 
                (
                    BillingDocuments == other.BillingDocuments ||
                    BillingDocuments != null &&
                    BillingDocuments.SequenceEqual(other.BillingDocuments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (GatewayOptions != null)
                    hashCode = hashCode * 59 + GatewayOptions.GetHashCode();
                    if (RefundDate != null)
                    hashCode = hashCode * 59 + RefundDate.GetHashCode();
                    if (RefundMethodType != null)
                    hashCode = hashCode * 59 + RefundMethodType.GetHashCode();
                    if (PaymentId != null)
                    hashCode = hashCode * 59 + PaymentId.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (StatementDescriptor != null)
                    hashCode = hashCode * 59 + StatementDescriptor.GetHashCode();
                    if (StatementDescriptorPhone != null)
                    hashCode = hashCode * 59 + StatementDescriptorPhone.GetHashCode();
                    if (External != null)
                    hashCode = hashCode * 59 + External.GetHashCode();
                    if (ReferenceId != null)
                    hashCode = hashCode * 59 + ReferenceId.GetHashCode();
                    if (SecondReferenceId != null)
                    hashCode = hashCode * 59 + SecondReferenceId.GetHashCode();
                    if (BankAccountAccount != null)
                    hashCode = hashCode * 59 + BankAccountAccount.GetHashCode();
                    if (OnAccountAccount != null)
                    hashCode = hashCode * 59 + OnAccountAccount.GetHashCode();
                    if (UnappliedPaymentAccount != null)
                    hashCode = hashCode * 59 + UnappliedPaymentAccount.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (PaymentMethodId != null)
                    hashCode = hashCode * 59 + PaymentMethodId.GetHashCode();
                    if (CreditMemo != null)
                    hashCode = hashCode * 59 + CreditMemo.GetHashCode();
                    if (BillingDocuments != null)
                    hashCode = hashCode * 59 + BillingDocuments.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RefundCreateRequest left, RefundCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RefundCreateRequest left, RefundCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
