/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ZIP2Go.WebAPI.Enums;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// An object defining how overage charges are calculated.
    /// </summary>
    [DataContract]
    public partial class Overage : IEquatable<Overage>
    { 
        /// <summary>
        /// Specifies the number of intervals used to calculate smoothed overage charges.
        /// </summary>
        /// <value>Specifies the number of intervals used to calculate smoothed overage charges.</value>

        [DataMember(Name="interval_count")]
        public int? IntervalCount { get; set; }


        /// <summary>
        /// Represents the overage type: one of rolling_window or rollover.
        /// </summary>
        /// <value>Represents the overage type: one of rolling_window or rollover.</value>

        [DataMember(Name="type")]
        public OverageTypeEnum? Type { get; set; }

        /// <summary>
        /// Specifies the included units to which overage charges do not apply.
        /// </summary>
        /// <value>Specifies the included units to which overage charges do not apply.</value>

        [DataMember(Name="included_units")]
        public decimal? IncludedUnits { get; set; }

        /// <summary>
        /// Specifies whether or not to credit unused units.
        /// </summary>
        /// <value>Specifies whether or not to credit unused units.</value>

        [DataMember(Name="credit_unused_units")]
        public bool? CreditUnusedUnits { get; set; }

        /// <summary>
        /// Indicates if the overage price is calculated at the end of the smoothing period.
        /// </summary>
        /// <value>Indicates if the overage price is calculated at the end of the smoothing period.</value>

        [DataMember(Name="apply_at_end_of_smoothing_period")]
        public bool? ApplyAtEndOfSmoothingPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Overage {\n");
            sb.Append("  IntervalCount: ").Append(IntervalCount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IncludedUnits: ").Append(IncludedUnits).Append("\n");
            sb.Append("  CreditUnusedUnits: ").Append(CreditUnusedUnits).Append("\n");
            sb.Append("  ApplyAtEndOfSmoothingPeriod: ").Append(ApplyAtEndOfSmoothingPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Overage)obj);
        }

        /// <summary>
        /// Returns true if Overage instances are equal
        /// </summary>
        /// <param name="other">Instance of Overage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Overage other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IntervalCount == other.IntervalCount ||
                    IntervalCount != null &&
                    IntervalCount.Equals(other.IntervalCount)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    IncludedUnits == other.IncludedUnits ||
                    IncludedUnits != null &&
                    IncludedUnits.Equals(other.IncludedUnits)
                ) && 
                (
                    CreditUnusedUnits == other.CreditUnusedUnits ||
                    CreditUnusedUnits != null &&
                    CreditUnusedUnits.Equals(other.CreditUnusedUnits)
                ) && 
                (
                    ApplyAtEndOfSmoothingPeriod == other.ApplyAtEndOfSmoothingPeriod ||
                    ApplyAtEndOfSmoothingPeriod != null &&
                    ApplyAtEndOfSmoothingPeriod.Equals(other.ApplyAtEndOfSmoothingPeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IntervalCount != null)
                    hashCode = hashCode * 59 + IntervalCount.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (IncludedUnits != null)
                    hashCode = hashCode * 59 + IncludedUnits.GetHashCode();
                    if (CreditUnusedUnits != null)
                    hashCode = hashCode * 59 + CreditUnusedUnits.GetHashCode();
                    if (ApplyAtEndOfSmoothingPeriod != null)
                    hashCode = hashCode * 59 + ApplyAtEndOfSmoothingPeriod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Overage left, Overage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Overage left, Overage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
