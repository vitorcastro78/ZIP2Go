/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreditMemoCreateRequest : IEquatable<CreditMemoCreateRequest>
    { 
        /// <summary>
        /// Identifier of the account that owns the credit memo.     **Either this field or &#x60;account_number&#x60; is required when creating credit memos from a price(charge in the v1 API).**
        /// </summary>
        /// <value>Identifier of the account that owns the credit memo.     **Either this field or &#x60;account_number&#x60; is required when creating credit memos from a price(charge in the v1 API).**</value>

        [DataMember(Name="account_id")]
        public string AccountId { get; set; }

        /// <summary>
        /// Human-readable identifier of the account that owns the credit memo.    **Either this field or &#x60;account_id&#x60; is required when creating credit memos from a price(charge in the v1 API).**
        /// </summary>
        /// <value>Human-readable identifier of the account that owns the credit memo.    **Either this field or &#x60;account_id&#x60; is required when creating credit memos from a price(charge in the v1 API).**</value>

        [DataMember(Name="account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// An arbitrary string associated with the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string associated with the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The date when the credit memo takes effect.
        /// </summary>
        /// <value>The date when the credit memo takes effect.</value>

        [DataMember(Name="document_date")]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// Reason for issuing this credit memo
        /// </summary>
        /// <value>Reason for issuing this credit memo</value>

        [DataMember(Name="reason_code")]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The identifier of the invoice billing document from which this credit memo is created.      **Required when creating credit memos from an invoice.**
        /// </summary>
        /// <value>The identifier of the invoice billing document from which this credit memo is created.      **Required when creating credit memos from an invoice.**</value>

        [DataMember(Name="invoice_id")]
        public string InvoiceId { get; set; }

        /// <summary>
        /// Whether to transfer to an external accounting system.
        /// </summary>
        /// <value>Whether to transfer to an external accounting system.</value>

        [DataMember(Name="transfer_to_accounting")]
        public bool? TransferToAccounting { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Indicates whether to exclude this credit memo from the rule of automatically applying it to invoices.
        /// </summary>
        /// <value>Indicates whether to exclude this credit memo from the rule of automatically applying it to invoices.</value>

        [DataMember(Name="exclude_from_auto_apply_rules")]
        public bool? ExcludeFromAutoApplyRules { get; set; }

        /// <summary>
        /// 3-letter ISO 4217 currency code. This field is available only if you have the [Multiple Currencies](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies) feature enabled and are creating a credit memo from a charge.
        /// </summary>
        /// <value>3-letter ISO 4217 currency code. This field is available only if you have the [Multiple Currencies](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies) feature enabled and are creating a credit memo from a charge.</value>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Information of all credit memo items.
        /// </summary>
        /// <value>Information of all credit memo items.</value>

        [DataMember(Name="items")]
        public List<CreditMemoItemCreateRequest> Items { get; set; }

        /// <summary>
        /// Whether to automatically apply the billing document upon posting.
        /// </summary>
        /// <value>Whether to automatically apply the billing document upon posting.</value>

        [DataMember(Name="apply")]
        public bool? Apply { get; set; }

        /// <summary>
        /// Whether to automatically post a billing document after it is created.
        /// </summary>
        /// <value>Whether to automatically post a billing document after it is created.</value>

        [DataMember(Name="post")]
        public bool? Post { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditMemoCreateRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  TransferToAccounting: ").Append(TransferToAccounting).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  ExcludeFromAutoApplyRules: ").Append(ExcludeFromAutoApplyRules).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Apply: ").Append(Apply).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditMemoCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if CreditMemoCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditMemoCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditMemoCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DocumentDate == other.DocumentDate ||
                    DocumentDate != null &&
                    DocumentDate.Equals(other.DocumentDate)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    InvoiceId == other.InvoiceId ||
                    InvoiceId != null &&
                    InvoiceId.Equals(other.InvoiceId)
                ) && 
                (
                    TransferToAccounting == other.TransferToAccounting ||
                    TransferToAccounting != null &&
                    TransferToAccounting.Equals(other.TransferToAccounting)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    ExcludeFromAutoApplyRules == other.ExcludeFromAutoApplyRules ||
                    ExcludeFromAutoApplyRules != null &&
                    ExcludeFromAutoApplyRules.Equals(other.ExcludeFromAutoApplyRules)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    Apply == other.Apply ||
                    Apply != null &&
                    Apply.Equals(other.Apply)
                ) && 
                (
                    Post == other.Post ||
                    Post != null &&
                    Post.Equals(other.Post)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DocumentDate != null)
                    hashCode = hashCode * 59 + DocumentDate.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (InvoiceId != null)
                    hashCode = hashCode * 59 + InvoiceId.GetHashCode();
                    if (TransferToAccounting != null)
                    hashCode = hashCode * 59 + TransferToAccounting.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (ExcludeFromAutoApplyRules != null)
                    hashCode = hashCode * 59 + ExcludeFromAutoApplyRules.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    if (Apply != null)
                    hashCode = hashCode * 59 + Apply.GetHashCode();
                    if (Post != null)
                    hashCode = hashCode * 59 + Post.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreditMemoCreateRequest left, CreditMemoCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditMemoCreateRequest left, CreditMemoCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
