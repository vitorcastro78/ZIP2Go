/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * OpenAPI spec version: 2024-01-10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ZIP2Go.WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DebitMemoItemCreateRequest : IEquatable<DebitMemoItemCreateRequest>
    { 
        /// <summary>
        /// Amount of the memo item. This should always be equal to unit_amount * quantity.
        /// </summary>
        /// <value>Amount of the memo item. This should always be equal to unit_amount * quantity.</value>

        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// An arbitrary string associated with the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string associated with the object. Often useful for displaying to users.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="deferred_revenue_account")]
        public string DeferredRevenueAccount { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="on_account_account")]
        public string OnAccountAccount { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>

        [DataMember(Name="recognized_revenue_account")]
        public string RecognizedRevenueAccount { get; set; }

        /// <summary>
        /// The name of the revenue recognition rule governing the revenue schedule.
        /// </summary>
        /// <value>The name of the revenue recognition rule governing the revenue schedule.</value>

        [DataMember(Name="revenue_recognition_rule_name")]
        public string RevenueRecognitionRuleName { get; set; }

        /// <summary>
        /// The number of units of this item.
        /// </summary>
        /// <value>The number of units of this item.</value>

        [DataMember(Name="quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// The end date of the service period associated with this debit memo item. If the price for the associated subscription item is a one-time fee, then this date is the date of that subscription item.
        /// </summary>
        /// <value>The end date of the service period associated with this debit memo item. If the price for the associated subscription item is a one-time fee, then this date is the date of that subscription item.</value>

        [DataMember(Name="service_end")]
        public DateTime? ServiceEnd { get; set; }

        /// <summary>
        /// The start date of the service period associated with this debit memo item. If the price for the associated subscription item is a one-time fee, then this date is the date of that subscription item.
        /// </summary>
        /// <value>The start date of the service period associated with this debit memo item. If the price for the associated subscription item is a one-time fee, then this date is the date of that subscription item.</value>
        [Required]

        [DataMember(Name="service_start")]
        public DateTime? ServiceStart { get; set; }

        /// <summary>
        /// The unique SKU (stock keeping unit) of the product associated with this item.
        /// </summary>
        /// <value>The unique SKU (stock keeping unit) of the product associated with this item.</value>

        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Indicates whether the debit memo item amount is inclusive or exclusive of tax.
        /// </summary>
        /// <value>Indicates whether the debit memo item amount is inclusive or exclusive of tax.</value>

        [DataMember(Name="tax_inclusive")]
        public bool? TaxInclusive { get; set; }

        /// <summary>
        /// Specifies the units used to measure usage.
        /// </summary>
        /// <value>Specifies the units used to measure usage.</value>

        [DataMember(Name="unit_of_measure")]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// List of taxation items.
        /// </summary>
        /// <value>List of taxation items.</value>

        [DataMember(Name="taxation_items")]
        public List<TaxationItemCreateRequest> TaxationItems { get; set; }

        /// <summary>
        /// Unit amount of the debit memo item.
        /// </summary>
        /// <value>Unit amount of the debit memo item.</value>

        [DataMember(Name="unit_amount")]
        public decimal? UnitAmount { get; set; }

        /// <summary>
        /// The identifier of the price this debit memo item is associated with.
        /// </summary>
        /// <value>The identifier of the price this debit memo item is associated with.</value>

        [DataMember(Name="price_id")]
        public string PriceId { get; set; }

        /// <summary>
        /// The purchase order number associated with this debit memo item.
        /// </summary>
        /// <value>The purchase order number associated with this debit memo item.</value>

        [DataMember(Name="purchase_order_number")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The designated tax code.
        /// </summary>
        /// <value>The designated tax code.</value>

        [DataMember(Name="tax_code")]
        public string TaxCode { get; set; }

        /// <summary>
        /// Name of the debit memo item displayed to customers on the billing document.
        /// </summary>
        /// <value>Name of the debit memo item displayed to customers on the billing document.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The identifier of the invoice item associated with this debit memo item.
        /// </summary>
        /// <value>The identifier of the invoice item associated with this debit memo item.</value>

        [DataMember(Name="invoice_item_id")]
        public string InvoiceItemId { get; set; }

        /// <summary>
        /// Gets or Sets AccountingCode
        /// </summary>

        [DataMember(Name="accounting_code")]
        public string AccountingCode { get; set; }

        /// <summary>
        /// The date when the billing document item takes effect. This field is applicable only if the &#x60;type&#x60; field is set to &#x60;invoice&#x60;.
        /// </summary>
        /// <value>The date when the billing document item takes effect. This field is applicable only if the &#x60;type&#x60; field is set to &#x60;invoice&#x60;.</value>

        [DataMember(Name="document_item_date")]
        public DateTime? DocumentItemDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>

        [DataMember(Name="custom_fields")]
        public CustomFields CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DebitMemoItemCreateRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeferredRevenueAccount: ").Append(DeferredRevenueAccount).Append("\n");
            sb.Append("  OnAccountAccount: ").Append(OnAccountAccount).Append("\n");
            sb.Append("  RecognizedRevenueAccount: ").Append(RecognizedRevenueAccount).Append("\n");
            sb.Append("  RevenueRecognitionRuleName: ").Append(RevenueRecognitionRuleName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ServiceEnd: ").Append(ServiceEnd).Append("\n");
            sb.Append("  ServiceStart: ").Append(ServiceStart).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  TaxInclusive: ").Append(TaxInclusive).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  TaxationItems: ").Append(TaxationItems).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  PriceId: ").Append(PriceId).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  InvoiceItemId: ").Append(InvoiceItemId).Append("\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  DocumentItemDate: ").Append(DocumentItemDate).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DebitMemoItemCreateRequest)obj);
        }

        /// <summary>
        /// Returns true if DebitMemoItemCreateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of DebitMemoItemCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebitMemoItemCreateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DeferredRevenueAccount == other.DeferredRevenueAccount ||
                    DeferredRevenueAccount != null &&
                    DeferredRevenueAccount.Equals(other.DeferredRevenueAccount)
                ) && 
                (
                    OnAccountAccount == other.OnAccountAccount ||
                    OnAccountAccount != null &&
                    OnAccountAccount.Equals(other.OnAccountAccount)
                ) && 
                (
                    RecognizedRevenueAccount == other.RecognizedRevenueAccount ||
                    RecognizedRevenueAccount != null &&
                    RecognizedRevenueAccount.Equals(other.RecognizedRevenueAccount)
                ) && 
                (
                    RevenueRecognitionRuleName == other.RevenueRecognitionRuleName ||
                    RevenueRecognitionRuleName != null &&
                    RevenueRecognitionRuleName.Equals(other.RevenueRecognitionRuleName)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ServiceEnd == other.ServiceEnd ||
                    ServiceEnd != null &&
                    ServiceEnd.Equals(other.ServiceEnd)
                ) && 
                (
                    ServiceStart == other.ServiceStart ||
                    ServiceStart != null &&
                    ServiceStart.Equals(other.ServiceStart)
                ) && 
                (
                    Sku == other.Sku ||
                    Sku != null &&
                    Sku.Equals(other.Sku)
                ) && 
                (
                    TaxInclusive == other.TaxInclusive ||
                    TaxInclusive != null &&
                    TaxInclusive.Equals(other.TaxInclusive)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    TaxationItems == other.TaxationItems ||
                    TaxationItems != null &&
                    TaxationItems.SequenceEqual(other.TaxationItems)
                ) && 
                (
                    UnitAmount == other.UnitAmount ||
                    UnitAmount != null &&
                    UnitAmount.Equals(other.UnitAmount)
                ) && 
                (
                    PriceId == other.PriceId ||
                    PriceId != null &&
                    PriceId.Equals(other.PriceId)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    TaxCode == other.TaxCode ||
                    TaxCode != null &&
                    TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    InvoiceItemId == other.InvoiceItemId ||
                    InvoiceItemId != null &&
                    InvoiceItemId.Equals(other.InvoiceItemId)
                ) && 
                (
                    AccountingCode == other.AccountingCode ||
                    AccountingCode != null &&
                    AccountingCode.Equals(other.AccountingCode)
                ) && 
                (
                    DocumentItemDate == other.DocumentItemDate ||
                    DocumentItemDate != null &&
                    DocumentItemDate.Equals(other.DocumentItemDate)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DeferredRevenueAccount != null)
                    hashCode = hashCode * 59 + DeferredRevenueAccount.GetHashCode();
                    if (OnAccountAccount != null)
                    hashCode = hashCode * 59 + OnAccountAccount.GetHashCode();
                    if (RecognizedRevenueAccount != null)
                    hashCode = hashCode * 59 + RecognizedRevenueAccount.GetHashCode();
                    if (RevenueRecognitionRuleName != null)
                    hashCode = hashCode * 59 + RevenueRecognitionRuleName.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ServiceEnd != null)
                    hashCode = hashCode * 59 + ServiceEnd.GetHashCode();
                    if (ServiceStart != null)
                    hashCode = hashCode * 59 + ServiceStart.GetHashCode();
                    if (Sku != null)
                    hashCode = hashCode * 59 + Sku.GetHashCode();
                    if (TaxInclusive != null)
                    hashCode = hashCode * 59 + TaxInclusive.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    if (TaxationItems != null)
                    hashCode = hashCode * 59 + TaxationItems.GetHashCode();
                    if (UnitAmount != null)
                    hashCode = hashCode * 59 + UnitAmount.GetHashCode();
                    if (PriceId != null)
                    hashCode = hashCode * 59 + PriceId.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (TaxCode != null)
                    hashCode = hashCode * 59 + TaxCode.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (InvoiceItemId != null)
                    hashCode = hashCode * 59 + InvoiceItemId.GetHashCode();
                    if (AccountingCode != null)
                    hashCode = hashCode * 59 + AccountingCode.GetHashCode();
                    if (DocumentItemDate != null)
                    hashCode = hashCode * 59 + DocumentItemDate.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DebitMemoItemCreateRequest left, DebitMemoItemCreateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DebitMemoItemCreateRequest left, DebitMemoItemCreateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
