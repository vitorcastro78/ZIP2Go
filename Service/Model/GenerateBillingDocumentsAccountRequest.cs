using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Model {

  /// <summary>
  /// 
  /// </summary>
  [DataContract]
  public class GenerateBillingDocumentsAccountRequest {
    /// <summary>
    /// If true, invoices will be automatically posted.
    /// </summary>
    /// <value>If true, invoices will be automatically posted.</value>
    [DataMember(Name="post", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "post")]
    public bool? Post { get; set; }

    /// <summary>
    /// If true, subscriptions will be automatically renewed.
    /// </summary>
    /// <value>If true, subscriptions will be automatically renewed.</value>
    [DataMember(Name="renew", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "renew")]
    public bool? Renew { get; set; }

    /// <summary>
    /// Charge type or types to be excluded. Can be `one_time`,`recurring`, or `usage`.
    /// </summary>
    /// <value>Charge type or types to be excluded. Can be `one_time`,`recurring`, or `usage`.</value>
    [DataMember(Name="charges_excluded", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "charges_excluded")]
    public string ChargesExcluded { get; set; }

    /// <summary>
    /// A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    /// </summary>
    /// <value>A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.</value>
    [DataMember(Name="credit_memo_reason_code", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "credit_memo_reason_code")]
    public string CreditMemoReasonCode { get; set; }

    /// <summary>
    /// The date when the credit memo is applied
    /// </summary>
    /// <value>The date when the credit memo is applied</value>
    [DataMember(Name="document_date", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "document_date")]
    public DateTime? DocumentDate { get; set; }

    /// <summary>
    /// The IDs of the subscriptions that you want to create the billing documents for. Each value must be the unique identifier of the latest version of an active subscription.
    /// </summary>
    /// <value>The IDs of the subscriptions that you want to create the billing documents for. Each value must be the unique identifier of the latest version of an active subscription.</value>
    [DataMember(Name="subscription_ids", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "subscription_ids")]
    public List<string> SubscriptionIds { get; set; }

    /// <summary>
    /// All unbilled items on or before this date are included.
    /// </summary>
    /// <value>All unbilled items on or before this date are included.</value>
    [DataMember(Name="target_date", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "target_date")]
    public DateTime? TargetDate { get; set; }


    /// <summary>
    /// Get the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()  {
      var sb = new StringBuilder();
      sb.Append("class GenerateBillingDocumentsAccountRequest {\n");
      sb.Append("  Post: ").Append(Post).Append("\n");
      sb.Append("  Renew: ").Append(Renew).Append("\n");
      sb.Append("  ChargesExcluded: ").Append(ChargesExcluded).Append("\n");
      sb.Append("  CreditMemoReasonCode: ").Append(CreditMemoReasonCode).Append("\n");
      sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
      sb.Append("  SubscriptionIds: ").Append(SubscriptionIds).Append("\n");
      sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Get the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson() {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

}
}
